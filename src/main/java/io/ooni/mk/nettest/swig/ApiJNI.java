/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package io.ooni.mk.nettest.swig;

public class ApiJNI {
  public final static native String logLevelErr_get();
  public final static native String logLevelWarning_get();
  public final static native String logLevelInfo_get();
  public final static native String logLevelDebug_get();
  public final static native String logLevelDebug2_get();
  public final static native String EventFailureAsnLookup_key_get();
  public final static native void EventFailureAsnLookup_failure_set(long jarg1, EventFailureAsnLookup jarg1_, String jarg2);
  public final static native String EventFailureAsnLookup_failure_get(long jarg1, EventFailureAsnLookup jarg1_);
  public final static native long new_EventFailureAsnLookup();
  public final static native void delete_EventFailureAsnLookup(long jarg1);
  public final static native String EventFailureCcLookup_key_get();
  public final static native void EventFailureCcLookup_failure_set(long jarg1, EventFailureCcLookup jarg1_, String jarg2);
  public final static native String EventFailureCcLookup_failure_get(long jarg1, EventFailureCcLookup jarg1_);
  public final static native long new_EventFailureCcLookup();
  public final static native void delete_EventFailureCcLookup(long jarg1);
  public final static native String EventFailureIpLookup_key_get();
  public final static native void EventFailureIpLookup_failure_set(long jarg1, EventFailureIpLookup jarg1_, String jarg2);
  public final static native String EventFailureIpLookup_failure_get(long jarg1, EventFailureIpLookup jarg1_);
  public final static native long new_EventFailureIpLookup();
  public final static native void delete_EventFailureIpLookup(long jarg1);
  public final static native String EventFailureMeasurement_key_get();
  public final static native void EventFailureMeasurement_failure_set(long jarg1, EventFailureMeasurement jarg1_, String jarg2);
  public final static native String EventFailureMeasurement_failure_get(long jarg1, EventFailureMeasurement jarg1_);
  public final static native long new_EventFailureMeasurement();
  public final static native void delete_EventFailureMeasurement(long jarg1);
  public final static native String EventFailureMeasurementSubmission_key_get();
  public final static native void EventFailureMeasurementSubmission_failure_set(long jarg1, EventFailureMeasurementSubmission jarg1_, String jarg2);
  public final static native String EventFailureMeasurementSubmission_failure_get(long jarg1, EventFailureMeasurementSubmission jarg1_);
  public final static native void EventFailureMeasurementSubmission_idx_set(long jarg1, EventFailureMeasurementSubmission jarg1_, long jarg2);
  public final static native long EventFailureMeasurementSubmission_idx_get(long jarg1, EventFailureMeasurementSubmission jarg1_);
  public final static native void EventFailureMeasurementSubmission_jsonStr_set(long jarg1, EventFailureMeasurementSubmission jarg1_, String jarg2);
  public final static native String EventFailureMeasurementSubmission_jsonStr_get(long jarg1, EventFailureMeasurementSubmission jarg1_);
  public final static native long new_EventFailureMeasurementSubmission();
  public final static native void delete_EventFailureMeasurementSubmission(long jarg1);
  public final static native String EventFailureReportCreate_key_get();
  public final static native void EventFailureReportCreate_failure_set(long jarg1, EventFailureReportCreate jarg1_, String jarg2);
  public final static native String EventFailureReportCreate_failure_get(long jarg1, EventFailureReportCreate jarg1_);
  public final static native long new_EventFailureReportCreate();
  public final static native void delete_EventFailureReportCreate(long jarg1);
  public final static native String EventFailureReportClose_key_get();
  public final static native void EventFailureReportClose_failure_set(long jarg1, EventFailureReportClose jarg1_, String jarg2);
  public final static native String EventFailureReportClose_failure_get(long jarg1, EventFailureReportClose jarg1_);
  public final static native long new_EventFailureReportClose();
  public final static native void delete_EventFailureReportClose(long jarg1);
  public final static native String EventFailureResolverLookup_key_get();
  public final static native void EventFailureResolverLookup_failure_set(long jarg1, EventFailureResolverLookup jarg1_, String jarg2);
  public final static native String EventFailureResolverLookup_failure_get(long jarg1, EventFailureResolverLookup jarg1_);
  public final static native long new_EventFailureResolverLookup();
  public final static native void delete_EventFailureResolverLookup(long jarg1);
  public final static native String EventFailureStartup_key_get();
  public final static native void EventFailureStartup_failure_set(long jarg1, EventFailureStartup jarg1_, String jarg2);
  public final static native String EventFailureStartup_failure_get(long jarg1, EventFailureStartup jarg1_);
  public final static native long new_EventFailureStartup();
  public final static native void delete_EventFailureStartup(long jarg1);
  public final static native String EventLog_key_get();
  public final static native void EventLog_logLevel_set(long jarg1, EventLog jarg1_, String jarg2);
  public final static native String EventLog_logLevel_get(long jarg1, EventLog jarg1_);
  public final static native void EventLog_message_set(long jarg1, EventLog jarg1_, String jarg2);
  public final static native String EventLog_message_get(long jarg1, EventLog jarg1_);
  public final static native long new_EventLog();
  public final static native void delete_EventLog(long jarg1);
  public final static native String EventMeasurement_key_get();
  public final static native void EventMeasurement_idx_set(long jarg1, EventMeasurement jarg1_, long jarg2);
  public final static native long EventMeasurement_idx_get(long jarg1, EventMeasurement jarg1_);
  public final static native void EventMeasurement_jsonStr_set(long jarg1, EventMeasurement jarg1_, String jarg2);
  public final static native String EventMeasurement_jsonStr_get(long jarg1, EventMeasurement jarg1_);
  public final static native long new_EventMeasurement();
  public final static native void delete_EventMeasurement(long jarg1);
  public final static native String EventStatusEnd_key_get();
  public final static native void EventStatusEnd_downloadedKb_set(long jarg1, EventStatusEnd jarg1_, double jarg2);
  public final static native double EventStatusEnd_downloadedKb_get(long jarg1, EventStatusEnd jarg1_);
  public final static native void EventStatusEnd_uploadedKb_set(long jarg1, EventStatusEnd jarg1_, double jarg2);
  public final static native double EventStatusEnd_uploadedKb_get(long jarg1, EventStatusEnd jarg1_);
  public final static native void EventStatusEnd_failure_set(long jarg1, EventStatusEnd jarg1_, String jarg2);
  public final static native String EventStatusEnd_failure_get(long jarg1, EventStatusEnd jarg1_);
  public final static native long new_EventStatusEnd();
  public final static native void delete_EventStatusEnd(long jarg1);
  public final static native String EventStatusGeoipLookup_key_get();
  public final static native void EventStatusGeoipLookup_probeIp_set(long jarg1, EventStatusGeoipLookup jarg1_, String jarg2);
  public final static native String EventStatusGeoipLookup_probeIp_get(long jarg1, EventStatusGeoipLookup jarg1_);
  public final static native void EventStatusGeoipLookup_probeAsn_set(long jarg1, EventStatusGeoipLookup jarg1_, String jarg2);
  public final static native String EventStatusGeoipLookup_probeAsn_get(long jarg1, EventStatusGeoipLookup jarg1_);
  public final static native void EventStatusGeoipLookup_probeCc_set(long jarg1, EventStatusGeoipLookup jarg1_, String jarg2);
  public final static native String EventStatusGeoipLookup_probeCc_get(long jarg1, EventStatusGeoipLookup jarg1_);
  public final static native void EventStatusGeoipLookup_probeNetworkName_set(long jarg1, EventStatusGeoipLookup jarg1_, String jarg2);
  public final static native String EventStatusGeoipLookup_probeNetworkName_get(long jarg1, EventStatusGeoipLookup jarg1_);
  public final static native long new_EventStatusGeoipLookup();
  public final static native void delete_EventStatusGeoipLookup(long jarg1);
  public final static native String EventStatusProgress_key_get();
  public final static native void EventStatusProgress_percentage_set(long jarg1, EventStatusProgress jarg1_, double jarg2);
  public final static native double EventStatusProgress_percentage_get(long jarg1, EventStatusProgress jarg1_);
  public final static native void EventStatusProgress_message_set(long jarg1, EventStatusProgress jarg1_, String jarg2);
  public final static native String EventStatusProgress_message_get(long jarg1, EventStatusProgress jarg1_);
  public final static native long new_EventStatusProgress();
  public final static native void delete_EventStatusProgress(long jarg1);
  public final static native String EventStatusQueued_key_get();
  public final static native long new_EventStatusQueued();
  public final static native void delete_EventStatusQueued(long jarg1);
  public final static native String EventStatusMeasurementStart_key_get();
  public final static native void EventStatusMeasurementStart_idx_set(long jarg1, EventStatusMeasurementStart jarg1_, long jarg2);
  public final static native long EventStatusMeasurementStart_idx_get(long jarg1, EventStatusMeasurementStart jarg1_);
  public final static native void EventStatusMeasurementStart_input_set(long jarg1, EventStatusMeasurementStart jarg1_, String jarg2);
  public final static native String EventStatusMeasurementStart_input_get(long jarg1, EventStatusMeasurementStart jarg1_);
  public final static native long new_EventStatusMeasurementStart();
  public final static native void delete_EventStatusMeasurementStart(long jarg1);
  public final static native String EventStatusMeasurementSubmission_key_get();
  public final static native void EventStatusMeasurementSubmission_idx_set(long jarg1, EventStatusMeasurementSubmission jarg1_, long jarg2);
  public final static native long EventStatusMeasurementSubmission_idx_get(long jarg1, EventStatusMeasurementSubmission jarg1_);
  public final static native long new_EventStatusMeasurementSubmission();
  public final static native void delete_EventStatusMeasurementSubmission(long jarg1);
  public final static native String EventStatusMeasurementDone_key_get();
  public final static native void EventStatusMeasurementDone_idx_set(long jarg1, EventStatusMeasurementDone jarg1_, long jarg2);
  public final static native long EventStatusMeasurementDone_idx_get(long jarg1, EventStatusMeasurementDone jarg1_);
  public final static native long new_EventStatusMeasurementDone();
  public final static native void delete_EventStatusMeasurementDone(long jarg1);
  public final static native String EventStatusReportClose_key_get();
  public final static native void EventStatusReportClose_reportId_set(long jarg1, EventStatusReportClose jarg1_, String jarg2);
  public final static native String EventStatusReportClose_reportId_get(long jarg1, EventStatusReportClose jarg1_);
  public final static native long new_EventStatusReportClose();
  public final static native void delete_EventStatusReportClose(long jarg1);
  public final static native String EventStatusReportCreate_key_get();
  public final static native void EventStatusReportCreate_reportId_set(long jarg1, EventStatusReportCreate jarg1_, String jarg2);
  public final static native String EventStatusReportCreate_reportId_get(long jarg1, EventStatusReportCreate jarg1_);
  public final static native long new_EventStatusReportCreate();
  public final static native void delete_EventStatusReportCreate(long jarg1);
  public final static native String EventStatusResolverLookup_key_get();
  public final static native void EventStatusResolverLookup_ipAddress_set(long jarg1, EventStatusResolverLookup jarg1_, String jarg2);
  public final static native String EventStatusResolverLookup_ipAddress_get(long jarg1, EventStatusResolverLookup jarg1_);
  public final static native long new_EventStatusResolverLookup();
  public final static native void delete_EventStatusResolverLookup(long jarg1);
  public final static native String EventStatusStarted_key_get();
  public final static native long new_EventStatusStarted();
  public final static native void delete_EventStatusStarted(long jarg1);
  public final static native String EventStatusUpdatePerformance_key_get();
  public final static native void EventStatusUpdatePerformance_direction_set(long jarg1, EventStatusUpdatePerformance jarg1_, String jarg2);
  public final static native String EventStatusUpdatePerformance_direction_get(long jarg1, EventStatusUpdatePerformance jarg1_);
  public final static native void EventStatusUpdatePerformance_elapsed_set(long jarg1, EventStatusUpdatePerformance jarg1_, double jarg2);
  public final static native double EventStatusUpdatePerformance_elapsed_get(long jarg1, EventStatusUpdatePerformance jarg1_);
  public final static native void EventStatusUpdatePerformance_numStreams_set(long jarg1, EventStatusUpdatePerformance jarg1_, long jarg2);
  public final static native long EventStatusUpdatePerformance_numStreams_get(long jarg1, EventStatusUpdatePerformance jarg1_);
  public final static native void EventStatusUpdatePerformance_speedKbps_set(long jarg1, EventStatusUpdatePerformance jarg1_, double jarg2);
  public final static native double EventStatusUpdatePerformance_speedKbps_get(long jarg1, EventStatusUpdatePerformance jarg1_);
  public final static native long new_EventStatusUpdatePerformance();
  public final static native void delete_EventStatusUpdatePerformance(long jarg1);
  public final static native String EventStatusUpdateWebsites_key_get();
  public final static native void EventStatusUpdateWebsites_url_set(long jarg1, EventStatusUpdateWebsites jarg1_, String jarg2);
  public final static native String EventStatusUpdateWebsites_url_get(long jarg1, EventStatusUpdateWebsites jarg1_);
  public final static native void EventStatusUpdateWebsites_status_set(long jarg1, EventStatusUpdateWebsites jarg1_, String jarg2);
  public final static native String EventStatusUpdateWebsites_status_get(long jarg1, EventStatusUpdateWebsites jarg1_);
  public final static native long new_EventStatusUpdateWebsites();
  public final static native void delete_EventStatusUpdateWebsites(long jarg1);
  public final static native String EventTaskTerminated_key_get();
  public final static native long new_EventTaskTerminated();
  public final static native void delete_EventTaskTerminated(long jarg1);
  public final static native void SettingsBase_logFilepath_set(long jarg1, SettingsBase jarg1_, String jarg2);
  public final static native String SettingsBase_logFilepath_get(long jarg1, SettingsBase jarg1_);
  public final static native void SettingsBase_logLevel_set(long jarg1, SettingsBase jarg1_, String jarg2);
  public final static native String SettingsBase_logLevel_get(long jarg1, SettingsBase jarg1_);
  public final static native void SettingsBase_outputFilepath_set(long jarg1, SettingsBase jarg1_, String jarg2);
  public final static native String SettingsBase_outputFilepath_get(long jarg1, SettingsBase jarg1_);
  public final static native void SettingsBase_bouncerBaseUrl_set(long jarg1, SettingsBase jarg1_, String jarg2);
  public final static native String SettingsBase_bouncerBaseUrl_get(long jarg1, SettingsBase jarg1_);
  public final static native void SettingsBase_collectorBaseUrl_set(long jarg1, SettingsBase jarg1_, String jarg2);
  public final static native String SettingsBase_collectorBaseUrl_get(long jarg1, SettingsBase jarg1_);
  public final static native void SettingsBase_dnsNameserver_set(long jarg1, SettingsBase jarg1_, String jarg2);
  public final static native String SettingsBase_dnsNameserver_get(long jarg1, SettingsBase jarg1_);
  public final static native void SettingsBase_dnsEngine_set(long jarg1, SettingsBase jarg1_, String jarg2);
  public final static native String SettingsBase_dnsEngine_get(long jarg1, SettingsBase jarg1_);
  public final static native void SettingsBase_geoipAsnPath_set(long jarg1, SettingsBase jarg1_, String jarg2);
  public final static native String SettingsBase_geoipAsnPath_get(long jarg1, SettingsBase jarg1_);
  public final static native void SettingsBase_geoipCountryPath_set(long jarg1, SettingsBase jarg1_, String jarg2);
  public final static native String SettingsBase_geoipCountryPath_get(long jarg1, SettingsBase jarg1_);
  public final static native void SettingsBase_ignoreBouncerError_set(long jarg1, SettingsBase jarg1_, boolean jarg2);
  public final static native boolean SettingsBase_ignoreBouncerError_get(long jarg1, SettingsBase jarg1_);
  public final static native void SettingsBase_ignoreOpenReportError_set(long jarg1, SettingsBase jarg1_, boolean jarg2);
  public final static native boolean SettingsBase_ignoreOpenReportError_get(long jarg1, SettingsBase jarg1_);
  public final static native void SettingsBase_maxRuntime_set(long jarg1, SettingsBase jarg1_, double jarg2);
  public final static native double SettingsBase_maxRuntime_get(long jarg1, SettingsBase jarg1_);
  public final static native void SettingsBase_netCaBundlePath_set(long jarg1, SettingsBase jarg1_, String jarg2);
  public final static native String SettingsBase_netCaBundlePath_get(long jarg1, SettingsBase jarg1_);
  public final static native void SettingsBase_netTimeout_set(long jarg1, SettingsBase jarg1_, double jarg2);
  public final static native double SettingsBase_netTimeout_get(long jarg1, SettingsBase jarg1_);
  public final static native void SettingsBase_noBouncer_set(long jarg1, SettingsBase jarg1_, boolean jarg2);
  public final static native boolean SettingsBase_noBouncer_get(long jarg1, SettingsBase jarg1_);
  public final static native void SettingsBase_noCollector_set(long jarg1, SettingsBase jarg1_, boolean jarg2);
  public final static native boolean SettingsBase_noCollector_get(long jarg1, SettingsBase jarg1_);
  public final static native void SettingsBase_noAsnLookup_set(long jarg1, SettingsBase jarg1_, boolean jarg2);
  public final static native boolean SettingsBase_noAsnLookup_get(long jarg1, SettingsBase jarg1_);
  public final static native void SettingsBase_noCcLookup_set(long jarg1, SettingsBase jarg1_, boolean jarg2);
  public final static native boolean SettingsBase_noCcLookup_get(long jarg1, SettingsBase jarg1_);
  public final static native void SettingsBase_noIpLookup_set(long jarg1, SettingsBase jarg1_, boolean jarg2);
  public final static native boolean SettingsBase_noIpLookup_get(long jarg1, SettingsBase jarg1_);
  public final static native void SettingsBase_noFileReport_set(long jarg1, SettingsBase jarg1_, boolean jarg2);
  public final static native boolean SettingsBase_noFileReport_get(long jarg1, SettingsBase jarg1_);
  public final static native void SettingsBase_noResolverLookup_set(long jarg1, SettingsBase jarg1_, boolean jarg2);
  public final static native boolean SettingsBase_noResolverLookup_get(long jarg1, SettingsBase jarg1_);
  public final static native void SettingsBase_probeAsn_set(long jarg1, SettingsBase jarg1_, String jarg2);
  public final static native String SettingsBase_probeAsn_get(long jarg1, SettingsBase jarg1_);
  public final static native void SettingsBase_probeCc_set(long jarg1, SettingsBase jarg1_, String jarg2);
  public final static native String SettingsBase_probeCc_get(long jarg1, SettingsBase jarg1_);
  public final static native void SettingsBase_probeIp_set(long jarg1, SettingsBase jarg1_, String jarg2);
  public final static native String SettingsBase_probeIp_get(long jarg1, SettingsBase jarg1_);
  public final static native void SettingsBase_randomizeInput_set(long jarg1, SettingsBase jarg1_, boolean jarg2);
  public final static native boolean SettingsBase_randomizeInput_get(long jarg1, SettingsBase jarg1_);
  public final static native void SettingsBase_saveRealProbeAsn_set(long jarg1, SettingsBase jarg1_, boolean jarg2);
  public final static native boolean SettingsBase_saveRealProbeAsn_get(long jarg1, SettingsBase jarg1_);
  public final static native void SettingsBase_saveRealProbeCc_set(long jarg1, SettingsBase jarg1_, boolean jarg2);
  public final static native boolean SettingsBase_saveRealProbeCc_get(long jarg1, SettingsBase jarg1_);
  public final static native void SettingsBase_saveRealProbeIp_set(long jarg1, SettingsBase jarg1_, boolean jarg2);
  public final static native boolean SettingsBase_saveRealProbeIp_get(long jarg1, SettingsBase jarg1_);
  public final static native void SettingsBase_saveRealResolverIp_set(long jarg1, SettingsBase jarg1_, boolean jarg2);
  public final static native boolean SettingsBase_saveRealResolverIp_get(long jarg1, SettingsBase jarg1_);
  public final static native void SettingsBase_softwareName_set(long jarg1, SettingsBase jarg1_, String jarg2);
  public final static native String SettingsBase_softwareName_get(long jarg1, SettingsBase jarg1_);
  public final static native void SettingsBase_softwareVersion_set(long jarg1, SettingsBase jarg1_, String jarg2);
  public final static native String SettingsBase_softwareVersion_get(long jarg1, SettingsBase jarg1_);
  public final static native void SettingsBase_addAnnotation(long jarg1, SettingsBase jarg1_, String jarg2, String jarg3);
  public final static native long new_SettingsBase();
  public final static native void delete_SettingsBase(long jarg1);
  public final static native void SettingsBaseNeedsInput_addInput(long jarg1, SettingsBaseNeedsInput jarg1_, String jarg2);
  public final static native void SettingsBaseNeedsInput_addInputFilepath(long jarg1, SettingsBaseNeedsInput jarg1_, String jarg2);
  public final static native long new_SettingsBaseNeedsInput();
  public final static native void delete_SettingsBaseNeedsInput(long jarg1);
  public final static native long new_NettestBase();
  public final static native void delete_NettestBase(long jarg1);
  public final static native boolean NettestBase_run(long jarg1, NettestBase jarg1_);
  public final static native boolean NettestBase_runSwigExplicitNettestBase(long jarg1, NettestBase jarg1_);
  public final static native void NettestBase_interrupt(long jarg1, NettestBase jarg1_);
  public final static native void NettestBase_onFailureAsnLookup(long jarg1, NettestBase jarg1_, long jarg2, EventFailureAsnLookup jarg2_);
  public final static native void NettestBase_onFailureAsnLookupSwigExplicitNettestBase(long jarg1, NettestBase jarg1_, long jarg2, EventFailureAsnLookup jarg2_);
  public final static native void NettestBase_onFailureCcLookup(long jarg1, NettestBase jarg1_, long jarg2, EventFailureCcLookup jarg2_);
  public final static native void NettestBase_onFailureCcLookupSwigExplicitNettestBase(long jarg1, NettestBase jarg1_, long jarg2, EventFailureCcLookup jarg2_);
  public final static native void NettestBase_onFailureIpLookup(long jarg1, NettestBase jarg1_, long jarg2, EventFailureIpLookup jarg2_);
  public final static native void NettestBase_onFailureIpLookupSwigExplicitNettestBase(long jarg1, NettestBase jarg1_, long jarg2, EventFailureIpLookup jarg2_);
  public final static native void NettestBase_onFailureMeasurement(long jarg1, NettestBase jarg1_, long jarg2, EventFailureMeasurement jarg2_);
  public final static native void NettestBase_onFailureMeasurementSwigExplicitNettestBase(long jarg1, NettestBase jarg1_, long jarg2, EventFailureMeasurement jarg2_);
  public final static native void NettestBase_onFailureMeasurementSubmission(long jarg1, NettestBase jarg1_, long jarg2, EventFailureMeasurementSubmission jarg2_);
  public final static native void NettestBase_onFailureMeasurementSubmissionSwigExplicitNettestBase(long jarg1, NettestBase jarg1_, long jarg2, EventFailureMeasurementSubmission jarg2_);
  public final static native void NettestBase_onFailureReportCreate(long jarg1, NettestBase jarg1_, long jarg2, EventFailureReportCreate jarg2_);
  public final static native void NettestBase_onFailureReportCreateSwigExplicitNettestBase(long jarg1, NettestBase jarg1_, long jarg2, EventFailureReportCreate jarg2_);
  public final static native void NettestBase_onFailureReportClose(long jarg1, NettestBase jarg1_, long jarg2, EventFailureReportClose jarg2_);
  public final static native void NettestBase_onFailureReportCloseSwigExplicitNettestBase(long jarg1, NettestBase jarg1_, long jarg2, EventFailureReportClose jarg2_);
  public final static native void NettestBase_onFailureResolverLookup(long jarg1, NettestBase jarg1_, long jarg2, EventFailureResolverLookup jarg2_);
  public final static native void NettestBase_onFailureResolverLookupSwigExplicitNettestBase(long jarg1, NettestBase jarg1_, long jarg2, EventFailureResolverLookup jarg2_);
  public final static native void NettestBase_onFailureStartup(long jarg1, NettestBase jarg1_, long jarg2, EventFailureStartup jarg2_);
  public final static native void NettestBase_onFailureStartupSwigExplicitNettestBase(long jarg1, NettestBase jarg1_, long jarg2, EventFailureStartup jarg2_);
  public final static native void NettestBase_onLog(long jarg1, NettestBase jarg1_, long jarg2, EventLog jarg2_);
  public final static native void NettestBase_onLogSwigExplicitNettestBase(long jarg1, NettestBase jarg1_, long jarg2, EventLog jarg2_);
  public final static native void NettestBase_onMeasurement(long jarg1, NettestBase jarg1_, long jarg2, EventMeasurement jarg2_);
  public final static native void NettestBase_onMeasurementSwigExplicitNettestBase(long jarg1, NettestBase jarg1_, long jarg2, EventMeasurement jarg2_);
  public final static native void NettestBase_onStatusEnd(long jarg1, NettestBase jarg1_, long jarg2, EventStatusEnd jarg2_);
  public final static native void NettestBase_onStatusEndSwigExplicitNettestBase(long jarg1, NettestBase jarg1_, long jarg2, EventStatusEnd jarg2_);
  public final static native void NettestBase_onStatusGeoipLookup(long jarg1, NettestBase jarg1_, long jarg2, EventStatusGeoipLookup jarg2_);
  public final static native void NettestBase_onStatusGeoipLookupSwigExplicitNettestBase(long jarg1, NettestBase jarg1_, long jarg2, EventStatusGeoipLookup jarg2_);
  public final static native void NettestBase_onStatusProgress(long jarg1, NettestBase jarg1_, long jarg2, EventStatusProgress jarg2_);
  public final static native void NettestBase_onStatusProgressSwigExplicitNettestBase(long jarg1, NettestBase jarg1_, long jarg2, EventStatusProgress jarg2_);
  public final static native void NettestBase_onStatusQueued(long jarg1, NettestBase jarg1_, long jarg2, EventStatusQueued jarg2_);
  public final static native void NettestBase_onStatusQueuedSwigExplicitNettestBase(long jarg1, NettestBase jarg1_, long jarg2, EventStatusQueued jarg2_);
  public final static native void NettestBase_onStatusMeasurementStart(long jarg1, NettestBase jarg1_, long jarg2, EventStatusMeasurementStart jarg2_);
  public final static native void NettestBase_onStatusMeasurementStartSwigExplicitNettestBase(long jarg1, NettestBase jarg1_, long jarg2, EventStatusMeasurementStart jarg2_);
  public final static native void NettestBase_onStatusMeasurementSubmission(long jarg1, NettestBase jarg1_, long jarg2, EventStatusMeasurementSubmission jarg2_);
  public final static native void NettestBase_onStatusMeasurementSubmissionSwigExplicitNettestBase(long jarg1, NettestBase jarg1_, long jarg2, EventStatusMeasurementSubmission jarg2_);
  public final static native void NettestBase_onStatusMeasurementDone(long jarg1, NettestBase jarg1_, long jarg2, EventStatusMeasurementDone jarg2_);
  public final static native void NettestBase_onStatusMeasurementDoneSwigExplicitNettestBase(long jarg1, NettestBase jarg1_, long jarg2, EventStatusMeasurementDone jarg2_);
  public final static native void NettestBase_onStatusReportClose(long jarg1, NettestBase jarg1_, long jarg2, EventStatusReportClose jarg2_);
  public final static native void NettestBase_onStatusReportCloseSwigExplicitNettestBase(long jarg1, NettestBase jarg1_, long jarg2, EventStatusReportClose jarg2_);
  public final static native void NettestBase_onStatusReportCreate(long jarg1, NettestBase jarg1_, long jarg2, EventStatusReportCreate jarg2_);
  public final static native void NettestBase_onStatusReportCreateSwigExplicitNettestBase(long jarg1, NettestBase jarg1_, long jarg2, EventStatusReportCreate jarg2_);
  public final static native void NettestBase_onStatusResolverLookup(long jarg1, NettestBase jarg1_, long jarg2, EventStatusResolverLookup jarg2_);
  public final static native void NettestBase_onStatusResolverLookupSwigExplicitNettestBase(long jarg1, NettestBase jarg1_, long jarg2, EventStatusResolverLookup jarg2_);
  public final static native void NettestBase_onStatusStarted(long jarg1, NettestBase jarg1_, long jarg2, EventStatusStarted jarg2_);
  public final static native void NettestBase_onStatusStartedSwigExplicitNettestBase(long jarg1, NettestBase jarg1_, long jarg2, EventStatusStarted jarg2_);
  public final static native void NettestBase_onTaskTerminated(long jarg1, NettestBase jarg1_, long jarg2, EventTaskTerminated jarg2_);
  public final static native void NettestBase_onTaskTerminatedSwigExplicitNettestBase(long jarg1, NettestBase jarg1_, long jarg2, EventTaskTerminated jarg2_);
  public final static native void NettestBase_director_connect(NettestBase obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void NettestBase_change_ownership(NettestBase obj, long cptr, boolean take_or_release);
  public final static native void delete_NettestBasePerformance(long jarg1);
  public final static native void NettestBasePerformance_onStatusUpdatePerformance(long jarg1, NettestBasePerformance jarg1_, long jarg2, EventStatusUpdatePerformance jarg2_);
  public final static native void NettestBasePerformance_onStatusUpdatePerformanceSwigExplicitNettestBasePerformance(long jarg1, NettestBasePerformance jarg1_, long jarg2, EventStatusUpdatePerformance jarg2_);
  public final static native long new_NettestBasePerformance();
  public final static native void NettestBasePerformance_director_connect(NettestBasePerformance obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void NettestBasePerformance_change_ownership(NettestBasePerformance obj, long cptr, boolean take_or_release);
  public final static native void delete_NettestBaseWebsites(long jarg1);
  public final static native void NettestBaseWebsites_onStatusUpdateWebsites(long jarg1, NettestBaseWebsites jarg1_, long jarg2, EventStatusUpdateWebsites jarg2_);
  public final static native void NettestBaseWebsites_onStatusUpdateWebsitesSwigExplicitNettestBaseWebsites(long jarg1, NettestBaseWebsites jarg1_, long jarg2, EventStatusUpdateWebsites jarg2_);
  public final static native long new_NettestBaseWebsites();
  public final static native void NettestBaseWebsites_director_connect(NettestBaseWebsites obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void NettestBaseWebsites_change_ownership(NettestBaseWebsites obj, long cptr, boolean take_or_release);
  public final static native String SettingsCaptivePortal_name_get();
  public final static native long new_SettingsCaptivePortal();
  public final static native void delete_SettingsCaptivePortal(long jarg1);
  public final static native long new_NettestCaptivePortal(long jarg1, SettingsCaptivePortal jarg1_);
  public final static native void delete_NettestCaptivePortal(long jarg1);
  public final static native boolean NettestCaptivePortal_run(long jarg1, NettestCaptivePortal jarg1_);
  public final static native boolean NettestCaptivePortal_runSwigExplicitNettestCaptivePortal(long jarg1, NettestCaptivePortal jarg1_);
  public final static native void NettestCaptivePortal_director_connect(NettestCaptivePortal obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void NettestCaptivePortal_change_ownership(NettestCaptivePortal obj, long cptr, boolean take_or_release);
  public final static native String SettingsDash_name_get();
  public final static native long new_SettingsDash();
  public final static native void delete_SettingsDash(long jarg1);
  public final static native long new_NettestDash(long jarg1, SettingsDash jarg1_);
  public final static native void delete_NettestDash(long jarg1);
  public final static native boolean NettestDash_run(long jarg1, NettestDash jarg1_);
  public final static native boolean NettestDash_runSwigExplicitNettestDash(long jarg1, NettestDash jarg1_);
  public final static native void NettestDash_director_connect(NettestDash obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void NettestDash_change_ownership(NettestDash obj, long cptr, boolean take_or_release);
  public final static native String SettingsDnsInjection_name_get();
  public final static native long new_SettingsDnsInjection();
  public final static native void delete_SettingsDnsInjection(long jarg1);
  public final static native long new_NettestDnsInjection(long jarg1, SettingsDnsInjection jarg1_);
  public final static native void delete_NettestDnsInjection(long jarg1);
  public final static native boolean NettestDnsInjection_run(long jarg1, NettestDnsInjection jarg1_);
  public final static native boolean NettestDnsInjection_runSwigExplicitNettestDnsInjection(long jarg1, NettestDnsInjection jarg1_);
  public final static native void NettestDnsInjection_director_connect(NettestDnsInjection obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void NettestDnsInjection_change_ownership(NettestDnsInjection obj, long cptr, boolean take_or_release);
  public final static native String SettingsFacebookMessenger_name_get();
  public final static native long new_SettingsFacebookMessenger();
  public final static native void delete_SettingsFacebookMessenger(long jarg1);
  public final static native long new_NettestFacebookMessenger(long jarg1, SettingsFacebookMessenger jarg1_);
  public final static native void delete_NettestFacebookMessenger(long jarg1);
  public final static native boolean NettestFacebookMessenger_run(long jarg1, NettestFacebookMessenger jarg1_);
  public final static native boolean NettestFacebookMessenger_runSwigExplicitNettestFacebookMessenger(long jarg1, NettestFacebookMessenger jarg1_);
  public final static native void NettestFacebookMessenger_director_connect(NettestFacebookMessenger obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void NettestFacebookMessenger_change_ownership(NettestFacebookMessenger obj, long cptr, boolean take_or_release);
  public final static native String SettingsHttpHeaderFieldManipulation_name_get();
  public final static native long new_SettingsHttpHeaderFieldManipulation();
  public final static native void delete_SettingsHttpHeaderFieldManipulation(long jarg1);
  public final static native long new_NettestHttpHeaderFieldManipulation(long jarg1, SettingsHttpHeaderFieldManipulation jarg1_);
  public final static native void delete_NettestHttpHeaderFieldManipulation(long jarg1);
  public final static native boolean NettestHttpHeaderFieldManipulation_run(long jarg1, NettestHttpHeaderFieldManipulation jarg1_);
  public final static native boolean NettestHttpHeaderFieldManipulation_runSwigExplicitNettestHttpHeaderFieldManipulation(long jarg1, NettestHttpHeaderFieldManipulation jarg1_);
  public final static native void NettestHttpHeaderFieldManipulation_director_connect(NettestHttpHeaderFieldManipulation obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void NettestHttpHeaderFieldManipulation_change_ownership(NettestHttpHeaderFieldManipulation obj, long cptr, boolean take_or_release);
  public final static native String SettingsHttpInvalidRequestLine_name_get();
  public final static native long new_SettingsHttpInvalidRequestLine();
  public final static native void delete_SettingsHttpInvalidRequestLine(long jarg1);
  public final static native long new_NettestHttpInvalidRequestLine(long jarg1, SettingsHttpInvalidRequestLine jarg1_);
  public final static native void delete_NettestHttpInvalidRequestLine(long jarg1);
  public final static native boolean NettestHttpInvalidRequestLine_run(long jarg1, NettestHttpInvalidRequestLine jarg1_);
  public final static native boolean NettestHttpInvalidRequestLine_runSwigExplicitNettestHttpInvalidRequestLine(long jarg1, NettestHttpInvalidRequestLine jarg1_);
  public final static native void NettestHttpInvalidRequestLine_director_connect(NettestHttpInvalidRequestLine obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void NettestHttpInvalidRequestLine_change_ownership(NettestHttpInvalidRequestLine obj, long cptr, boolean take_or_release);
  public final static native String SettingsMeekFrontedRequests_name_get();
  public final static native long new_SettingsMeekFrontedRequests();
  public final static native void delete_SettingsMeekFrontedRequests(long jarg1);
  public final static native long new_NettestMeekFrontedRequests(long jarg1, SettingsMeekFrontedRequests jarg1_);
  public final static native void delete_NettestMeekFrontedRequests(long jarg1);
  public final static native boolean NettestMeekFrontedRequests_run(long jarg1, NettestMeekFrontedRequests jarg1_);
  public final static native boolean NettestMeekFrontedRequests_runSwigExplicitNettestMeekFrontedRequests(long jarg1, NettestMeekFrontedRequests jarg1_);
  public final static native void NettestMeekFrontedRequests_director_connect(NettestMeekFrontedRequests obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void NettestMeekFrontedRequests_change_ownership(NettestMeekFrontedRequests obj, long cptr, boolean take_or_release);
  public final static native String SettingsMultiNdt_name_get();
  public final static native long new_SettingsMultiNdt();
  public final static native void delete_SettingsMultiNdt(long jarg1);
  public final static native long new_NettestMultiNdt(long jarg1, SettingsMultiNdt jarg1_);
  public final static native void delete_NettestMultiNdt(long jarg1);
  public final static native boolean NettestMultiNdt_run(long jarg1, NettestMultiNdt jarg1_);
  public final static native boolean NettestMultiNdt_runSwigExplicitNettestMultiNdt(long jarg1, NettestMultiNdt jarg1_);
  public final static native void NettestMultiNdt_director_connect(NettestMultiNdt obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void NettestMultiNdt_change_ownership(NettestMultiNdt obj, long cptr, boolean take_or_release);
  public final static native String SettingsNdt_name_get();
  public final static native long new_SettingsNdt();
  public final static native void delete_SettingsNdt(long jarg1);
  public final static native long new_NettestNdt(long jarg1, SettingsNdt jarg1_);
  public final static native void delete_NettestNdt(long jarg1);
  public final static native boolean NettestNdt_run(long jarg1, NettestNdt jarg1_);
  public final static native boolean NettestNdt_runSwigExplicitNettestNdt(long jarg1, NettestNdt jarg1_);
  public final static native void NettestNdt_director_connect(NettestNdt obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void NettestNdt_change_ownership(NettestNdt obj, long cptr, boolean take_or_release);
  public final static native String SettingsTcpConnect_name_get();
  public final static native long new_SettingsTcpConnect();
  public final static native void delete_SettingsTcpConnect(long jarg1);
  public final static native long new_NettestTcpConnect(long jarg1, SettingsTcpConnect jarg1_);
  public final static native void delete_NettestTcpConnect(long jarg1);
  public final static native boolean NettestTcpConnect_run(long jarg1, NettestTcpConnect jarg1_);
  public final static native boolean NettestTcpConnect_runSwigExplicitNettestTcpConnect(long jarg1, NettestTcpConnect jarg1_);
  public final static native void NettestTcpConnect_director_connect(NettestTcpConnect obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void NettestTcpConnect_change_ownership(NettestTcpConnect obj, long cptr, boolean take_or_release);
  public final static native String SettingsTelegram_name_get();
  public final static native long new_SettingsTelegram();
  public final static native void delete_SettingsTelegram(long jarg1);
  public final static native long new_NettestTelegram(long jarg1, SettingsTelegram jarg1_);
  public final static native void delete_NettestTelegram(long jarg1);
  public final static native boolean NettestTelegram_run(long jarg1, NettestTelegram jarg1_);
  public final static native boolean NettestTelegram_runSwigExplicitNettestTelegram(long jarg1, NettestTelegram jarg1_);
  public final static native void NettestTelegram_director_connect(NettestTelegram obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void NettestTelegram_change_ownership(NettestTelegram obj, long cptr, boolean take_or_release);
  public final static native String SettingsWebConnectivity_name_get();
  public final static native long new_SettingsWebConnectivity();
  public final static native void delete_SettingsWebConnectivity(long jarg1);
  public final static native long new_NettestWebConnectivity(long jarg1, SettingsWebConnectivity jarg1_);
  public final static native void delete_NettestWebConnectivity(long jarg1);
  public final static native boolean NettestWebConnectivity_run(long jarg1, NettestWebConnectivity jarg1_);
  public final static native boolean NettestWebConnectivity_runSwigExplicitNettestWebConnectivity(long jarg1, NettestWebConnectivity jarg1_);
  public final static native void NettestWebConnectivity_director_connect(NettestWebConnectivity obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void NettestWebConnectivity_change_ownership(NettestWebConnectivity obj, long cptr, boolean take_or_release);
  public final static native String SettingsWhatsapp_name_get();
  public final static native void SettingsWhatsapp_allEndpoints_set(long jarg1, SettingsWhatsapp jarg1_, boolean jarg2);
  public final static native boolean SettingsWhatsapp_allEndpoints_get(long jarg1, SettingsWhatsapp jarg1_);
  public final static native long new_SettingsWhatsapp();
  public final static native void delete_SettingsWhatsapp(long jarg1);
  public final static native long new_NettestWhatsapp(long jarg1, SettingsWhatsapp jarg1_);
  public final static native void delete_NettestWhatsapp(long jarg1);
  public final static native boolean NettestWhatsapp_run(long jarg1, NettestWhatsapp jarg1_);
  public final static native boolean NettestWhatsapp_runSwigExplicitNettestWhatsapp(long jarg1, NettestWhatsapp jarg1_);
  public final static native void NettestWhatsapp_director_connect(NettestWhatsapp obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void NettestWhatsapp_change_ownership(NettestWhatsapp obj, long cptr, boolean take_or_release);
  public final static native long SettingsBaseNeedsInput_SWIGUpcast(long jarg1);
  public final static native long NettestBasePerformance_SWIGUpcast(long jarg1);
  public final static native long NettestBaseWebsites_SWIGUpcast(long jarg1);
  public final static native long SettingsCaptivePortal_SWIGUpcast(long jarg1);
  public final static native long NettestCaptivePortal_SWIGUpcast(long jarg1);
  public final static native long SettingsDash_SWIGUpcast(long jarg1);
  public final static native long NettestDash_SWIGUpcast(long jarg1);
  public final static native long SettingsDnsInjection_SWIGUpcast(long jarg1);
  public final static native long NettestDnsInjection_SWIGUpcast(long jarg1);
  public final static native long SettingsFacebookMessenger_SWIGUpcast(long jarg1);
  public final static native long NettestFacebookMessenger_SWIGUpcast(long jarg1);
  public final static native long SettingsHttpHeaderFieldManipulation_SWIGUpcast(long jarg1);
  public final static native long NettestHttpHeaderFieldManipulation_SWIGUpcast(long jarg1);
  public final static native long SettingsHttpInvalidRequestLine_SWIGUpcast(long jarg1);
  public final static native long NettestHttpInvalidRequestLine_SWIGUpcast(long jarg1);
  public final static native long SettingsMeekFrontedRequests_SWIGUpcast(long jarg1);
  public final static native long NettestMeekFrontedRequests_SWIGUpcast(long jarg1);
  public final static native long SettingsMultiNdt_SWIGUpcast(long jarg1);
  public final static native long NettestMultiNdt_SWIGUpcast(long jarg1);
  public final static native long SettingsNdt_SWIGUpcast(long jarg1);
  public final static native long NettestNdt_SWIGUpcast(long jarg1);
  public final static native long SettingsTcpConnect_SWIGUpcast(long jarg1);
  public final static native long NettestTcpConnect_SWIGUpcast(long jarg1);
  public final static native long SettingsTelegram_SWIGUpcast(long jarg1);
  public final static native long NettestTelegram_SWIGUpcast(long jarg1);
  public final static native long SettingsWebConnectivity_SWIGUpcast(long jarg1);
  public final static native long NettestWebConnectivity_SWIGUpcast(long jarg1);
  public final static native long SettingsWhatsapp_SWIGUpcast(long jarg1);
  public final static native long NettestWhatsapp_SWIGUpcast(long jarg1);

  public static boolean SwigDirector_NettestBase_run(NettestBase jself) {
    return jself.run();
  }
  public static void SwigDirector_NettestBase_onFailureAsnLookup(NettestBase jself, long arg0) {
    jself.onFailureAsnLookup(new EventFailureAsnLookup(arg0, true));
  }
  public static void SwigDirector_NettestBase_onFailureCcLookup(NettestBase jself, long arg0) {
    jself.onFailureCcLookup(new EventFailureCcLookup(arg0, true));
  }
  public static void SwigDirector_NettestBase_onFailureIpLookup(NettestBase jself, long arg0) {
    jself.onFailureIpLookup(new EventFailureIpLookup(arg0, true));
  }
  public static void SwigDirector_NettestBase_onFailureMeasurement(NettestBase jself, long arg0) {
    jself.onFailureMeasurement(new EventFailureMeasurement(arg0, true));
  }
  public static void SwigDirector_NettestBase_onFailureMeasurementSubmission(NettestBase jself, long arg0) {
    jself.onFailureMeasurementSubmission(new EventFailureMeasurementSubmission(arg0, true));
  }
  public static void SwigDirector_NettestBase_onFailureReportCreate(NettestBase jself, long arg0) {
    jself.onFailureReportCreate(new EventFailureReportCreate(arg0, true));
  }
  public static void SwigDirector_NettestBase_onFailureReportClose(NettestBase jself, long arg0) {
    jself.onFailureReportClose(new EventFailureReportClose(arg0, true));
  }
  public static void SwigDirector_NettestBase_onFailureResolverLookup(NettestBase jself, long arg0) {
    jself.onFailureResolverLookup(new EventFailureResolverLookup(arg0, true));
  }
  public static void SwigDirector_NettestBase_onFailureStartup(NettestBase jself, long arg0) {
    jself.onFailureStartup(new EventFailureStartup(arg0, true));
  }
  public static void SwigDirector_NettestBase_onLog(NettestBase jself, long arg0) {
    jself.onLog(new EventLog(arg0, true));
  }
  public static void SwigDirector_NettestBase_onMeasurement(NettestBase jself, long arg0) {
    jself.onMeasurement(new EventMeasurement(arg0, true));
  }
  public static void SwigDirector_NettestBase_onStatusEnd(NettestBase jself, long arg0) {
    jself.onStatusEnd(new EventStatusEnd(arg0, true));
  }
  public static void SwigDirector_NettestBase_onStatusGeoipLookup(NettestBase jself, long arg0) {
    jself.onStatusGeoipLookup(new EventStatusGeoipLookup(arg0, true));
  }
  public static void SwigDirector_NettestBase_onStatusProgress(NettestBase jself, long arg0) {
    jself.onStatusProgress(new EventStatusProgress(arg0, true));
  }
  public static void SwigDirector_NettestBase_onStatusQueued(NettestBase jself, long arg0) {
    jself.onStatusQueued(new EventStatusQueued(arg0, true));
  }
  public static void SwigDirector_NettestBase_onStatusMeasurementStart(NettestBase jself, long arg0) {
    jself.onStatusMeasurementStart(new EventStatusMeasurementStart(arg0, true));
  }
  public static void SwigDirector_NettestBase_onStatusMeasurementSubmission(NettestBase jself, long arg0) {
    jself.onStatusMeasurementSubmission(new EventStatusMeasurementSubmission(arg0, true));
  }
  public static void SwigDirector_NettestBase_onStatusMeasurementDone(NettestBase jself, long arg0) {
    jself.onStatusMeasurementDone(new EventStatusMeasurementDone(arg0, true));
  }
  public static void SwigDirector_NettestBase_onStatusReportClose(NettestBase jself, long arg0) {
    jself.onStatusReportClose(new EventStatusReportClose(arg0, true));
  }
  public static void SwigDirector_NettestBase_onStatusReportCreate(NettestBase jself, long arg0) {
    jself.onStatusReportCreate(new EventStatusReportCreate(arg0, true));
  }
  public static void SwigDirector_NettestBase_onStatusResolverLookup(NettestBase jself, long arg0) {
    jself.onStatusResolverLookup(new EventStatusResolverLookup(arg0, true));
  }
  public static void SwigDirector_NettestBase_onStatusStarted(NettestBase jself, long arg0) {
    jself.onStatusStarted(new EventStatusStarted(arg0, true));
  }
  public static void SwigDirector_NettestBase_onTaskTerminated(NettestBase jself, long arg0) {
    jself.onTaskTerminated(new EventTaskTerminated(arg0, true));
  }
  public static boolean SwigDirector_NettestBasePerformance_run(NettestBasePerformance jself) {
    return jself.run();
  }
  public static void SwigDirector_NettestBasePerformance_onFailureAsnLookup(NettestBasePerformance jself, long arg0) {
    jself.onFailureAsnLookup(new EventFailureAsnLookup(arg0, true));
  }
  public static void SwigDirector_NettestBasePerformance_onFailureCcLookup(NettestBasePerformance jself, long arg0) {
    jself.onFailureCcLookup(new EventFailureCcLookup(arg0, true));
  }
  public static void SwigDirector_NettestBasePerformance_onFailureIpLookup(NettestBasePerformance jself, long arg0) {
    jself.onFailureIpLookup(new EventFailureIpLookup(arg0, true));
  }
  public static void SwigDirector_NettestBasePerformance_onFailureMeasurement(NettestBasePerformance jself, long arg0) {
    jself.onFailureMeasurement(new EventFailureMeasurement(arg0, true));
  }
  public static void SwigDirector_NettestBasePerformance_onFailureMeasurementSubmission(NettestBasePerformance jself, long arg0) {
    jself.onFailureMeasurementSubmission(new EventFailureMeasurementSubmission(arg0, true));
  }
  public static void SwigDirector_NettestBasePerformance_onFailureReportCreate(NettestBasePerformance jself, long arg0) {
    jself.onFailureReportCreate(new EventFailureReportCreate(arg0, true));
  }
  public static void SwigDirector_NettestBasePerformance_onFailureReportClose(NettestBasePerformance jself, long arg0) {
    jself.onFailureReportClose(new EventFailureReportClose(arg0, true));
  }
  public static void SwigDirector_NettestBasePerformance_onFailureResolverLookup(NettestBasePerformance jself, long arg0) {
    jself.onFailureResolverLookup(new EventFailureResolverLookup(arg0, true));
  }
  public static void SwigDirector_NettestBasePerformance_onFailureStartup(NettestBasePerformance jself, long arg0) {
    jself.onFailureStartup(new EventFailureStartup(arg0, true));
  }
  public static void SwigDirector_NettestBasePerformance_onLog(NettestBasePerformance jself, long arg0) {
    jself.onLog(new EventLog(arg0, true));
  }
  public static void SwigDirector_NettestBasePerformance_onMeasurement(NettestBasePerformance jself, long arg0) {
    jself.onMeasurement(new EventMeasurement(arg0, true));
  }
  public static void SwigDirector_NettestBasePerformance_onStatusEnd(NettestBasePerformance jself, long arg0) {
    jself.onStatusEnd(new EventStatusEnd(arg0, true));
  }
  public static void SwigDirector_NettestBasePerformance_onStatusGeoipLookup(NettestBasePerformance jself, long arg0) {
    jself.onStatusGeoipLookup(new EventStatusGeoipLookup(arg0, true));
  }
  public static void SwigDirector_NettestBasePerformance_onStatusProgress(NettestBasePerformance jself, long arg0) {
    jself.onStatusProgress(new EventStatusProgress(arg0, true));
  }
  public static void SwigDirector_NettestBasePerformance_onStatusQueued(NettestBasePerformance jself, long arg0) {
    jself.onStatusQueued(new EventStatusQueued(arg0, true));
  }
  public static void SwigDirector_NettestBasePerformance_onStatusMeasurementStart(NettestBasePerformance jself, long arg0) {
    jself.onStatusMeasurementStart(new EventStatusMeasurementStart(arg0, true));
  }
  public static void SwigDirector_NettestBasePerformance_onStatusMeasurementSubmission(NettestBasePerformance jself, long arg0) {
    jself.onStatusMeasurementSubmission(new EventStatusMeasurementSubmission(arg0, true));
  }
  public static void SwigDirector_NettestBasePerformance_onStatusMeasurementDone(NettestBasePerformance jself, long arg0) {
    jself.onStatusMeasurementDone(new EventStatusMeasurementDone(arg0, true));
  }
  public static void SwigDirector_NettestBasePerformance_onStatusReportClose(NettestBasePerformance jself, long arg0) {
    jself.onStatusReportClose(new EventStatusReportClose(arg0, true));
  }
  public static void SwigDirector_NettestBasePerformance_onStatusReportCreate(NettestBasePerformance jself, long arg0) {
    jself.onStatusReportCreate(new EventStatusReportCreate(arg0, true));
  }
  public static void SwigDirector_NettestBasePerformance_onStatusResolverLookup(NettestBasePerformance jself, long arg0) {
    jself.onStatusResolverLookup(new EventStatusResolverLookup(arg0, true));
  }
  public static void SwigDirector_NettestBasePerformance_onStatusStarted(NettestBasePerformance jself, long arg0) {
    jself.onStatusStarted(new EventStatusStarted(arg0, true));
  }
  public static void SwigDirector_NettestBasePerformance_onTaskTerminated(NettestBasePerformance jself, long arg0) {
    jself.onTaskTerminated(new EventTaskTerminated(arg0, true));
  }
  public static void SwigDirector_NettestBasePerformance_onStatusUpdatePerformance(NettestBasePerformance jself, long arg0) {
    jself.onStatusUpdatePerformance(new EventStatusUpdatePerformance(arg0, true));
  }
  public static boolean SwigDirector_NettestBaseWebsites_run(NettestBaseWebsites jself) {
    return jself.run();
  }
  public static void SwigDirector_NettestBaseWebsites_onFailureAsnLookup(NettestBaseWebsites jself, long arg0) {
    jself.onFailureAsnLookup(new EventFailureAsnLookup(arg0, true));
  }
  public static void SwigDirector_NettestBaseWebsites_onFailureCcLookup(NettestBaseWebsites jself, long arg0) {
    jself.onFailureCcLookup(new EventFailureCcLookup(arg0, true));
  }
  public static void SwigDirector_NettestBaseWebsites_onFailureIpLookup(NettestBaseWebsites jself, long arg0) {
    jself.onFailureIpLookup(new EventFailureIpLookup(arg0, true));
  }
  public static void SwigDirector_NettestBaseWebsites_onFailureMeasurement(NettestBaseWebsites jself, long arg0) {
    jself.onFailureMeasurement(new EventFailureMeasurement(arg0, true));
  }
  public static void SwigDirector_NettestBaseWebsites_onFailureMeasurementSubmission(NettestBaseWebsites jself, long arg0) {
    jself.onFailureMeasurementSubmission(new EventFailureMeasurementSubmission(arg0, true));
  }
  public static void SwigDirector_NettestBaseWebsites_onFailureReportCreate(NettestBaseWebsites jself, long arg0) {
    jself.onFailureReportCreate(new EventFailureReportCreate(arg0, true));
  }
  public static void SwigDirector_NettestBaseWebsites_onFailureReportClose(NettestBaseWebsites jself, long arg0) {
    jself.onFailureReportClose(new EventFailureReportClose(arg0, true));
  }
  public static void SwigDirector_NettestBaseWebsites_onFailureResolverLookup(NettestBaseWebsites jself, long arg0) {
    jself.onFailureResolverLookup(new EventFailureResolverLookup(arg0, true));
  }
  public static void SwigDirector_NettestBaseWebsites_onFailureStartup(NettestBaseWebsites jself, long arg0) {
    jself.onFailureStartup(new EventFailureStartup(arg0, true));
  }
  public static void SwigDirector_NettestBaseWebsites_onLog(NettestBaseWebsites jself, long arg0) {
    jself.onLog(new EventLog(arg0, true));
  }
  public static void SwigDirector_NettestBaseWebsites_onMeasurement(NettestBaseWebsites jself, long arg0) {
    jself.onMeasurement(new EventMeasurement(arg0, true));
  }
  public static void SwigDirector_NettestBaseWebsites_onStatusEnd(NettestBaseWebsites jself, long arg0) {
    jself.onStatusEnd(new EventStatusEnd(arg0, true));
  }
  public static void SwigDirector_NettestBaseWebsites_onStatusGeoipLookup(NettestBaseWebsites jself, long arg0) {
    jself.onStatusGeoipLookup(new EventStatusGeoipLookup(arg0, true));
  }
  public static void SwigDirector_NettestBaseWebsites_onStatusProgress(NettestBaseWebsites jself, long arg0) {
    jself.onStatusProgress(new EventStatusProgress(arg0, true));
  }
  public static void SwigDirector_NettestBaseWebsites_onStatusQueued(NettestBaseWebsites jself, long arg0) {
    jself.onStatusQueued(new EventStatusQueued(arg0, true));
  }
  public static void SwigDirector_NettestBaseWebsites_onStatusMeasurementStart(NettestBaseWebsites jself, long arg0) {
    jself.onStatusMeasurementStart(new EventStatusMeasurementStart(arg0, true));
  }
  public static void SwigDirector_NettestBaseWebsites_onStatusMeasurementSubmission(NettestBaseWebsites jself, long arg0) {
    jself.onStatusMeasurementSubmission(new EventStatusMeasurementSubmission(arg0, true));
  }
  public static void SwigDirector_NettestBaseWebsites_onStatusMeasurementDone(NettestBaseWebsites jself, long arg0) {
    jself.onStatusMeasurementDone(new EventStatusMeasurementDone(arg0, true));
  }
  public static void SwigDirector_NettestBaseWebsites_onStatusReportClose(NettestBaseWebsites jself, long arg0) {
    jself.onStatusReportClose(new EventStatusReportClose(arg0, true));
  }
  public static void SwigDirector_NettestBaseWebsites_onStatusReportCreate(NettestBaseWebsites jself, long arg0) {
    jself.onStatusReportCreate(new EventStatusReportCreate(arg0, true));
  }
  public static void SwigDirector_NettestBaseWebsites_onStatusResolverLookup(NettestBaseWebsites jself, long arg0) {
    jself.onStatusResolverLookup(new EventStatusResolverLookup(arg0, true));
  }
  public static void SwigDirector_NettestBaseWebsites_onStatusStarted(NettestBaseWebsites jself, long arg0) {
    jself.onStatusStarted(new EventStatusStarted(arg0, true));
  }
  public static void SwigDirector_NettestBaseWebsites_onTaskTerminated(NettestBaseWebsites jself, long arg0) {
    jself.onTaskTerminated(new EventTaskTerminated(arg0, true));
  }
  public static void SwigDirector_NettestBaseWebsites_onStatusUpdateWebsites(NettestBaseWebsites jself, long arg0) {
    jself.onStatusUpdateWebsites(new EventStatusUpdateWebsites(arg0, true));
  }
  public static boolean SwigDirector_NettestCaptivePortal_run(NettestCaptivePortal jself) {
    return jself.run();
  }
  public static void SwigDirector_NettestCaptivePortal_onFailureAsnLookup(NettestCaptivePortal jself, long arg0) {
    jself.onFailureAsnLookup(new EventFailureAsnLookup(arg0, true));
  }
  public static void SwigDirector_NettestCaptivePortal_onFailureCcLookup(NettestCaptivePortal jself, long arg0) {
    jself.onFailureCcLookup(new EventFailureCcLookup(arg0, true));
  }
  public static void SwigDirector_NettestCaptivePortal_onFailureIpLookup(NettestCaptivePortal jself, long arg0) {
    jself.onFailureIpLookup(new EventFailureIpLookup(arg0, true));
  }
  public static void SwigDirector_NettestCaptivePortal_onFailureMeasurement(NettestCaptivePortal jself, long arg0) {
    jself.onFailureMeasurement(new EventFailureMeasurement(arg0, true));
  }
  public static void SwigDirector_NettestCaptivePortal_onFailureMeasurementSubmission(NettestCaptivePortal jself, long arg0) {
    jself.onFailureMeasurementSubmission(new EventFailureMeasurementSubmission(arg0, true));
  }
  public static void SwigDirector_NettestCaptivePortal_onFailureReportCreate(NettestCaptivePortal jself, long arg0) {
    jself.onFailureReportCreate(new EventFailureReportCreate(arg0, true));
  }
  public static void SwigDirector_NettestCaptivePortal_onFailureReportClose(NettestCaptivePortal jself, long arg0) {
    jself.onFailureReportClose(new EventFailureReportClose(arg0, true));
  }
  public static void SwigDirector_NettestCaptivePortal_onFailureResolverLookup(NettestCaptivePortal jself, long arg0) {
    jself.onFailureResolverLookup(new EventFailureResolverLookup(arg0, true));
  }
  public static void SwigDirector_NettestCaptivePortal_onFailureStartup(NettestCaptivePortal jself, long arg0) {
    jself.onFailureStartup(new EventFailureStartup(arg0, true));
  }
  public static void SwigDirector_NettestCaptivePortal_onLog(NettestCaptivePortal jself, long arg0) {
    jself.onLog(new EventLog(arg0, true));
  }
  public static void SwigDirector_NettestCaptivePortal_onMeasurement(NettestCaptivePortal jself, long arg0) {
    jself.onMeasurement(new EventMeasurement(arg0, true));
  }
  public static void SwigDirector_NettestCaptivePortal_onStatusEnd(NettestCaptivePortal jself, long arg0) {
    jself.onStatusEnd(new EventStatusEnd(arg0, true));
  }
  public static void SwigDirector_NettestCaptivePortal_onStatusGeoipLookup(NettestCaptivePortal jself, long arg0) {
    jself.onStatusGeoipLookup(new EventStatusGeoipLookup(arg0, true));
  }
  public static void SwigDirector_NettestCaptivePortal_onStatusProgress(NettestCaptivePortal jself, long arg0) {
    jself.onStatusProgress(new EventStatusProgress(arg0, true));
  }
  public static void SwigDirector_NettestCaptivePortal_onStatusQueued(NettestCaptivePortal jself, long arg0) {
    jself.onStatusQueued(new EventStatusQueued(arg0, true));
  }
  public static void SwigDirector_NettestCaptivePortal_onStatusMeasurementStart(NettestCaptivePortal jself, long arg0) {
    jself.onStatusMeasurementStart(new EventStatusMeasurementStart(arg0, true));
  }
  public static void SwigDirector_NettestCaptivePortal_onStatusMeasurementSubmission(NettestCaptivePortal jself, long arg0) {
    jself.onStatusMeasurementSubmission(new EventStatusMeasurementSubmission(arg0, true));
  }
  public static void SwigDirector_NettestCaptivePortal_onStatusMeasurementDone(NettestCaptivePortal jself, long arg0) {
    jself.onStatusMeasurementDone(new EventStatusMeasurementDone(arg0, true));
  }
  public static void SwigDirector_NettestCaptivePortal_onStatusReportClose(NettestCaptivePortal jself, long arg0) {
    jself.onStatusReportClose(new EventStatusReportClose(arg0, true));
  }
  public static void SwigDirector_NettestCaptivePortal_onStatusReportCreate(NettestCaptivePortal jself, long arg0) {
    jself.onStatusReportCreate(new EventStatusReportCreate(arg0, true));
  }
  public static void SwigDirector_NettestCaptivePortal_onStatusResolverLookup(NettestCaptivePortal jself, long arg0) {
    jself.onStatusResolverLookup(new EventStatusResolverLookup(arg0, true));
  }
  public static void SwigDirector_NettestCaptivePortal_onStatusStarted(NettestCaptivePortal jself, long arg0) {
    jself.onStatusStarted(new EventStatusStarted(arg0, true));
  }
  public static void SwigDirector_NettestCaptivePortal_onTaskTerminated(NettestCaptivePortal jself, long arg0) {
    jself.onTaskTerminated(new EventTaskTerminated(arg0, true));
  }
  public static boolean SwigDirector_NettestDash_run(NettestDash jself) {
    return jself.run();
  }
  public static void SwigDirector_NettestDash_onFailureAsnLookup(NettestDash jself, long arg0) {
    jself.onFailureAsnLookup(new EventFailureAsnLookup(arg0, true));
  }
  public static void SwigDirector_NettestDash_onFailureCcLookup(NettestDash jself, long arg0) {
    jself.onFailureCcLookup(new EventFailureCcLookup(arg0, true));
  }
  public static void SwigDirector_NettestDash_onFailureIpLookup(NettestDash jself, long arg0) {
    jself.onFailureIpLookup(new EventFailureIpLookup(arg0, true));
  }
  public static void SwigDirector_NettestDash_onFailureMeasurement(NettestDash jself, long arg0) {
    jself.onFailureMeasurement(new EventFailureMeasurement(arg0, true));
  }
  public static void SwigDirector_NettestDash_onFailureMeasurementSubmission(NettestDash jself, long arg0) {
    jself.onFailureMeasurementSubmission(new EventFailureMeasurementSubmission(arg0, true));
  }
  public static void SwigDirector_NettestDash_onFailureReportCreate(NettestDash jself, long arg0) {
    jself.onFailureReportCreate(new EventFailureReportCreate(arg0, true));
  }
  public static void SwigDirector_NettestDash_onFailureReportClose(NettestDash jself, long arg0) {
    jself.onFailureReportClose(new EventFailureReportClose(arg0, true));
  }
  public static void SwigDirector_NettestDash_onFailureResolverLookup(NettestDash jself, long arg0) {
    jself.onFailureResolverLookup(new EventFailureResolverLookup(arg0, true));
  }
  public static void SwigDirector_NettestDash_onFailureStartup(NettestDash jself, long arg0) {
    jself.onFailureStartup(new EventFailureStartup(arg0, true));
  }
  public static void SwigDirector_NettestDash_onLog(NettestDash jself, long arg0) {
    jself.onLog(new EventLog(arg0, true));
  }
  public static void SwigDirector_NettestDash_onMeasurement(NettestDash jself, long arg0) {
    jself.onMeasurement(new EventMeasurement(arg0, true));
  }
  public static void SwigDirector_NettestDash_onStatusEnd(NettestDash jself, long arg0) {
    jself.onStatusEnd(new EventStatusEnd(arg0, true));
  }
  public static void SwigDirector_NettestDash_onStatusGeoipLookup(NettestDash jself, long arg0) {
    jself.onStatusGeoipLookup(new EventStatusGeoipLookup(arg0, true));
  }
  public static void SwigDirector_NettestDash_onStatusProgress(NettestDash jself, long arg0) {
    jself.onStatusProgress(new EventStatusProgress(arg0, true));
  }
  public static void SwigDirector_NettestDash_onStatusQueued(NettestDash jself, long arg0) {
    jself.onStatusQueued(new EventStatusQueued(arg0, true));
  }
  public static void SwigDirector_NettestDash_onStatusMeasurementStart(NettestDash jself, long arg0) {
    jself.onStatusMeasurementStart(new EventStatusMeasurementStart(arg0, true));
  }
  public static void SwigDirector_NettestDash_onStatusMeasurementSubmission(NettestDash jself, long arg0) {
    jself.onStatusMeasurementSubmission(new EventStatusMeasurementSubmission(arg0, true));
  }
  public static void SwigDirector_NettestDash_onStatusMeasurementDone(NettestDash jself, long arg0) {
    jself.onStatusMeasurementDone(new EventStatusMeasurementDone(arg0, true));
  }
  public static void SwigDirector_NettestDash_onStatusReportClose(NettestDash jself, long arg0) {
    jself.onStatusReportClose(new EventStatusReportClose(arg0, true));
  }
  public static void SwigDirector_NettestDash_onStatusReportCreate(NettestDash jself, long arg0) {
    jself.onStatusReportCreate(new EventStatusReportCreate(arg0, true));
  }
  public static void SwigDirector_NettestDash_onStatusResolverLookup(NettestDash jself, long arg0) {
    jself.onStatusResolverLookup(new EventStatusResolverLookup(arg0, true));
  }
  public static void SwigDirector_NettestDash_onStatusStarted(NettestDash jself, long arg0) {
    jself.onStatusStarted(new EventStatusStarted(arg0, true));
  }
  public static void SwigDirector_NettestDash_onTaskTerminated(NettestDash jself, long arg0) {
    jself.onTaskTerminated(new EventTaskTerminated(arg0, true));
  }
  public static void SwigDirector_NettestDash_onStatusUpdatePerformance(NettestDash jself, long arg0) {
    jself.onStatusUpdatePerformance(new EventStatusUpdatePerformance(arg0, true));
  }
  public static boolean SwigDirector_NettestDnsInjection_run(NettestDnsInjection jself) {
    return jself.run();
  }
  public static void SwigDirector_NettestDnsInjection_onFailureAsnLookup(NettestDnsInjection jself, long arg0) {
    jself.onFailureAsnLookup(new EventFailureAsnLookup(arg0, true));
  }
  public static void SwigDirector_NettestDnsInjection_onFailureCcLookup(NettestDnsInjection jself, long arg0) {
    jself.onFailureCcLookup(new EventFailureCcLookup(arg0, true));
  }
  public static void SwigDirector_NettestDnsInjection_onFailureIpLookup(NettestDnsInjection jself, long arg0) {
    jself.onFailureIpLookup(new EventFailureIpLookup(arg0, true));
  }
  public static void SwigDirector_NettestDnsInjection_onFailureMeasurement(NettestDnsInjection jself, long arg0) {
    jself.onFailureMeasurement(new EventFailureMeasurement(arg0, true));
  }
  public static void SwigDirector_NettestDnsInjection_onFailureMeasurementSubmission(NettestDnsInjection jself, long arg0) {
    jself.onFailureMeasurementSubmission(new EventFailureMeasurementSubmission(arg0, true));
  }
  public static void SwigDirector_NettestDnsInjection_onFailureReportCreate(NettestDnsInjection jself, long arg0) {
    jself.onFailureReportCreate(new EventFailureReportCreate(arg0, true));
  }
  public static void SwigDirector_NettestDnsInjection_onFailureReportClose(NettestDnsInjection jself, long arg0) {
    jself.onFailureReportClose(new EventFailureReportClose(arg0, true));
  }
  public static void SwigDirector_NettestDnsInjection_onFailureResolverLookup(NettestDnsInjection jself, long arg0) {
    jself.onFailureResolverLookup(new EventFailureResolverLookup(arg0, true));
  }
  public static void SwigDirector_NettestDnsInjection_onFailureStartup(NettestDnsInjection jself, long arg0) {
    jself.onFailureStartup(new EventFailureStartup(arg0, true));
  }
  public static void SwigDirector_NettestDnsInjection_onLog(NettestDnsInjection jself, long arg0) {
    jself.onLog(new EventLog(arg0, true));
  }
  public static void SwigDirector_NettestDnsInjection_onMeasurement(NettestDnsInjection jself, long arg0) {
    jself.onMeasurement(new EventMeasurement(arg0, true));
  }
  public static void SwigDirector_NettestDnsInjection_onStatusEnd(NettestDnsInjection jself, long arg0) {
    jself.onStatusEnd(new EventStatusEnd(arg0, true));
  }
  public static void SwigDirector_NettestDnsInjection_onStatusGeoipLookup(NettestDnsInjection jself, long arg0) {
    jself.onStatusGeoipLookup(new EventStatusGeoipLookup(arg0, true));
  }
  public static void SwigDirector_NettestDnsInjection_onStatusProgress(NettestDnsInjection jself, long arg0) {
    jself.onStatusProgress(new EventStatusProgress(arg0, true));
  }
  public static void SwigDirector_NettestDnsInjection_onStatusQueued(NettestDnsInjection jself, long arg0) {
    jself.onStatusQueued(new EventStatusQueued(arg0, true));
  }
  public static void SwigDirector_NettestDnsInjection_onStatusMeasurementStart(NettestDnsInjection jself, long arg0) {
    jself.onStatusMeasurementStart(new EventStatusMeasurementStart(arg0, true));
  }
  public static void SwigDirector_NettestDnsInjection_onStatusMeasurementSubmission(NettestDnsInjection jself, long arg0) {
    jself.onStatusMeasurementSubmission(new EventStatusMeasurementSubmission(arg0, true));
  }
  public static void SwigDirector_NettestDnsInjection_onStatusMeasurementDone(NettestDnsInjection jself, long arg0) {
    jself.onStatusMeasurementDone(new EventStatusMeasurementDone(arg0, true));
  }
  public static void SwigDirector_NettestDnsInjection_onStatusReportClose(NettestDnsInjection jself, long arg0) {
    jself.onStatusReportClose(new EventStatusReportClose(arg0, true));
  }
  public static void SwigDirector_NettestDnsInjection_onStatusReportCreate(NettestDnsInjection jself, long arg0) {
    jself.onStatusReportCreate(new EventStatusReportCreate(arg0, true));
  }
  public static void SwigDirector_NettestDnsInjection_onStatusResolverLookup(NettestDnsInjection jself, long arg0) {
    jself.onStatusResolverLookup(new EventStatusResolverLookup(arg0, true));
  }
  public static void SwigDirector_NettestDnsInjection_onStatusStarted(NettestDnsInjection jself, long arg0) {
    jself.onStatusStarted(new EventStatusStarted(arg0, true));
  }
  public static void SwigDirector_NettestDnsInjection_onTaskTerminated(NettestDnsInjection jself, long arg0) {
    jself.onTaskTerminated(new EventTaskTerminated(arg0, true));
  }
  public static boolean SwigDirector_NettestFacebookMessenger_run(NettestFacebookMessenger jself) {
    return jself.run();
  }
  public static void SwigDirector_NettestFacebookMessenger_onFailureAsnLookup(NettestFacebookMessenger jself, long arg0) {
    jself.onFailureAsnLookup(new EventFailureAsnLookup(arg0, true));
  }
  public static void SwigDirector_NettestFacebookMessenger_onFailureCcLookup(NettestFacebookMessenger jself, long arg0) {
    jself.onFailureCcLookup(new EventFailureCcLookup(arg0, true));
  }
  public static void SwigDirector_NettestFacebookMessenger_onFailureIpLookup(NettestFacebookMessenger jself, long arg0) {
    jself.onFailureIpLookup(new EventFailureIpLookup(arg0, true));
  }
  public static void SwigDirector_NettestFacebookMessenger_onFailureMeasurement(NettestFacebookMessenger jself, long arg0) {
    jself.onFailureMeasurement(new EventFailureMeasurement(arg0, true));
  }
  public static void SwigDirector_NettestFacebookMessenger_onFailureMeasurementSubmission(NettestFacebookMessenger jself, long arg0) {
    jself.onFailureMeasurementSubmission(new EventFailureMeasurementSubmission(arg0, true));
  }
  public static void SwigDirector_NettestFacebookMessenger_onFailureReportCreate(NettestFacebookMessenger jself, long arg0) {
    jself.onFailureReportCreate(new EventFailureReportCreate(arg0, true));
  }
  public static void SwigDirector_NettestFacebookMessenger_onFailureReportClose(NettestFacebookMessenger jself, long arg0) {
    jself.onFailureReportClose(new EventFailureReportClose(arg0, true));
  }
  public static void SwigDirector_NettestFacebookMessenger_onFailureResolverLookup(NettestFacebookMessenger jself, long arg0) {
    jself.onFailureResolverLookup(new EventFailureResolverLookup(arg0, true));
  }
  public static void SwigDirector_NettestFacebookMessenger_onFailureStartup(NettestFacebookMessenger jself, long arg0) {
    jself.onFailureStartup(new EventFailureStartup(arg0, true));
  }
  public static void SwigDirector_NettestFacebookMessenger_onLog(NettestFacebookMessenger jself, long arg0) {
    jself.onLog(new EventLog(arg0, true));
  }
  public static void SwigDirector_NettestFacebookMessenger_onMeasurement(NettestFacebookMessenger jself, long arg0) {
    jself.onMeasurement(new EventMeasurement(arg0, true));
  }
  public static void SwigDirector_NettestFacebookMessenger_onStatusEnd(NettestFacebookMessenger jself, long arg0) {
    jself.onStatusEnd(new EventStatusEnd(arg0, true));
  }
  public static void SwigDirector_NettestFacebookMessenger_onStatusGeoipLookup(NettestFacebookMessenger jself, long arg0) {
    jself.onStatusGeoipLookup(new EventStatusGeoipLookup(arg0, true));
  }
  public static void SwigDirector_NettestFacebookMessenger_onStatusProgress(NettestFacebookMessenger jself, long arg0) {
    jself.onStatusProgress(new EventStatusProgress(arg0, true));
  }
  public static void SwigDirector_NettestFacebookMessenger_onStatusQueued(NettestFacebookMessenger jself, long arg0) {
    jself.onStatusQueued(new EventStatusQueued(arg0, true));
  }
  public static void SwigDirector_NettestFacebookMessenger_onStatusMeasurementStart(NettestFacebookMessenger jself, long arg0) {
    jself.onStatusMeasurementStart(new EventStatusMeasurementStart(arg0, true));
  }
  public static void SwigDirector_NettestFacebookMessenger_onStatusMeasurementSubmission(NettestFacebookMessenger jself, long arg0) {
    jself.onStatusMeasurementSubmission(new EventStatusMeasurementSubmission(arg0, true));
  }
  public static void SwigDirector_NettestFacebookMessenger_onStatusMeasurementDone(NettestFacebookMessenger jself, long arg0) {
    jself.onStatusMeasurementDone(new EventStatusMeasurementDone(arg0, true));
  }
  public static void SwigDirector_NettestFacebookMessenger_onStatusReportClose(NettestFacebookMessenger jself, long arg0) {
    jself.onStatusReportClose(new EventStatusReportClose(arg0, true));
  }
  public static void SwigDirector_NettestFacebookMessenger_onStatusReportCreate(NettestFacebookMessenger jself, long arg0) {
    jself.onStatusReportCreate(new EventStatusReportCreate(arg0, true));
  }
  public static void SwigDirector_NettestFacebookMessenger_onStatusResolverLookup(NettestFacebookMessenger jself, long arg0) {
    jself.onStatusResolverLookup(new EventStatusResolverLookup(arg0, true));
  }
  public static void SwigDirector_NettestFacebookMessenger_onStatusStarted(NettestFacebookMessenger jself, long arg0) {
    jself.onStatusStarted(new EventStatusStarted(arg0, true));
  }
  public static void SwigDirector_NettestFacebookMessenger_onTaskTerminated(NettestFacebookMessenger jself, long arg0) {
    jself.onTaskTerminated(new EventTaskTerminated(arg0, true));
  }
  public static boolean SwigDirector_NettestHttpHeaderFieldManipulation_run(NettestHttpHeaderFieldManipulation jself) {
    return jself.run();
  }
  public static void SwigDirector_NettestHttpHeaderFieldManipulation_onFailureAsnLookup(NettestHttpHeaderFieldManipulation jself, long arg0) {
    jself.onFailureAsnLookup(new EventFailureAsnLookup(arg0, true));
  }
  public static void SwigDirector_NettestHttpHeaderFieldManipulation_onFailureCcLookup(NettestHttpHeaderFieldManipulation jself, long arg0) {
    jself.onFailureCcLookup(new EventFailureCcLookup(arg0, true));
  }
  public static void SwigDirector_NettestHttpHeaderFieldManipulation_onFailureIpLookup(NettestHttpHeaderFieldManipulation jself, long arg0) {
    jself.onFailureIpLookup(new EventFailureIpLookup(arg0, true));
  }
  public static void SwigDirector_NettestHttpHeaderFieldManipulation_onFailureMeasurement(NettestHttpHeaderFieldManipulation jself, long arg0) {
    jself.onFailureMeasurement(new EventFailureMeasurement(arg0, true));
  }
  public static void SwigDirector_NettestHttpHeaderFieldManipulation_onFailureMeasurementSubmission(NettestHttpHeaderFieldManipulation jself, long arg0) {
    jself.onFailureMeasurementSubmission(new EventFailureMeasurementSubmission(arg0, true));
  }
  public static void SwigDirector_NettestHttpHeaderFieldManipulation_onFailureReportCreate(NettestHttpHeaderFieldManipulation jself, long arg0) {
    jself.onFailureReportCreate(new EventFailureReportCreate(arg0, true));
  }
  public static void SwigDirector_NettestHttpHeaderFieldManipulation_onFailureReportClose(NettestHttpHeaderFieldManipulation jself, long arg0) {
    jself.onFailureReportClose(new EventFailureReportClose(arg0, true));
  }
  public static void SwigDirector_NettestHttpHeaderFieldManipulation_onFailureResolverLookup(NettestHttpHeaderFieldManipulation jself, long arg0) {
    jself.onFailureResolverLookup(new EventFailureResolverLookup(arg0, true));
  }
  public static void SwigDirector_NettestHttpHeaderFieldManipulation_onFailureStartup(NettestHttpHeaderFieldManipulation jself, long arg0) {
    jself.onFailureStartup(new EventFailureStartup(arg0, true));
  }
  public static void SwigDirector_NettestHttpHeaderFieldManipulation_onLog(NettestHttpHeaderFieldManipulation jself, long arg0) {
    jself.onLog(new EventLog(arg0, true));
  }
  public static void SwigDirector_NettestHttpHeaderFieldManipulation_onMeasurement(NettestHttpHeaderFieldManipulation jself, long arg0) {
    jself.onMeasurement(new EventMeasurement(arg0, true));
  }
  public static void SwigDirector_NettestHttpHeaderFieldManipulation_onStatusEnd(NettestHttpHeaderFieldManipulation jself, long arg0) {
    jself.onStatusEnd(new EventStatusEnd(arg0, true));
  }
  public static void SwigDirector_NettestHttpHeaderFieldManipulation_onStatusGeoipLookup(NettestHttpHeaderFieldManipulation jself, long arg0) {
    jself.onStatusGeoipLookup(new EventStatusGeoipLookup(arg0, true));
  }
  public static void SwigDirector_NettestHttpHeaderFieldManipulation_onStatusProgress(NettestHttpHeaderFieldManipulation jself, long arg0) {
    jself.onStatusProgress(new EventStatusProgress(arg0, true));
  }
  public static void SwigDirector_NettestHttpHeaderFieldManipulation_onStatusQueued(NettestHttpHeaderFieldManipulation jself, long arg0) {
    jself.onStatusQueued(new EventStatusQueued(arg0, true));
  }
  public static void SwigDirector_NettestHttpHeaderFieldManipulation_onStatusMeasurementStart(NettestHttpHeaderFieldManipulation jself, long arg0) {
    jself.onStatusMeasurementStart(new EventStatusMeasurementStart(arg0, true));
  }
  public static void SwigDirector_NettestHttpHeaderFieldManipulation_onStatusMeasurementSubmission(NettestHttpHeaderFieldManipulation jself, long arg0) {
    jself.onStatusMeasurementSubmission(new EventStatusMeasurementSubmission(arg0, true));
  }
  public static void SwigDirector_NettestHttpHeaderFieldManipulation_onStatusMeasurementDone(NettestHttpHeaderFieldManipulation jself, long arg0) {
    jself.onStatusMeasurementDone(new EventStatusMeasurementDone(arg0, true));
  }
  public static void SwigDirector_NettestHttpHeaderFieldManipulation_onStatusReportClose(NettestHttpHeaderFieldManipulation jself, long arg0) {
    jself.onStatusReportClose(new EventStatusReportClose(arg0, true));
  }
  public static void SwigDirector_NettestHttpHeaderFieldManipulation_onStatusReportCreate(NettestHttpHeaderFieldManipulation jself, long arg0) {
    jself.onStatusReportCreate(new EventStatusReportCreate(arg0, true));
  }
  public static void SwigDirector_NettestHttpHeaderFieldManipulation_onStatusResolverLookup(NettestHttpHeaderFieldManipulation jself, long arg0) {
    jself.onStatusResolverLookup(new EventStatusResolverLookup(arg0, true));
  }
  public static void SwigDirector_NettestHttpHeaderFieldManipulation_onStatusStarted(NettestHttpHeaderFieldManipulation jself, long arg0) {
    jself.onStatusStarted(new EventStatusStarted(arg0, true));
  }
  public static void SwigDirector_NettestHttpHeaderFieldManipulation_onTaskTerminated(NettestHttpHeaderFieldManipulation jself, long arg0) {
    jself.onTaskTerminated(new EventTaskTerminated(arg0, true));
  }
  public static boolean SwigDirector_NettestHttpInvalidRequestLine_run(NettestHttpInvalidRequestLine jself) {
    return jself.run();
  }
  public static void SwigDirector_NettestHttpInvalidRequestLine_onFailureAsnLookup(NettestHttpInvalidRequestLine jself, long arg0) {
    jself.onFailureAsnLookup(new EventFailureAsnLookup(arg0, true));
  }
  public static void SwigDirector_NettestHttpInvalidRequestLine_onFailureCcLookup(NettestHttpInvalidRequestLine jself, long arg0) {
    jself.onFailureCcLookup(new EventFailureCcLookup(arg0, true));
  }
  public static void SwigDirector_NettestHttpInvalidRequestLine_onFailureIpLookup(NettestHttpInvalidRequestLine jself, long arg0) {
    jself.onFailureIpLookup(new EventFailureIpLookup(arg0, true));
  }
  public static void SwigDirector_NettestHttpInvalidRequestLine_onFailureMeasurement(NettestHttpInvalidRequestLine jself, long arg0) {
    jself.onFailureMeasurement(new EventFailureMeasurement(arg0, true));
  }
  public static void SwigDirector_NettestHttpInvalidRequestLine_onFailureMeasurementSubmission(NettestHttpInvalidRequestLine jself, long arg0) {
    jself.onFailureMeasurementSubmission(new EventFailureMeasurementSubmission(arg0, true));
  }
  public static void SwigDirector_NettestHttpInvalidRequestLine_onFailureReportCreate(NettestHttpInvalidRequestLine jself, long arg0) {
    jself.onFailureReportCreate(new EventFailureReportCreate(arg0, true));
  }
  public static void SwigDirector_NettestHttpInvalidRequestLine_onFailureReportClose(NettestHttpInvalidRequestLine jself, long arg0) {
    jself.onFailureReportClose(new EventFailureReportClose(arg0, true));
  }
  public static void SwigDirector_NettestHttpInvalidRequestLine_onFailureResolverLookup(NettestHttpInvalidRequestLine jself, long arg0) {
    jself.onFailureResolverLookup(new EventFailureResolverLookup(arg0, true));
  }
  public static void SwigDirector_NettestHttpInvalidRequestLine_onFailureStartup(NettestHttpInvalidRequestLine jself, long arg0) {
    jself.onFailureStartup(new EventFailureStartup(arg0, true));
  }
  public static void SwigDirector_NettestHttpInvalidRequestLine_onLog(NettestHttpInvalidRequestLine jself, long arg0) {
    jself.onLog(new EventLog(arg0, true));
  }
  public static void SwigDirector_NettestHttpInvalidRequestLine_onMeasurement(NettestHttpInvalidRequestLine jself, long arg0) {
    jself.onMeasurement(new EventMeasurement(arg0, true));
  }
  public static void SwigDirector_NettestHttpInvalidRequestLine_onStatusEnd(NettestHttpInvalidRequestLine jself, long arg0) {
    jself.onStatusEnd(new EventStatusEnd(arg0, true));
  }
  public static void SwigDirector_NettestHttpInvalidRequestLine_onStatusGeoipLookup(NettestHttpInvalidRequestLine jself, long arg0) {
    jself.onStatusGeoipLookup(new EventStatusGeoipLookup(arg0, true));
  }
  public static void SwigDirector_NettestHttpInvalidRequestLine_onStatusProgress(NettestHttpInvalidRequestLine jself, long arg0) {
    jself.onStatusProgress(new EventStatusProgress(arg0, true));
  }
  public static void SwigDirector_NettestHttpInvalidRequestLine_onStatusQueued(NettestHttpInvalidRequestLine jself, long arg0) {
    jself.onStatusQueued(new EventStatusQueued(arg0, true));
  }
  public static void SwigDirector_NettestHttpInvalidRequestLine_onStatusMeasurementStart(NettestHttpInvalidRequestLine jself, long arg0) {
    jself.onStatusMeasurementStart(new EventStatusMeasurementStart(arg0, true));
  }
  public static void SwigDirector_NettestHttpInvalidRequestLine_onStatusMeasurementSubmission(NettestHttpInvalidRequestLine jself, long arg0) {
    jself.onStatusMeasurementSubmission(new EventStatusMeasurementSubmission(arg0, true));
  }
  public static void SwigDirector_NettestHttpInvalidRequestLine_onStatusMeasurementDone(NettestHttpInvalidRequestLine jself, long arg0) {
    jself.onStatusMeasurementDone(new EventStatusMeasurementDone(arg0, true));
  }
  public static void SwigDirector_NettestHttpInvalidRequestLine_onStatusReportClose(NettestHttpInvalidRequestLine jself, long arg0) {
    jself.onStatusReportClose(new EventStatusReportClose(arg0, true));
  }
  public static void SwigDirector_NettestHttpInvalidRequestLine_onStatusReportCreate(NettestHttpInvalidRequestLine jself, long arg0) {
    jself.onStatusReportCreate(new EventStatusReportCreate(arg0, true));
  }
  public static void SwigDirector_NettestHttpInvalidRequestLine_onStatusResolverLookup(NettestHttpInvalidRequestLine jself, long arg0) {
    jself.onStatusResolverLookup(new EventStatusResolverLookup(arg0, true));
  }
  public static void SwigDirector_NettestHttpInvalidRequestLine_onStatusStarted(NettestHttpInvalidRequestLine jself, long arg0) {
    jself.onStatusStarted(new EventStatusStarted(arg0, true));
  }
  public static void SwigDirector_NettestHttpInvalidRequestLine_onTaskTerminated(NettestHttpInvalidRequestLine jself, long arg0) {
    jself.onTaskTerminated(new EventTaskTerminated(arg0, true));
  }
  public static boolean SwigDirector_NettestMeekFrontedRequests_run(NettestMeekFrontedRequests jself) {
    return jself.run();
  }
  public static void SwigDirector_NettestMeekFrontedRequests_onFailureAsnLookup(NettestMeekFrontedRequests jself, long arg0) {
    jself.onFailureAsnLookup(new EventFailureAsnLookup(arg0, true));
  }
  public static void SwigDirector_NettestMeekFrontedRequests_onFailureCcLookup(NettestMeekFrontedRequests jself, long arg0) {
    jself.onFailureCcLookup(new EventFailureCcLookup(arg0, true));
  }
  public static void SwigDirector_NettestMeekFrontedRequests_onFailureIpLookup(NettestMeekFrontedRequests jself, long arg0) {
    jself.onFailureIpLookup(new EventFailureIpLookup(arg0, true));
  }
  public static void SwigDirector_NettestMeekFrontedRequests_onFailureMeasurement(NettestMeekFrontedRequests jself, long arg0) {
    jself.onFailureMeasurement(new EventFailureMeasurement(arg0, true));
  }
  public static void SwigDirector_NettestMeekFrontedRequests_onFailureMeasurementSubmission(NettestMeekFrontedRequests jself, long arg0) {
    jself.onFailureMeasurementSubmission(new EventFailureMeasurementSubmission(arg0, true));
  }
  public static void SwigDirector_NettestMeekFrontedRequests_onFailureReportCreate(NettestMeekFrontedRequests jself, long arg0) {
    jself.onFailureReportCreate(new EventFailureReportCreate(arg0, true));
  }
  public static void SwigDirector_NettestMeekFrontedRequests_onFailureReportClose(NettestMeekFrontedRequests jself, long arg0) {
    jself.onFailureReportClose(new EventFailureReportClose(arg0, true));
  }
  public static void SwigDirector_NettestMeekFrontedRequests_onFailureResolverLookup(NettestMeekFrontedRequests jself, long arg0) {
    jself.onFailureResolverLookup(new EventFailureResolverLookup(arg0, true));
  }
  public static void SwigDirector_NettestMeekFrontedRequests_onFailureStartup(NettestMeekFrontedRequests jself, long arg0) {
    jself.onFailureStartup(new EventFailureStartup(arg0, true));
  }
  public static void SwigDirector_NettestMeekFrontedRequests_onLog(NettestMeekFrontedRequests jself, long arg0) {
    jself.onLog(new EventLog(arg0, true));
  }
  public static void SwigDirector_NettestMeekFrontedRequests_onMeasurement(NettestMeekFrontedRequests jself, long arg0) {
    jself.onMeasurement(new EventMeasurement(arg0, true));
  }
  public static void SwigDirector_NettestMeekFrontedRequests_onStatusEnd(NettestMeekFrontedRequests jself, long arg0) {
    jself.onStatusEnd(new EventStatusEnd(arg0, true));
  }
  public static void SwigDirector_NettestMeekFrontedRequests_onStatusGeoipLookup(NettestMeekFrontedRequests jself, long arg0) {
    jself.onStatusGeoipLookup(new EventStatusGeoipLookup(arg0, true));
  }
  public static void SwigDirector_NettestMeekFrontedRequests_onStatusProgress(NettestMeekFrontedRequests jself, long arg0) {
    jself.onStatusProgress(new EventStatusProgress(arg0, true));
  }
  public static void SwigDirector_NettestMeekFrontedRequests_onStatusQueued(NettestMeekFrontedRequests jself, long arg0) {
    jself.onStatusQueued(new EventStatusQueued(arg0, true));
  }
  public static void SwigDirector_NettestMeekFrontedRequests_onStatusMeasurementStart(NettestMeekFrontedRequests jself, long arg0) {
    jself.onStatusMeasurementStart(new EventStatusMeasurementStart(arg0, true));
  }
  public static void SwigDirector_NettestMeekFrontedRequests_onStatusMeasurementSubmission(NettestMeekFrontedRequests jself, long arg0) {
    jself.onStatusMeasurementSubmission(new EventStatusMeasurementSubmission(arg0, true));
  }
  public static void SwigDirector_NettestMeekFrontedRequests_onStatusMeasurementDone(NettestMeekFrontedRequests jself, long arg0) {
    jself.onStatusMeasurementDone(new EventStatusMeasurementDone(arg0, true));
  }
  public static void SwigDirector_NettestMeekFrontedRequests_onStatusReportClose(NettestMeekFrontedRequests jself, long arg0) {
    jself.onStatusReportClose(new EventStatusReportClose(arg0, true));
  }
  public static void SwigDirector_NettestMeekFrontedRequests_onStatusReportCreate(NettestMeekFrontedRequests jself, long arg0) {
    jself.onStatusReportCreate(new EventStatusReportCreate(arg0, true));
  }
  public static void SwigDirector_NettestMeekFrontedRequests_onStatusResolverLookup(NettestMeekFrontedRequests jself, long arg0) {
    jself.onStatusResolverLookup(new EventStatusResolverLookup(arg0, true));
  }
  public static void SwigDirector_NettestMeekFrontedRequests_onStatusStarted(NettestMeekFrontedRequests jself, long arg0) {
    jself.onStatusStarted(new EventStatusStarted(arg0, true));
  }
  public static void SwigDirector_NettestMeekFrontedRequests_onTaskTerminated(NettestMeekFrontedRequests jself, long arg0) {
    jself.onTaskTerminated(new EventTaskTerminated(arg0, true));
  }
  public static boolean SwigDirector_NettestMultiNdt_run(NettestMultiNdt jself) {
    return jself.run();
  }
  public static void SwigDirector_NettestMultiNdt_onFailureAsnLookup(NettestMultiNdt jself, long arg0) {
    jself.onFailureAsnLookup(new EventFailureAsnLookup(arg0, true));
  }
  public static void SwigDirector_NettestMultiNdt_onFailureCcLookup(NettestMultiNdt jself, long arg0) {
    jself.onFailureCcLookup(new EventFailureCcLookup(arg0, true));
  }
  public static void SwigDirector_NettestMultiNdt_onFailureIpLookup(NettestMultiNdt jself, long arg0) {
    jself.onFailureIpLookup(new EventFailureIpLookup(arg0, true));
  }
  public static void SwigDirector_NettestMultiNdt_onFailureMeasurement(NettestMultiNdt jself, long arg0) {
    jself.onFailureMeasurement(new EventFailureMeasurement(arg0, true));
  }
  public static void SwigDirector_NettestMultiNdt_onFailureMeasurementSubmission(NettestMultiNdt jself, long arg0) {
    jself.onFailureMeasurementSubmission(new EventFailureMeasurementSubmission(arg0, true));
  }
  public static void SwigDirector_NettestMultiNdt_onFailureReportCreate(NettestMultiNdt jself, long arg0) {
    jself.onFailureReportCreate(new EventFailureReportCreate(arg0, true));
  }
  public static void SwigDirector_NettestMultiNdt_onFailureReportClose(NettestMultiNdt jself, long arg0) {
    jself.onFailureReportClose(new EventFailureReportClose(arg0, true));
  }
  public static void SwigDirector_NettestMultiNdt_onFailureResolverLookup(NettestMultiNdt jself, long arg0) {
    jself.onFailureResolverLookup(new EventFailureResolverLookup(arg0, true));
  }
  public static void SwigDirector_NettestMultiNdt_onFailureStartup(NettestMultiNdt jself, long arg0) {
    jself.onFailureStartup(new EventFailureStartup(arg0, true));
  }
  public static void SwigDirector_NettestMultiNdt_onLog(NettestMultiNdt jself, long arg0) {
    jself.onLog(new EventLog(arg0, true));
  }
  public static void SwigDirector_NettestMultiNdt_onMeasurement(NettestMultiNdt jself, long arg0) {
    jself.onMeasurement(new EventMeasurement(arg0, true));
  }
  public static void SwigDirector_NettestMultiNdt_onStatusEnd(NettestMultiNdt jself, long arg0) {
    jself.onStatusEnd(new EventStatusEnd(arg0, true));
  }
  public static void SwigDirector_NettestMultiNdt_onStatusGeoipLookup(NettestMultiNdt jself, long arg0) {
    jself.onStatusGeoipLookup(new EventStatusGeoipLookup(arg0, true));
  }
  public static void SwigDirector_NettestMultiNdt_onStatusProgress(NettestMultiNdt jself, long arg0) {
    jself.onStatusProgress(new EventStatusProgress(arg0, true));
  }
  public static void SwigDirector_NettestMultiNdt_onStatusQueued(NettestMultiNdt jself, long arg0) {
    jself.onStatusQueued(new EventStatusQueued(arg0, true));
  }
  public static void SwigDirector_NettestMultiNdt_onStatusMeasurementStart(NettestMultiNdt jself, long arg0) {
    jself.onStatusMeasurementStart(new EventStatusMeasurementStart(arg0, true));
  }
  public static void SwigDirector_NettestMultiNdt_onStatusMeasurementSubmission(NettestMultiNdt jself, long arg0) {
    jself.onStatusMeasurementSubmission(new EventStatusMeasurementSubmission(arg0, true));
  }
  public static void SwigDirector_NettestMultiNdt_onStatusMeasurementDone(NettestMultiNdt jself, long arg0) {
    jself.onStatusMeasurementDone(new EventStatusMeasurementDone(arg0, true));
  }
  public static void SwigDirector_NettestMultiNdt_onStatusReportClose(NettestMultiNdt jself, long arg0) {
    jself.onStatusReportClose(new EventStatusReportClose(arg0, true));
  }
  public static void SwigDirector_NettestMultiNdt_onStatusReportCreate(NettestMultiNdt jself, long arg0) {
    jself.onStatusReportCreate(new EventStatusReportCreate(arg0, true));
  }
  public static void SwigDirector_NettestMultiNdt_onStatusResolverLookup(NettestMultiNdt jself, long arg0) {
    jself.onStatusResolverLookup(new EventStatusResolverLookup(arg0, true));
  }
  public static void SwigDirector_NettestMultiNdt_onStatusStarted(NettestMultiNdt jself, long arg0) {
    jself.onStatusStarted(new EventStatusStarted(arg0, true));
  }
  public static void SwigDirector_NettestMultiNdt_onTaskTerminated(NettestMultiNdt jself, long arg0) {
    jself.onTaskTerminated(new EventTaskTerminated(arg0, true));
  }
  public static void SwigDirector_NettestMultiNdt_onStatusUpdatePerformance(NettestMultiNdt jself, long arg0) {
    jself.onStatusUpdatePerformance(new EventStatusUpdatePerformance(arg0, true));
  }
  public static boolean SwigDirector_NettestNdt_run(NettestNdt jself) {
    return jself.run();
  }
  public static void SwigDirector_NettestNdt_onFailureAsnLookup(NettestNdt jself, long arg0) {
    jself.onFailureAsnLookup(new EventFailureAsnLookup(arg0, true));
  }
  public static void SwigDirector_NettestNdt_onFailureCcLookup(NettestNdt jself, long arg0) {
    jself.onFailureCcLookup(new EventFailureCcLookup(arg0, true));
  }
  public static void SwigDirector_NettestNdt_onFailureIpLookup(NettestNdt jself, long arg0) {
    jself.onFailureIpLookup(new EventFailureIpLookup(arg0, true));
  }
  public static void SwigDirector_NettestNdt_onFailureMeasurement(NettestNdt jself, long arg0) {
    jself.onFailureMeasurement(new EventFailureMeasurement(arg0, true));
  }
  public static void SwigDirector_NettestNdt_onFailureMeasurementSubmission(NettestNdt jself, long arg0) {
    jself.onFailureMeasurementSubmission(new EventFailureMeasurementSubmission(arg0, true));
  }
  public static void SwigDirector_NettestNdt_onFailureReportCreate(NettestNdt jself, long arg0) {
    jself.onFailureReportCreate(new EventFailureReportCreate(arg0, true));
  }
  public static void SwigDirector_NettestNdt_onFailureReportClose(NettestNdt jself, long arg0) {
    jself.onFailureReportClose(new EventFailureReportClose(arg0, true));
  }
  public static void SwigDirector_NettestNdt_onFailureResolverLookup(NettestNdt jself, long arg0) {
    jself.onFailureResolverLookup(new EventFailureResolverLookup(arg0, true));
  }
  public static void SwigDirector_NettestNdt_onFailureStartup(NettestNdt jself, long arg0) {
    jself.onFailureStartup(new EventFailureStartup(arg0, true));
  }
  public static void SwigDirector_NettestNdt_onLog(NettestNdt jself, long arg0) {
    jself.onLog(new EventLog(arg0, true));
  }
  public static void SwigDirector_NettestNdt_onMeasurement(NettestNdt jself, long arg0) {
    jself.onMeasurement(new EventMeasurement(arg0, true));
  }
  public static void SwigDirector_NettestNdt_onStatusEnd(NettestNdt jself, long arg0) {
    jself.onStatusEnd(new EventStatusEnd(arg0, true));
  }
  public static void SwigDirector_NettestNdt_onStatusGeoipLookup(NettestNdt jself, long arg0) {
    jself.onStatusGeoipLookup(new EventStatusGeoipLookup(arg0, true));
  }
  public static void SwigDirector_NettestNdt_onStatusProgress(NettestNdt jself, long arg0) {
    jself.onStatusProgress(new EventStatusProgress(arg0, true));
  }
  public static void SwigDirector_NettestNdt_onStatusQueued(NettestNdt jself, long arg0) {
    jself.onStatusQueued(new EventStatusQueued(arg0, true));
  }
  public static void SwigDirector_NettestNdt_onStatusMeasurementStart(NettestNdt jself, long arg0) {
    jself.onStatusMeasurementStart(new EventStatusMeasurementStart(arg0, true));
  }
  public static void SwigDirector_NettestNdt_onStatusMeasurementSubmission(NettestNdt jself, long arg0) {
    jself.onStatusMeasurementSubmission(new EventStatusMeasurementSubmission(arg0, true));
  }
  public static void SwigDirector_NettestNdt_onStatusMeasurementDone(NettestNdt jself, long arg0) {
    jself.onStatusMeasurementDone(new EventStatusMeasurementDone(arg0, true));
  }
  public static void SwigDirector_NettestNdt_onStatusReportClose(NettestNdt jself, long arg0) {
    jself.onStatusReportClose(new EventStatusReportClose(arg0, true));
  }
  public static void SwigDirector_NettestNdt_onStatusReportCreate(NettestNdt jself, long arg0) {
    jself.onStatusReportCreate(new EventStatusReportCreate(arg0, true));
  }
  public static void SwigDirector_NettestNdt_onStatusResolverLookup(NettestNdt jself, long arg0) {
    jself.onStatusResolverLookup(new EventStatusResolverLookup(arg0, true));
  }
  public static void SwigDirector_NettestNdt_onStatusStarted(NettestNdt jself, long arg0) {
    jself.onStatusStarted(new EventStatusStarted(arg0, true));
  }
  public static void SwigDirector_NettestNdt_onTaskTerminated(NettestNdt jself, long arg0) {
    jself.onTaskTerminated(new EventTaskTerminated(arg0, true));
  }
  public static void SwigDirector_NettestNdt_onStatusUpdatePerformance(NettestNdt jself, long arg0) {
    jself.onStatusUpdatePerformance(new EventStatusUpdatePerformance(arg0, true));
  }
  public static boolean SwigDirector_NettestTcpConnect_run(NettestTcpConnect jself) {
    return jself.run();
  }
  public static void SwigDirector_NettestTcpConnect_onFailureAsnLookup(NettestTcpConnect jself, long arg0) {
    jself.onFailureAsnLookup(new EventFailureAsnLookup(arg0, true));
  }
  public static void SwigDirector_NettestTcpConnect_onFailureCcLookup(NettestTcpConnect jself, long arg0) {
    jself.onFailureCcLookup(new EventFailureCcLookup(arg0, true));
  }
  public static void SwigDirector_NettestTcpConnect_onFailureIpLookup(NettestTcpConnect jself, long arg0) {
    jself.onFailureIpLookup(new EventFailureIpLookup(arg0, true));
  }
  public static void SwigDirector_NettestTcpConnect_onFailureMeasurement(NettestTcpConnect jself, long arg0) {
    jself.onFailureMeasurement(new EventFailureMeasurement(arg0, true));
  }
  public static void SwigDirector_NettestTcpConnect_onFailureMeasurementSubmission(NettestTcpConnect jself, long arg0) {
    jself.onFailureMeasurementSubmission(new EventFailureMeasurementSubmission(arg0, true));
  }
  public static void SwigDirector_NettestTcpConnect_onFailureReportCreate(NettestTcpConnect jself, long arg0) {
    jself.onFailureReportCreate(new EventFailureReportCreate(arg0, true));
  }
  public static void SwigDirector_NettestTcpConnect_onFailureReportClose(NettestTcpConnect jself, long arg0) {
    jself.onFailureReportClose(new EventFailureReportClose(arg0, true));
  }
  public static void SwigDirector_NettestTcpConnect_onFailureResolverLookup(NettestTcpConnect jself, long arg0) {
    jself.onFailureResolverLookup(new EventFailureResolverLookup(arg0, true));
  }
  public static void SwigDirector_NettestTcpConnect_onFailureStartup(NettestTcpConnect jself, long arg0) {
    jself.onFailureStartup(new EventFailureStartup(arg0, true));
  }
  public static void SwigDirector_NettestTcpConnect_onLog(NettestTcpConnect jself, long arg0) {
    jself.onLog(new EventLog(arg0, true));
  }
  public static void SwigDirector_NettestTcpConnect_onMeasurement(NettestTcpConnect jself, long arg0) {
    jself.onMeasurement(new EventMeasurement(arg0, true));
  }
  public static void SwigDirector_NettestTcpConnect_onStatusEnd(NettestTcpConnect jself, long arg0) {
    jself.onStatusEnd(new EventStatusEnd(arg0, true));
  }
  public static void SwigDirector_NettestTcpConnect_onStatusGeoipLookup(NettestTcpConnect jself, long arg0) {
    jself.onStatusGeoipLookup(new EventStatusGeoipLookup(arg0, true));
  }
  public static void SwigDirector_NettestTcpConnect_onStatusProgress(NettestTcpConnect jself, long arg0) {
    jself.onStatusProgress(new EventStatusProgress(arg0, true));
  }
  public static void SwigDirector_NettestTcpConnect_onStatusQueued(NettestTcpConnect jself, long arg0) {
    jself.onStatusQueued(new EventStatusQueued(arg0, true));
  }
  public static void SwigDirector_NettestTcpConnect_onStatusMeasurementStart(NettestTcpConnect jself, long arg0) {
    jself.onStatusMeasurementStart(new EventStatusMeasurementStart(arg0, true));
  }
  public static void SwigDirector_NettestTcpConnect_onStatusMeasurementSubmission(NettestTcpConnect jself, long arg0) {
    jself.onStatusMeasurementSubmission(new EventStatusMeasurementSubmission(arg0, true));
  }
  public static void SwigDirector_NettestTcpConnect_onStatusMeasurementDone(NettestTcpConnect jself, long arg0) {
    jself.onStatusMeasurementDone(new EventStatusMeasurementDone(arg0, true));
  }
  public static void SwigDirector_NettestTcpConnect_onStatusReportClose(NettestTcpConnect jself, long arg0) {
    jself.onStatusReportClose(new EventStatusReportClose(arg0, true));
  }
  public static void SwigDirector_NettestTcpConnect_onStatusReportCreate(NettestTcpConnect jself, long arg0) {
    jself.onStatusReportCreate(new EventStatusReportCreate(arg0, true));
  }
  public static void SwigDirector_NettestTcpConnect_onStatusResolverLookup(NettestTcpConnect jself, long arg0) {
    jself.onStatusResolverLookup(new EventStatusResolverLookup(arg0, true));
  }
  public static void SwigDirector_NettestTcpConnect_onStatusStarted(NettestTcpConnect jself, long arg0) {
    jself.onStatusStarted(new EventStatusStarted(arg0, true));
  }
  public static void SwigDirector_NettestTcpConnect_onTaskTerminated(NettestTcpConnect jself, long arg0) {
    jself.onTaskTerminated(new EventTaskTerminated(arg0, true));
  }
  public static boolean SwigDirector_NettestTelegram_run(NettestTelegram jself) {
    return jself.run();
  }
  public static void SwigDirector_NettestTelegram_onFailureAsnLookup(NettestTelegram jself, long arg0) {
    jself.onFailureAsnLookup(new EventFailureAsnLookup(arg0, true));
  }
  public static void SwigDirector_NettestTelegram_onFailureCcLookup(NettestTelegram jself, long arg0) {
    jself.onFailureCcLookup(new EventFailureCcLookup(arg0, true));
  }
  public static void SwigDirector_NettestTelegram_onFailureIpLookup(NettestTelegram jself, long arg0) {
    jself.onFailureIpLookup(new EventFailureIpLookup(arg0, true));
  }
  public static void SwigDirector_NettestTelegram_onFailureMeasurement(NettestTelegram jself, long arg0) {
    jself.onFailureMeasurement(new EventFailureMeasurement(arg0, true));
  }
  public static void SwigDirector_NettestTelegram_onFailureMeasurementSubmission(NettestTelegram jself, long arg0) {
    jself.onFailureMeasurementSubmission(new EventFailureMeasurementSubmission(arg0, true));
  }
  public static void SwigDirector_NettestTelegram_onFailureReportCreate(NettestTelegram jself, long arg0) {
    jself.onFailureReportCreate(new EventFailureReportCreate(arg0, true));
  }
  public static void SwigDirector_NettestTelegram_onFailureReportClose(NettestTelegram jself, long arg0) {
    jself.onFailureReportClose(new EventFailureReportClose(arg0, true));
  }
  public static void SwigDirector_NettestTelegram_onFailureResolverLookup(NettestTelegram jself, long arg0) {
    jself.onFailureResolverLookup(new EventFailureResolverLookup(arg0, true));
  }
  public static void SwigDirector_NettestTelegram_onFailureStartup(NettestTelegram jself, long arg0) {
    jself.onFailureStartup(new EventFailureStartup(arg0, true));
  }
  public static void SwigDirector_NettestTelegram_onLog(NettestTelegram jself, long arg0) {
    jself.onLog(new EventLog(arg0, true));
  }
  public static void SwigDirector_NettestTelegram_onMeasurement(NettestTelegram jself, long arg0) {
    jself.onMeasurement(new EventMeasurement(arg0, true));
  }
  public static void SwigDirector_NettestTelegram_onStatusEnd(NettestTelegram jself, long arg0) {
    jself.onStatusEnd(new EventStatusEnd(arg0, true));
  }
  public static void SwigDirector_NettestTelegram_onStatusGeoipLookup(NettestTelegram jself, long arg0) {
    jself.onStatusGeoipLookup(new EventStatusGeoipLookup(arg0, true));
  }
  public static void SwigDirector_NettestTelegram_onStatusProgress(NettestTelegram jself, long arg0) {
    jself.onStatusProgress(new EventStatusProgress(arg0, true));
  }
  public static void SwigDirector_NettestTelegram_onStatusQueued(NettestTelegram jself, long arg0) {
    jself.onStatusQueued(new EventStatusQueued(arg0, true));
  }
  public static void SwigDirector_NettestTelegram_onStatusMeasurementStart(NettestTelegram jself, long arg0) {
    jself.onStatusMeasurementStart(new EventStatusMeasurementStart(arg0, true));
  }
  public static void SwigDirector_NettestTelegram_onStatusMeasurementSubmission(NettestTelegram jself, long arg0) {
    jself.onStatusMeasurementSubmission(new EventStatusMeasurementSubmission(arg0, true));
  }
  public static void SwigDirector_NettestTelegram_onStatusMeasurementDone(NettestTelegram jself, long arg0) {
    jself.onStatusMeasurementDone(new EventStatusMeasurementDone(arg0, true));
  }
  public static void SwigDirector_NettestTelegram_onStatusReportClose(NettestTelegram jself, long arg0) {
    jself.onStatusReportClose(new EventStatusReportClose(arg0, true));
  }
  public static void SwigDirector_NettestTelegram_onStatusReportCreate(NettestTelegram jself, long arg0) {
    jself.onStatusReportCreate(new EventStatusReportCreate(arg0, true));
  }
  public static void SwigDirector_NettestTelegram_onStatusResolverLookup(NettestTelegram jself, long arg0) {
    jself.onStatusResolverLookup(new EventStatusResolverLookup(arg0, true));
  }
  public static void SwigDirector_NettestTelegram_onStatusStarted(NettestTelegram jself, long arg0) {
    jself.onStatusStarted(new EventStatusStarted(arg0, true));
  }
  public static void SwigDirector_NettestTelegram_onTaskTerminated(NettestTelegram jself, long arg0) {
    jself.onTaskTerminated(new EventTaskTerminated(arg0, true));
  }
  public static boolean SwigDirector_NettestWebConnectivity_run(NettestWebConnectivity jself) {
    return jself.run();
  }
  public static void SwigDirector_NettestWebConnectivity_onFailureAsnLookup(NettestWebConnectivity jself, long arg0) {
    jself.onFailureAsnLookup(new EventFailureAsnLookup(arg0, true));
  }
  public static void SwigDirector_NettestWebConnectivity_onFailureCcLookup(NettestWebConnectivity jself, long arg0) {
    jself.onFailureCcLookup(new EventFailureCcLookup(arg0, true));
  }
  public static void SwigDirector_NettestWebConnectivity_onFailureIpLookup(NettestWebConnectivity jself, long arg0) {
    jself.onFailureIpLookup(new EventFailureIpLookup(arg0, true));
  }
  public static void SwigDirector_NettestWebConnectivity_onFailureMeasurement(NettestWebConnectivity jself, long arg0) {
    jself.onFailureMeasurement(new EventFailureMeasurement(arg0, true));
  }
  public static void SwigDirector_NettestWebConnectivity_onFailureMeasurementSubmission(NettestWebConnectivity jself, long arg0) {
    jself.onFailureMeasurementSubmission(new EventFailureMeasurementSubmission(arg0, true));
  }
  public static void SwigDirector_NettestWebConnectivity_onFailureReportCreate(NettestWebConnectivity jself, long arg0) {
    jself.onFailureReportCreate(new EventFailureReportCreate(arg0, true));
  }
  public static void SwigDirector_NettestWebConnectivity_onFailureReportClose(NettestWebConnectivity jself, long arg0) {
    jself.onFailureReportClose(new EventFailureReportClose(arg0, true));
  }
  public static void SwigDirector_NettestWebConnectivity_onFailureResolverLookup(NettestWebConnectivity jself, long arg0) {
    jself.onFailureResolverLookup(new EventFailureResolverLookup(arg0, true));
  }
  public static void SwigDirector_NettestWebConnectivity_onFailureStartup(NettestWebConnectivity jself, long arg0) {
    jself.onFailureStartup(new EventFailureStartup(arg0, true));
  }
  public static void SwigDirector_NettestWebConnectivity_onLog(NettestWebConnectivity jself, long arg0) {
    jself.onLog(new EventLog(arg0, true));
  }
  public static void SwigDirector_NettestWebConnectivity_onMeasurement(NettestWebConnectivity jself, long arg0) {
    jself.onMeasurement(new EventMeasurement(arg0, true));
  }
  public static void SwigDirector_NettestWebConnectivity_onStatusEnd(NettestWebConnectivity jself, long arg0) {
    jself.onStatusEnd(new EventStatusEnd(arg0, true));
  }
  public static void SwigDirector_NettestWebConnectivity_onStatusGeoipLookup(NettestWebConnectivity jself, long arg0) {
    jself.onStatusGeoipLookup(new EventStatusGeoipLookup(arg0, true));
  }
  public static void SwigDirector_NettestWebConnectivity_onStatusProgress(NettestWebConnectivity jself, long arg0) {
    jself.onStatusProgress(new EventStatusProgress(arg0, true));
  }
  public static void SwigDirector_NettestWebConnectivity_onStatusQueued(NettestWebConnectivity jself, long arg0) {
    jself.onStatusQueued(new EventStatusQueued(arg0, true));
  }
  public static void SwigDirector_NettestWebConnectivity_onStatusMeasurementStart(NettestWebConnectivity jself, long arg0) {
    jself.onStatusMeasurementStart(new EventStatusMeasurementStart(arg0, true));
  }
  public static void SwigDirector_NettestWebConnectivity_onStatusMeasurementSubmission(NettestWebConnectivity jself, long arg0) {
    jself.onStatusMeasurementSubmission(new EventStatusMeasurementSubmission(arg0, true));
  }
  public static void SwigDirector_NettestWebConnectivity_onStatusMeasurementDone(NettestWebConnectivity jself, long arg0) {
    jself.onStatusMeasurementDone(new EventStatusMeasurementDone(arg0, true));
  }
  public static void SwigDirector_NettestWebConnectivity_onStatusReportClose(NettestWebConnectivity jself, long arg0) {
    jself.onStatusReportClose(new EventStatusReportClose(arg0, true));
  }
  public static void SwigDirector_NettestWebConnectivity_onStatusReportCreate(NettestWebConnectivity jself, long arg0) {
    jself.onStatusReportCreate(new EventStatusReportCreate(arg0, true));
  }
  public static void SwigDirector_NettestWebConnectivity_onStatusResolverLookup(NettestWebConnectivity jself, long arg0) {
    jself.onStatusResolverLookup(new EventStatusResolverLookup(arg0, true));
  }
  public static void SwigDirector_NettestWebConnectivity_onStatusStarted(NettestWebConnectivity jself, long arg0) {
    jself.onStatusStarted(new EventStatusStarted(arg0, true));
  }
  public static void SwigDirector_NettestWebConnectivity_onTaskTerminated(NettestWebConnectivity jself, long arg0) {
    jself.onTaskTerminated(new EventTaskTerminated(arg0, true));
  }
  public static void SwigDirector_NettestWebConnectivity_onStatusUpdateWebsites(NettestWebConnectivity jself, long arg0) {
    jself.onStatusUpdateWebsites(new EventStatusUpdateWebsites(arg0, true));
  }
  public static boolean SwigDirector_NettestWhatsapp_run(NettestWhatsapp jself) {
    return jself.run();
  }
  public static void SwigDirector_NettestWhatsapp_onFailureAsnLookup(NettestWhatsapp jself, long arg0) {
    jself.onFailureAsnLookup(new EventFailureAsnLookup(arg0, true));
  }
  public static void SwigDirector_NettestWhatsapp_onFailureCcLookup(NettestWhatsapp jself, long arg0) {
    jself.onFailureCcLookup(new EventFailureCcLookup(arg0, true));
  }
  public static void SwigDirector_NettestWhatsapp_onFailureIpLookup(NettestWhatsapp jself, long arg0) {
    jself.onFailureIpLookup(new EventFailureIpLookup(arg0, true));
  }
  public static void SwigDirector_NettestWhatsapp_onFailureMeasurement(NettestWhatsapp jself, long arg0) {
    jself.onFailureMeasurement(new EventFailureMeasurement(arg0, true));
  }
  public static void SwigDirector_NettestWhatsapp_onFailureMeasurementSubmission(NettestWhatsapp jself, long arg0) {
    jself.onFailureMeasurementSubmission(new EventFailureMeasurementSubmission(arg0, true));
  }
  public static void SwigDirector_NettestWhatsapp_onFailureReportCreate(NettestWhatsapp jself, long arg0) {
    jself.onFailureReportCreate(new EventFailureReportCreate(arg0, true));
  }
  public static void SwigDirector_NettestWhatsapp_onFailureReportClose(NettestWhatsapp jself, long arg0) {
    jself.onFailureReportClose(new EventFailureReportClose(arg0, true));
  }
  public static void SwigDirector_NettestWhatsapp_onFailureResolverLookup(NettestWhatsapp jself, long arg0) {
    jself.onFailureResolverLookup(new EventFailureResolverLookup(arg0, true));
  }
  public static void SwigDirector_NettestWhatsapp_onFailureStartup(NettestWhatsapp jself, long arg0) {
    jself.onFailureStartup(new EventFailureStartup(arg0, true));
  }
  public static void SwigDirector_NettestWhatsapp_onLog(NettestWhatsapp jself, long arg0) {
    jself.onLog(new EventLog(arg0, true));
  }
  public static void SwigDirector_NettestWhatsapp_onMeasurement(NettestWhatsapp jself, long arg0) {
    jself.onMeasurement(new EventMeasurement(arg0, true));
  }
  public static void SwigDirector_NettestWhatsapp_onStatusEnd(NettestWhatsapp jself, long arg0) {
    jself.onStatusEnd(new EventStatusEnd(arg0, true));
  }
  public static void SwigDirector_NettestWhatsapp_onStatusGeoipLookup(NettestWhatsapp jself, long arg0) {
    jself.onStatusGeoipLookup(new EventStatusGeoipLookup(arg0, true));
  }
  public static void SwigDirector_NettestWhatsapp_onStatusProgress(NettestWhatsapp jself, long arg0) {
    jself.onStatusProgress(new EventStatusProgress(arg0, true));
  }
  public static void SwigDirector_NettestWhatsapp_onStatusQueued(NettestWhatsapp jself, long arg0) {
    jself.onStatusQueued(new EventStatusQueued(arg0, true));
  }
  public static void SwigDirector_NettestWhatsapp_onStatusMeasurementStart(NettestWhatsapp jself, long arg0) {
    jself.onStatusMeasurementStart(new EventStatusMeasurementStart(arg0, true));
  }
  public static void SwigDirector_NettestWhatsapp_onStatusMeasurementSubmission(NettestWhatsapp jself, long arg0) {
    jself.onStatusMeasurementSubmission(new EventStatusMeasurementSubmission(arg0, true));
  }
  public static void SwigDirector_NettestWhatsapp_onStatusMeasurementDone(NettestWhatsapp jself, long arg0) {
    jself.onStatusMeasurementDone(new EventStatusMeasurementDone(arg0, true));
  }
  public static void SwigDirector_NettestWhatsapp_onStatusReportClose(NettestWhatsapp jself, long arg0) {
    jself.onStatusReportClose(new EventStatusReportClose(arg0, true));
  }
  public static void SwigDirector_NettestWhatsapp_onStatusReportCreate(NettestWhatsapp jself, long arg0) {
    jself.onStatusReportCreate(new EventStatusReportCreate(arg0, true));
  }
  public static void SwigDirector_NettestWhatsapp_onStatusResolverLookup(NettestWhatsapp jself, long arg0) {
    jself.onStatusResolverLookup(new EventStatusResolverLookup(arg0, true));
  }
  public static void SwigDirector_NettestWhatsapp_onStatusStarted(NettestWhatsapp jself, long arg0) {
    jself.onStatusStarted(new EventStatusStarted(arg0, true));
  }
  public static void SwigDirector_NettestWhatsapp_onTaskTerminated(NettestWhatsapp jself, long arg0) {
    jself.onTaskTerminated(new EventTaskTerminated(arg0, true));
  }

  private final static native void swig_module_init();
  static {
    swig_module_init();
  }
}
