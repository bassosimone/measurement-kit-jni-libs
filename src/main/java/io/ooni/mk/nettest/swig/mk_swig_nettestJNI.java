/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package io.ooni.mk.nettest.swig;

public class mk_swig_nettestJNI {
  public final static native String logLevelErr_get();
  public final static native String logLevelWarning_get();
  public final static native String logLevelInfo_get();
  public final static native String logLevelDebug_get();
  public final static native String logLevelDebug2_get();
  public final static native String FailureAsnLookupEvent_key_get();
  public final static native void FailureAsnLookupEvent_failure_set(long jarg1, FailureAsnLookupEvent jarg1_, String jarg2);
  public final static native String FailureAsnLookupEvent_failure_get(long jarg1, FailureAsnLookupEvent jarg1_);
  public final static native long new_FailureAsnLookupEvent();
  public final static native void delete_FailureAsnLookupEvent(long jarg1);
  public final static native String FailureCcLookupEvent_key_get();
  public final static native void FailureCcLookupEvent_failure_set(long jarg1, FailureCcLookupEvent jarg1_, String jarg2);
  public final static native String FailureCcLookupEvent_failure_get(long jarg1, FailureCcLookupEvent jarg1_);
  public final static native long new_FailureCcLookupEvent();
  public final static native void delete_FailureCcLookupEvent(long jarg1);
  public final static native String FailureIpLookupEvent_key_get();
  public final static native void FailureIpLookupEvent_failure_set(long jarg1, FailureIpLookupEvent jarg1_, String jarg2);
  public final static native String FailureIpLookupEvent_failure_get(long jarg1, FailureIpLookupEvent jarg1_);
  public final static native long new_FailureIpLookupEvent();
  public final static native void delete_FailureIpLookupEvent(long jarg1);
  public final static native String FailureMeasurementEvent_key_get();
  public final static native void FailureMeasurementEvent_failure_set(long jarg1, FailureMeasurementEvent jarg1_, String jarg2);
  public final static native String FailureMeasurementEvent_failure_get(long jarg1, FailureMeasurementEvent jarg1_);
  public final static native long new_FailureMeasurementEvent();
  public final static native void delete_FailureMeasurementEvent(long jarg1);
  public final static native String FailureMeasurementSubmissionEvent_key_get();
  public final static native void FailureMeasurementSubmissionEvent_failure_set(long jarg1, FailureMeasurementSubmissionEvent jarg1_, String jarg2);
  public final static native String FailureMeasurementSubmissionEvent_failure_get(long jarg1, FailureMeasurementSubmissionEvent jarg1_);
  public final static native void FailureMeasurementSubmissionEvent_idx_set(long jarg1, FailureMeasurementSubmissionEvent jarg1_, long jarg2);
  public final static native long FailureMeasurementSubmissionEvent_idx_get(long jarg1, FailureMeasurementSubmissionEvent jarg1_);
  public final static native void FailureMeasurementSubmissionEvent_jsonStr_set(long jarg1, FailureMeasurementSubmissionEvent jarg1_, String jarg2);
  public final static native String FailureMeasurementSubmissionEvent_jsonStr_get(long jarg1, FailureMeasurementSubmissionEvent jarg1_);
  public final static native long new_FailureMeasurementSubmissionEvent();
  public final static native void delete_FailureMeasurementSubmissionEvent(long jarg1);
  public final static native String FailureReportCreateEvent_key_get();
  public final static native void FailureReportCreateEvent_failure_set(long jarg1, FailureReportCreateEvent jarg1_, String jarg2);
  public final static native String FailureReportCreateEvent_failure_get(long jarg1, FailureReportCreateEvent jarg1_);
  public final static native long new_FailureReportCreateEvent();
  public final static native void delete_FailureReportCreateEvent(long jarg1);
  public final static native String FailureReportCloseEvent_key_get();
  public final static native void FailureReportCloseEvent_failure_set(long jarg1, FailureReportCloseEvent jarg1_, String jarg2);
  public final static native String FailureReportCloseEvent_failure_get(long jarg1, FailureReportCloseEvent jarg1_);
  public final static native long new_FailureReportCloseEvent();
  public final static native void delete_FailureReportCloseEvent(long jarg1);
  public final static native String FailureResolverLookupEvent_key_get();
  public final static native void FailureResolverLookupEvent_failure_set(long jarg1, FailureResolverLookupEvent jarg1_, String jarg2);
  public final static native String FailureResolverLookupEvent_failure_get(long jarg1, FailureResolverLookupEvent jarg1_);
  public final static native long new_FailureResolverLookupEvent();
  public final static native void delete_FailureResolverLookupEvent(long jarg1);
  public final static native String FailureStartupEvent_key_get();
  public final static native void FailureStartupEvent_failure_set(long jarg1, FailureStartupEvent jarg1_, String jarg2);
  public final static native String FailureStartupEvent_failure_get(long jarg1, FailureStartupEvent jarg1_);
  public final static native long new_FailureStartupEvent();
  public final static native void delete_FailureStartupEvent(long jarg1);
  public final static native String LogEvent_key_get();
  public final static native void LogEvent_logLevel_set(long jarg1, LogEvent jarg1_, String jarg2);
  public final static native String LogEvent_logLevel_get(long jarg1, LogEvent jarg1_);
  public final static native void LogEvent_message_set(long jarg1, LogEvent jarg1_, String jarg2);
  public final static native String LogEvent_message_get(long jarg1, LogEvent jarg1_);
  public final static native long new_LogEvent();
  public final static native void delete_LogEvent(long jarg1);
  public final static native String MeasurementEvent_key_get();
  public final static native void MeasurementEvent_idx_set(long jarg1, MeasurementEvent jarg1_, long jarg2);
  public final static native long MeasurementEvent_idx_get(long jarg1, MeasurementEvent jarg1_);
  public final static native void MeasurementEvent_jsonStr_set(long jarg1, MeasurementEvent jarg1_, String jarg2);
  public final static native String MeasurementEvent_jsonStr_get(long jarg1, MeasurementEvent jarg1_);
  public final static native long new_MeasurementEvent();
  public final static native void delete_MeasurementEvent(long jarg1);
  public final static native String StatusEndEvent_key_get();
  public final static native void StatusEndEvent_downloadedKb_set(long jarg1, StatusEndEvent jarg1_, double jarg2);
  public final static native double StatusEndEvent_downloadedKb_get(long jarg1, StatusEndEvent jarg1_);
  public final static native void StatusEndEvent_uploadedKb_set(long jarg1, StatusEndEvent jarg1_, double jarg2);
  public final static native double StatusEndEvent_uploadedKb_get(long jarg1, StatusEndEvent jarg1_);
  public final static native void StatusEndEvent_failure_set(long jarg1, StatusEndEvent jarg1_, String jarg2);
  public final static native String StatusEndEvent_failure_get(long jarg1, StatusEndEvent jarg1_);
  public final static native long new_StatusEndEvent();
  public final static native void delete_StatusEndEvent(long jarg1);
  public final static native String StatusGeoipLookupEvent_key_get();
  public final static native void StatusGeoipLookupEvent_probeIp_set(long jarg1, StatusGeoipLookupEvent jarg1_, String jarg2);
  public final static native String StatusGeoipLookupEvent_probeIp_get(long jarg1, StatusGeoipLookupEvent jarg1_);
  public final static native void StatusGeoipLookupEvent_probeAsn_set(long jarg1, StatusGeoipLookupEvent jarg1_, String jarg2);
  public final static native String StatusGeoipLookupEvent_probeAsn_get(long jarg1, StatusGeoipLookupEvent jarg1_);
  public final static native void StatusGeoipLookupEvent_probeCc_set(long jarg1, StatusGeoipLookupEvent jarg1_, String jarg2);
  public final static native String StatusGeoipLookupEvent_probeCc_get(long jarg1, StatusGeoipLookupEvent jarg1_);
  public final static native void StatusGeoipLookupEvent_probeNetworkName_set(long jarg1, StatusGeoipLookupEvent jarg1_, String jarg2);
  public final static native String StatusGeoipLookupEvent_probeNetworkName_get(long jarg1, StatusGeoipLookupEvent jarg1_);
  public final static native long new_StatusGeoipLookupEvent();
  public final static native void delete_StatusGeoipLookupEvent(long jarg1);
  public final static native String StatusProgressEvent_key_get();
  public final static native void StatusProgressEvent_percentage_set(long jarg1, StatusProgressEvent jarg1_, double jarg2);
  public final static native double StatusProgressEvent_percentage_get(long jarg1, StatusProgressEvent jarg1_);
  public final static native void StatusProgressEvent_message_set(long jarg1, StatusProgressEvent jarg1_, String jarg2);
  public final static native String StatusProgressEvent_message_get(long jarg1, StatusProgressEvent jarg1_);
  public final static native long new_StatusProgressEvent();
  public final static native void delete_StatusProgressEvent(long jarg1);
  public final static native String StatusQueuedEvent_key_get();
  public final static native long new_StatusQueuedEvent();
  public final static native void delete_StatusQueuedEvent(long jarg1);
  public final static native String StatusMeasurementStartEvent_key_get();
  public final static native void StatusMeasurementStartEvent_idx_set(long jarg1, StatusMeasurementStartEvent jarg1_, long jarg2);
  public final static native long StatusMeasurementStartEvent_idx_get(long jarg1, StatusMeasurementStartEvent jarg1_);
  public final static native void StatusMeasurementStartEvent_input_set(long jarg1, StatusMeasurementStartEvent jarg1_, String jarg2);
  public final static native String StatusMeasurementStartEvent_input_get(long jarg1, StatusMeasurementStartEvent jarg1_);
  public final static native long new_StatusMeasurementStartEvent();
  public final static native void delete_StatusMeasurementStartEvent(long jarg1);
  public final static native String StatusMeasurementSubmissionEvent_key_get();
  public final static native void StatusMeasurementSubmissionEvent_idx_set(long jarg1, StatusMeasurementSubmissionEvent jarg1_, long jarg2);
  public final static native long StatusMeasurementSubmissionEvent_idx_get(long jarg1, StatusMeasurementSubmissionEvent jarg1_);
  public final static native long new_StatusMeasurementSubmissionEvent();
  public final static native void delete_StatusMeasurementSubmissionEvent(long jarg1);
  public final static native String StatusMeasurementDoneEvent_key_get();
  public final static native void StatusMeasurementDoneEvent_idx_set(long jarg1, StatusMeasurementDoneEvent jarg1_, long jarg2);
  public final static native long StatusMeasurementDoneEvent_idx_get(long jarg1, StatusMeasurementDoneEvent jarg1_);
  public final static native long new_StatusMeasurementDoneEvent();
  public final static native void delete_StatusMeasurementDoneEvent(long jarg1);
  public final static native String StatusReportCloseEvent_key_get();
  public final static native void StatusReportCloseEvent_reportId_set(long jarg1, StatusReportCloseEvent jarg1_, String jarg2);
  public final static native String StatusReportCloseEvent_reportId_get(long jarg1, StatusReportCloseEvent jarg1_);
  public final static native long new_StatusReportCloseEvent();
  public final static native void delete_StatusReportCloseEvent(long jarg1);
  public final static native String StatusReportCreateEvent_key_get();
  public final static native void StatusReportCreateEvent_reportId_set(long jarg1, StatusReportCreateEvent jarg1_, String jarg2);
  public final static native String StatusReportCreateEvent_reportId_get(long jarg1, StatusReportCreateEvent jarg1_);
  public final static native long new_StatusReportCreateEvent();
  public final static native void delete_StatusReportCreateEvent(long jarg1);
  public final static native String StatusResolverLookupEvent_key_get();
  public final static native void StatusResolverLookupEvent_ipAddress_set(long jarg1, StatusResolverLookupEvent jarg1_, String jarg2);
  public final static native String StatusResolverLookupEvent_ipAddress_get(long jarg1, StatusResolverLookupEvent jarg1_);
  public final static native long new_StatusResolverLookupEvent();
  public final static native void delete_StatusResolverLookupEvent(long jarg1);
  public final static native String StatusStartedEvent_key_get();
  public final static native long new_StatusStartedEvent();
  public final static native void delete_StatusStartedEvent(long jarg1);
  public final static native String StatusUpdatePerformanceEvent_key_get();
  public final static native void StatusUpdatePerformanceEvent_direction_set(long jarg1, StatusUpdatePerformanceEvent jarg1_, String jarg2);
  public final static native String StatusUpdatePerformanceEvent_direction_get(long jarg1, StatusUpdatePerformanceEvent jarg1_);
  public final static native void StatusUpdatePerformanceEvent_elapsed_set(long jarg1, StatusUpdatePerformanceEvent jarg1_, double jarg2);
  public final static native double StatusUpdatePerformanceEvent_elapsed_get(long jarg1, StatusUpdatePerformanceEvent jarg1_);
  public final static native void StatusUpdatePerformanceEvent_numStreams_set(long jarg1, StatusUpdatePerformanceEvent jarg1_, long jarg2);
  public final static native long StatusUpdatePerformanceEvent_numStreams_get(long jarg1, StatusUpdatePerformanceEvent jarg1_);
  public final static native void StatusUpdatePerformanceEvent_speedKbps_set(long jarg1, StatusUpdatePerformanceEvent jarg1_, double jarg2);
  public final static native double StatusUpdatePerformanceEvent_speedKbps_get(long jarg1, StatusUpdatePerformanceEvent jarg1_);
  public final static native long new_StatusUpdatePerformanceEvent();
  public final static native void delete_StatusUpdatePerformanceEvent(long jarg1);
  public final static native String StatusUpdateWebsitesEvent_key_get();
  public final static native void StatusUpdateWebsitesEvent_url_set(long jarg1, StatusUpdateWebsitesEvent jarg1_, String jarg2);
  public final static native String StatusUpdateWebsitesEvent_url_get(long jarg1, StatusUpdateWebsitesEvent jarg1_);
  public final static native void StatusUpdateWebsitesEvent_status_set(long jarg1, StatusUpdateWebsitesEvent jarg1_, String jarg2);
  public final static native String StatusUpdateWebsitesEvent_status_get(long jarg1, StatusUpdateWebsitesEvent jarg1_);
  public final static native long new_StatusUpdateWebsitesEvent();
  public final static native void delete_StatusUpdateWebsitesEvent(long jarg1);
  public final static native String TaskTerminatedEvent_key_get();
  public final static native long new_TaskTerminatedEvent();
  public final static native void delete_TaskTerminatedEvent(long jarg1);
  public final static native void Settings_logFilepath_set(long jarg1, Settings jarg1_, String jarg2);
  public final static native String Settings_logFilepath_get(long jarg1, Settings jarg1_);
  public final static native void Settings_logLevel_set(long jarg1, Settings jarg1_, String jarg2);
  public final static native String Settings_logLevel_get(long jarg1, Settings jarg1_);
  public final static native void Settings_outputFilepath_set(long jarg1, Settings jarg1_, String jarg2);
  public final static native String Settings_outputFilepath_get(long jarg1, Settings jarg1_);
  public final static native void Settings_bouncerBaseUrl_set(long jarg1, Settings jarg1_, String jarg2);
  public final static native String Settings_bouncerBaseUrl_get(long jarg1, Settings jarg1_);
  public final static native void Settings_collectorBaseUrl_set(long jarg1, Settings jarg1_, String jarg2);
  public final static native String Settings_collectorBaseUrl_get(long jarg1, Settings jarg1_);
  public final static native void Settings_dnsNameserver_set(long jarg1, Settings jarg1_, String jarg2);
  public final static native String Settings_dnsNameserver_get(long jarg1, Settings jarg1_);
  public final static native void Settings_dnsEngine_set(long jarg1, Settings jarg1_, String jarg2);
  public final static native String Settings_dnsEngine_get(long jarg1, Settings jarg1_);
  public final static native void Settings_geoipAsnPath_set(long jarg1, Settings jarg1_, String jarg2);
  public final static native String Settings_geoipAsnPath_get(long jarg1, Settings jarg1_);
  public final static native void Settings_geoipCountryPath_set(long jarg1, Settings jarg1_, String jarg2);
  public final static native String Settings_geoipCountryPath_get(long jarg1, Settings jarg1_);
  public final static native void Settings_ignoreBouncerError_set(long jarg1, Settings jarg1_, boolean jarg2);
  public final static native boolean Settings_ignoreBouncerError_get(long jarg1, Settings jarg1_);
  public final static native void Settings_ignoreOpenReportError_set(long jarg1, Settings jarg1_, boolean jarg2);
  public final static native boolean Settings_ignoreOpenReportError_get(long jarg1, Settings jarg1_);
  public final static native void Settings_maxRuntime_set(long jarg1, Settings jarg1_, double jarg2);
  public final static native double Settings_maxRuntime_get(long jarg1, Settings jarg1_);
  public final static native void Settings_netCaBundlePath_set(long jarg1, Settings jarg1_, String jarg2);
  public final static native String Settings_netCaBundlePath_get(long jarg1, Settings jarg1_);
  public final static native void Settings_netTimeout_set(long jarg1, Settings jarg1_, double jarg2);
  public final static native double Settings_netTimeout_get(long jarg1, Settings jarg1_);
  public final static native void Settings_noBouncer_set(long jarg1, Settings jarg1_, boolean jarg2);
  public final static native boolean Settings_noBouncer_get(long jarg1, Settings jarg1_);
  public final static native void Settings_noCollector_set(long jarg1, Settings jarg1_, boolean jarg2);
  public final static native boolean Settings_noCollector_get(long jarg1, Settings jarg1_);
  public final static native void Settings_noAsnLookup_set(long jarg1, Settings jarg1_, boolean jarg2);
  public final static native boolean Settings_noAsnLookup_get(long jarg1, Settings jarg1_);
  public final static native void Settings_noCcLookup_set(long jarg1, Settings jarg1_, boolean jarg2);
  public final static native boolean Settings_noCcLookup_get(long jarg1, Settings jarg1_);
  public final static native void Settings_noIpLookup_set(long jarg1, Settings jarg1_, boolean jarg2);
  public final static native boolean Settings_noIpLookup_get(long jarg1, Settings jarg1_);
  public final static native void Settings_noFileReport_set(long jarg1, Settings jarg1_, boolean jarg2);
  public final static native boolean Settings_noFileReport_get(long jarg1, Settings jarg1_);
  public final static native void Settings_noResolverLookup_set(long jarg1, Settings jarg1_, boolean jarg2);
  public final static native boolean Settings_noResolverLookup_get(long jarg1, Settings jarg1_);
  public final static native void Settings_probeAsn_set(long jarg1, Settings jarg1_, String jarg2);
  public final static native String Settings_probeAsn_get(long jarg1, Settings jarg1_);
  public final static native void Settings_probeCc_set(long jarg1, Settings jarg1_, String jarg2);
  public final static native String Settings_probeCc_get(long jarg1, Settings jarg1_);
  public final static native void Settings_probeIp_set(long jarg1, Settings jarg1_, String jarg2);
  public final static native String Settings_probeIp_get(long jarg1, Settings jarg1_);
  public final static native void Settings_randomizeInput_set(long jarg1, Settings jarg1_, boolean jarg2);
  public final static native boolean Settings_randomizeInput_get(long jarg1, Settings jarg1_);
  public final static native void Settings_saveRealProbeAsn_set(long jarg1, Settings jarg1_, boolean jarg2);
  public final static native boolean Settings_saveRealProbeAsn_get(long jarg1, Settings jarg1_);
  public final static native void Settings_saveRealProbeCc_set(long jarg1, Settings jarg1_, boolean jarg2);
  public final static native boolean Settings_saveRealProbeCc_get(long jarg1, Settings jarg1_);
  public final static native void Settings_saveRealProbeIp_set(long jarg1, Settings jarg1_, boolean jarg2);
  public final static native boolean Settings_saveRealProbeIp_get(long jarg1, Settings jarg1_);
  public final static native void Settings_saveRealResolverIp_set(long jarg1, Settings jarg1_, boolean jarg2);
  public final static native boolean Settings_saveRealResolverIp_get(long jarg1, Settings jarg1_);
  public final static native void Settings_softwareName_set(long jarg1, Settings jarg1_, String jarg2);
  public final static native String Settings_softwareName_get(long jarg1, Settings jarg1_);
  public final static native void Settings_softwareVersion_set(long jarg1, Settings jarg1_, String jarg2);
  public final static native String Settings_softwareVersion_get(long jarg1, Settings jarg1_);
  public final static native void delete_Settings(long jarg1);
  public final static native void Settings_addAnnotation(long jarg1, Settings jarg1_, String jarg2, String jarg3);
  public final static native void Settings_addInput(long jarg1, Settings jarg1_, String jarg2);
  public final static native void Settings_addInputFilepath(long jarg1, Settings jarg1_, String jarg2);
  public final static native long new_Settings();
  public final static native void Settings_director_connect(Settings obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void Settings_change_ownership(Settings obj, long cptr, boolean take_or_release);
  public final static native long new_Nettest(long jarg1, Settings jarg1_);
  public final static native void delete_Nettest(long jarg1);
  public final static native boolean Nettest_run(long jarg1, Nettest jarg1_);
  public final static native void Nettest_interrupt(long jarg1, Nettest jarg1_);
  public final static native void Nettest_onFailureAsnLookup(long jarg1, Nettest jarg1_, long jarg2, FailureAsnLookupEvent jarg2_);
  public final static native void Nettest_onFailureAsnLookupSwigExplicitNettest(long jarg1, Nettest jarg1_, long jarg2, FailureAsnLookupEvent jarg2_);
  public final static native void Nettest_onFailureCcLookup(long jarg1, Nettest jarg1_, long jarg2, FailureCcLookupEvent jarg2_);
  public final static native void Nettest_onFailureCcLookupSwigExplicitNettest(long jarg1, Nettest jarg1_, long jarg2, FailureCcLookupEvent jarg2_);
  public final static native void Nettest_onFailureIpLookup(long jarg1, Nettest jarg1_, long jarg2, FailureIpLookupEvent jarg2_);
  public final static native void Nettest_onFailureIpLookupSwigExplicitNettest(long jarg1, Nettest jarg1_, long jarg2, FailureIpLookupEvent jarg2_);
  public final static native void Nettest_onFailureMeasurement(long jarg1, Nettest jarg1_, long jarg2, FailureMeasurementEvent jarg2_);
  public final static native void Nettest_onFailureMeasurementSwigExplicitNettest(long jarg1, Nettest jarg1_, long jarg2, FailureMeasurementEvent jarg2_);
  public final static native void Nettest_onFailureMeasurementSubmission(long jarg1, Nettest jarg1_, long jarg2, FailureMeasurementSubmissionEvent jarg2_);
  public final static native void Nettest_onFailureMeasurementSubmissionSwigExplicitNettest(long jarg1, Nettest jarg1_, long jarg2, FailureMeasurementSubmissionEvent jarg2_);
  public final static native void Nettest_onFailureReportCreate(long jarg1, Nettest jarg1_, long jarg2, FailureReportCreateEvent jarg2_);
  public final static native void Nettest_onFailureReportCreateSwigExplicitNettest(long jarg1, Nettest jarg1_, long jarg2, FailureReportCreateEvent jarg2_);
  public final static native void Nettest_onFailureReportClose(long jarg1, Nettest jarg1_, long jarg2, FailureReportCloseEvent jarg2_);
  public final static native void Nettest_onFailureReportCloseSwigExplicitNettest(long jarg1, Nettest jarg1_, long jarg2, FailureReportCloseEvent jarg2_);
  public final static native void Nettest_onFailureResolverLookup(long jarg1, Nettest jarg1_, long jarg2, FailureResolverLookupEvent jarg2_);
  public final static native void Nettest_onFailureResolverLookupSwigExplicitNettest(long jarg1, Nettest jarg1_, long jarg2, FailureResolverLookupEvent jarg2_);
  public final static native void Nettest_onFailureStartup(long jarg1, Nettest jarg1_, long jarg2, FailureStartupEvent jarg2_);
  public final static native void Nettest_onFailureStartupSwigExplicitNettest(long jarg1, Nettest jarg1_, long jarg2, FailureStartupEvent jarg2_);
  public final static native void Nettest_onLog(long jarg1, Nettest jarg1_, long jarg2, LogEvent jarg2_);
  public final static native void Nettest_onLogSwigExplicitNettest(long jarg1, Nettest jarg1_, long jarg2, LogEvent jarg2_);
  public final static native void Nettest_onMeasurement(long jarg1, Nettest jarg1_, long jarg2, MeasurementEvent jarg2_);
  public final static native void Nettest_onMeasurementSwigExplicitNettest(long jarg1, Nettest jarg1_, long jarg2, MeasurementEvent jarg2_);
  public final static native void Nettest_onStatusEnd(long jarg1, Nettest jarg1_, long jarg2, StatusEndEvent jarg2_);
  public final static native void Nettest_onStatusEndSwigExplicitNettest(long jarg1, Nettest jarg1_, long jarg2, StatusEndEvent jarg2_);
  public final static native void Nettest_onStatusGeoipLookup(long jarg1, Nettest jarg1_, long jarg2, StatusGeoipLookupEvent jarg2_);
  public final static native void Nettest_onStatusGeoipLookupSwigExplicitNettest(long jarg1, Nettest jarg1_, long jarg2, StatusGeoipLookupEvent jarg2_);
  public final static native void Nettest_onStatusProgress(long jarg1, Nettest jarg1_, long jarg2, StatusProgressEvent jarg2_);
  public final static native void Nettest_onStatusProgressSwigExplicitNettest(long jarg1, Nettest jarg1_, long jarg2, StatusProgressEvent jarg2_);
  public final static native void Nettest_onStatusQueued(long jarg1, Nettest jarg1_, long jarg2, StatusQueuedEvent jarg2_);
  public final static native void Nettest_onStatusQueuedSwigExplicitNettest(long jarg1, Nettest jarg1_, long jarg2, StatusQueuedEvent jarg2_);
  public final static native void Nettest_onStatusMeasurementStart(long jarg1, Nettest jarg1_, long jarg2, StatusMeasurementStartEvent jarg2_);
  public final static native void Nettest_onStatusMeasurementStartSwigExplicitNettest(long jarg1, Nettest jarg1_, long jarg2, StatusMeasurementStartEvent jarg2_);
  public final static native void Nettest_onStatusMeasurementSubmission(long jarg1, Nettest jarg1_, long jarg2, StatusMeasurementSubmissionEvent jarg2_);
  public final static native void Nettest_onStatusMeasurementSubmissionSwigExplicitNettest(long jarg1, Nettest jarg1_, long jarg2, StatusMeasurementSubmissionEvent jarg2_);
  public final static native void Nettest_onStatusMeasurementDone(long jarg1, Nettest jarg1_, long jarg2, StatusMeasurementDoneEvent jarg2_);
  public final static native void Nettest_onStatusMeasurementDoneSwigExplicitNettest(long jarg1, Nettest jarg1_, long jarg2, StatusMeasurementDoneEvent jarg2_);
  public final static native void Nettest_onStatusReportClose(long jarg1, Nettest jarg1_, long jarg2, StatusReportCloseEvent jarg2_);
  public final static native void Nettest_onStatusReportCloseSwigExplicitNettest(long jarg1, Nettest jarg1_, long jarg2, StatusReportCloseEvent jarg2_);
  public final static native void Nettest_onStatusReportCreate(long jarg1, Nettest jarg1_, long jarg2, StatusReportCreateEvent jarg2_);
  public final static native void Nettest_onStatusReportCreateSwigExplicitNettest(long jarg1, Nettest jarg1_, long jarg2, StatusReportCreateEvent jarg2_);
  public final static native void Nettest_onStatusResolverLookup(long jarg1, Nettest jarg1_, long jarg2, StatusResolverLookupEvent jarg2_);
  public final static native void Nettest_onStatusResolverLookupSwigExplicitNettest(long jarg1, Nettest jarg1_, long jarg2, StatusResolverLookupEvent jarg2_);
  public final static native void Nettest_onStatusStarted(long jarg1, Nettest jarg1_, long jarg2, StatusStartedEvent jarg2_);
  public final static native void Nettest_onStatusStartedSwigExplicitNettest(long jarg1, Nettest jarg1_, long jarg2, StatusStartedEvent jarg2_);
  public final static native void Nettest_onStatusUpdatePerformance(long jarg1, Nettest jarg1_, long jarg2, StatusUpdatePerformanceEvent jarg2_);
  public final static native void Nettest_onStatusUpdatePerformanceSwigExplicitNettest(long jarg1, Nettest jarg1_, long jarg2, StatusUpdatePerformanceEvent jarg2_);
  public final static native void Nettest_onStatusUpdateWebsites(long jarg1, Nettest jarg1_, long jarg2, StatusUpdateWebsitesEvent jarg2_);
  public final static native void Nettest_onStatusUpdateWebsitesSwigExplicitNettest(long jarg1, Nettest jarg1_, long jarg2, StatusUpdateWebsitesEvent jarg2_);
  public final static native void Nettest_onTaskTerminated(long jarg1, Nettest jarg1_, long jarg2, TaskTerminatedEvent jarg2_);
  public final static native void Nettest_onTaskTerminatedSwigExplicitNettest(long jarg1, Nettest jarg1_, long jarg2, TaskTerminatedEvent jarg2_);
  public final static native void Nettest_director_connect(Nettest obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void Nettest_change_ownership(Nettest obj, long cptr, boolean take_or_release);
  public final static native String CaptivePortalSettings_name_get();
  public final static native long new_CaptivePortalSettings();
  public final static native void delete_CaptivePortalSettings(long jarg1);
  public final static native void CaptivePortalSettings_director_connect(CaptivePortalSettings obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void CaptivePortalSettings_change_ownership(CaptivePortalSettings obj, long cptr, boolean take_or_release);
  public final static native String DashSettings_name_get();
  public final static native long new_DashSettings();
  public final static native void delete_DashSettings(long jarg1);
  public final static native void DashSettings_director_connect(DashSettings obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void DashSettings_change_ownership(DashSettings obj, long cptr, boolean take_or_release);
  public final static native String DnsInjectionSettings_name_get();
  public final static native long new_DnsInjectionSettings();
  public final static native void delete_DnsInjectionSettings(long jarg1);
  public final static native void DnsInjectionSettings_director_connect(DnsInjectionSettings obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void DnsInjectionSettings_change_ownership(DnsInjectionSettings obj, long cptr, boolean take_or_release);
  public final static native String FacebookMessengerSettings_name_get();
  public final static native long new_FacebookMessengerSettings();
  public final static native void delete_FacebookMessengerSettings(long jarg1);
  public final static native void FacebookMessengerSettings_director_connect(FacebookMessengerSettings obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void FacebookMessengerSettings_change_ownership(FacebookMessengerSettings obj, long cptr, boolean take_or_release);
  public final static native String HttpHeaderFieldManipulationSettings_name_get();
  public final static native long new_HttpHeaderFieldManipulationSettings();
  public final static native void delete_HttpHeaderFieldManipulationSettings(long jarg1);
  public final static native void HttpHeaderFieldManipulationSettings_director_connect(HttpHeaderFieldManipulationSettings obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HttpHeaderFieldManipulationSettings_change_ownership(HttpHeaderFieldManipulationSettings obj, long cptr, boolean take_or_release);
  public final static native String HttpInvalidRequestLineSettings_name_get();
  public final static native long new_HttpInvalidRequestLineSettings();
  public final static native void delete_HttpInvalidRequestLineSettings(long jarg1);
  public final static native void HttpInvalidRequestLineSettings_director_connect(HttpInvalidRequestLineSettings obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void HttpInvalidRequestLineSettings_change_ownership(HttpInvalidRequestLineSettings obj, long cptr, boolean take_or_release);
  public final static native String MeekFrontedRequestsSettings_name_get();
  public final static native long new_MeekFrontedRequestsSettings();
  public final static native void delete_MeekFrontedRequestsSettings(long jarg1);
  public final static native void MeekFrontedRequestsSettings_director_connect(MeekFrontedRequestsSettings obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void MeekFrontedRequestsSettings_change_ownership(MeekFrontedRequestsSettings obj, long cptr, boolean take_or_release);
  public final static native String MultiNdtSettings_name_get();
  public final static native long new_MultiNdtSettings();
  public final static native void delete_MultiNdtSettings(long jarg1);
  public final static native void MultiNdtSettings_director_connect(MultiNdtSettings obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void MultiNdtSettings_change_ownership(MultiNdtSettings obj, long cptr, boolean take_or_release);
  public final static native String NdtSettings_name_get();
  public final static native long new_NdtSettings();
  public final static native void delete_NdtSettings(long jarg1);
  public final static native void NdtSettings_director_connect(NdtSettings obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void NdtSettings_change_ownership(NdtSettings obj, long cptr, boolean take_or_release);
  public final static native String TcpConnectSettings_name_get();
  public final static native long new_TcpConnectSettings();
  public final static native void delete_TcpConnectSettings(long jarg1);
  public final static native void TcpConnectSettings_director_connect(TcpConnectSettings obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TcpConnectSettings_change_ownership(TcpConnectSettings obj, long cptr, boolean take_or_release);
  public final static native String TelegramSettings_name_get();
  public final static native long new_TelegramSettings();
  public final static native void delete_TelegramSettings(long jarg1);
  public final static native void TelegramSettings_director_connect(TelegramSettings obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void TelegramSettings_change_ownership(TelegramSettings obj, long cptr, boolean take_or_release);
  public final static native String WebConnectivitySettings_name_get();
  public final static native long new_WebConnectivitySettings();
  public final static native void delete_WebConnectivitySettings(long jarg1);
  public final static native void WebConnectivitySettings_director_connect(WebConnectivitySettings obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void WebConnectivitySettings_change_ownership(WebConnectivitySettings obj, long cptr, boolean take_or_release);
  public final static native String WhatsappSettings_name_get();
  public final static native void WhatsappSettings_allEndpoints_set(long jarg1, WhatsappSettings jarg1_, boolean jarg2);
  public final static native boolean WhatsappSettings_allEndpoints_get(long jarg1, WhatsappSettings jarg1_);
  public final static native long new_WhatsappSettings();
  public final static native void delete_WhatsappSettings(long jarg1);
  public final static native void WhatsappSettings_director_connect(WhatsappSettings obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void WhatsappSettings_change_ownership(WhatsappSettings obj, long cptr, boolean take_or_release);
  public final static native long CaptivePortalSettings_SWIGUpcast(long jarg1);
  public final static native long DashSettings_SWIGUpcast(long jarg1);
  public final static native long DnsInjectionSettings_SWIGUpcast(long jarg1);
  public final static native long FacebookMessengerSettings_SWIGUpcast(long jarg1);
  public final static native long HttpHeaderFieldManipulationSettings_SWIGUpcast(long jarg1);
  public final static native long HttpInvalidRequestLineSettings_SWIGUpcast(long jarg1);
  public final static native long MeekFrontedRequestsSettings_SWIGUpcast(long jarg1);
  public final static native long MultiNdtSettings_SWIGUpcast(long jarg1);
  public final static native long NdtSettings_SWIGUpcast(long jarg1);
  public final static native long TcpConnectSettings_SWIGUpcast(long jarg1);
  public final static native long TelegramSettings_SWIGUpcast(long jarg1);
  public final static native long WebConnectivitySettings_SWIGUpcast(long jarg1);
  public final static native long WhatsappSettings_SWIGUpcast(long jarg1);

  public static void SwigDirector_Nettest_onFailureAsnLookup(Nettest jself, long arg0) {
    jself.onFailureAsnLookup(new FailureAsnLookupEvent(arg0, true));
  }
  public static void SwigDirector_Nettest_onFailureCcLookup(Nettest jself, long arg0) {
    jself.onFailureCcLookup(new FailureCcLookupEvent(arg0, true));
  }
  public static void SwigDirector_Nettest_onFailureIpLookup(Nettest jself, long arg0) {
    jself.onFailureIpLookup(new FailureIpLookupEvent(arg0, true));
  }
  public static void SwigDirector_Nettest_onFailureMeasurement(Nettest jself, long arg0) {
    jself.onFailureMeasurement(new FailureMeasurementEvent(arg0, true));
  }
  public static void SwigDirector_Nettest_onFailureMeasurementSubmission(Nettest jself, long arg0) {
    jself.onFailureMeasurementSubmission(new FailureMeasurementSubmissionEvent(arg0, true));
  }
  public static void SwigDirector_Nettest_onFailureReportCreate(Nettest jself, long arg0) {
    jself.onFailureReportCreate(new FailureReportCreateEvent(arg0, true));
  }
  public static void SwigDirector_Nettest_onFailureReportClose(Nettest jself, long arg0) {
    jself.onFailureReportClose(new FailureReportCloseEvent(arg0, true));
  }
  public static void SwigDirector_Nettest_onFailureResolverLookup(Nettest jself, long arg0) {
    jself.onFailureResolverLookup(new FailureResolverLookupEvent(arg0, true));
  }
  public static void SwigDirector_Nettest_onFailureStartup(Nettest jself, long arg0) {
    jself.onFailureStartup(new FailureStartupEvent(arg0, true));
  }
  public static void SwigDirector_Nettest_onLog(Nettest jself, long arg0) {
    jself.onLog(new LogEvent(arg0, true));
  }
  public static void SwigDirector_Nettest_onMeasurement(Nettest jself, long arg0) {
    jself.onMeasurement(new MeasurementEvent(arg0, true));
  }
  public static void SwigDirector_Nettest_onStatusEnd(Nettest jself, long arg0) {
    jself.onStatusEnd(new StatusEndEvent(arg0, true));
  }
  public static void SwigDirector_Nettest_onStatusGeoipLookup(Nettest jself, long arg0) {
    jself.onStatusGeoipLookup(new StatusGeoipLookupEvent(arg0, true));
  }
  public static void SwigDirector_Nettest_onStatusProgress(Nettest jself, long arg0) {
    jself.onStatusProgress(new StatusProgressEvent(arg0, true));
  }
  public static void SwigDirector_Nettest_onStatusQueued(Nettest jself, long arg0) {
    jself.onStatusQueued(new StatusQueuedEvent(arg0, true));
  }
  public static void SwigDirector_Nettest_onStatusMeasurementStart(Nettest jself, long arg0) {
    jself.onStatusMeasurementStart(new StatusMeasurementStartEvent(arg0, true));
  }
  public static void SwigDirector_Nettest_onStatusMeasurementSubmission(Nettest jself, long arg0) {
    jself.onStatusMeasurementSubmission(new StatusMeasurementSubmissionEvent(arg0, true));
  }
  public static void SwigDirector_Nettest_onStatusMeasurementDone(Nettest jself, long arg0) {
    jself.onStatusMeasurementDone(new StatusMeasurementDoneEvent(arg0, true));
  }
  public static void SwigDirector_Nettest_onStatusReportClose(Nettest jself, long arg0) {
    jself.onStatusReportClose(new StatusReportCloseEvent(arg0, true));
  }
  public static void SwigDirector_Nettest_onStatusReportCreate(Nettest jself, long arg0) {
    jself.onStatusReportCreate(new StatusReportCreateEvent(arg0, true));
  }
  public static void SwigDirector_Nettest_onStatusResolverLookup(Nettest jself, long arg0) {
    jself.onStatusResolverLookup(new StatusResolverLookupEvent(arg0, true));
  }
  public static void SwigDirector_Nettest_onStatusStarted(Nettest jself, long arg0) {
    jself.onStatusStarted(new StatusStartedEvent(arg0, true));
  }
  public static void SwigDirector_Nettest_onStatusUpdatePerformance(Nettest jself, long arg0) {
    jself.onStatusUpdatePerformance(new StatusUpdatePerformanceEvent(arg0, true));
  }
  public static void SwigDirector_Nettest_onStatusUpdateWebsites(Nettest jself, long arg0) {
    jself.onStatusUpdateWebsites(new StatusUpdateWebsitesEvent(arg0, true));
  }
  public static void SwigDirector_Nettest_onTaskTerminated(Nettest jself, long arg0) {
    jself.onTaskTerminated(new TaskTerminatedEvent(arg0, true));
  }

  private final static native void swig_module_init();
  static {
    swig_module_init();
  }
}
