/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION)
#include <iostream>
#endif

#include <exception>

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* Local JNI reference deleter */
  class LocalRefGuard {
    JNIEnv *jenv_;
    jobject jobj_;

    // non-copyable
    LocalRefGuard(const LocalRefGuard &);
    LocalRefGuard &operator=(const LocalRefGuard &);
  public:
    LocalRefGuard(JNIEnv *jenv, jobject jobj): jenv_(jenv), jobj_(jobj) {}
    ~LocalRefGuard() {
      if (jobj_)
        jenv_->DeleteLocalRef(jobj_);
    }
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
      LocalRefGuard ref_deleter(jenv, jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };

  // Zero initialized bool array
  template<size_t N> class BoolArray {
    bool array_[N];
  public:
    BoolArray() {
      memset(array_, 0, sizeof(array_));
    }
    bool& operator[](size_t n) {
      return array_[n];
    }
    bool operator[](size_t n) const {
      return array_[n];
    }
  };

  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(0) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, NULL);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    const char *message() const {
      return message_.c_str("Could not get exception message in JavaExceptionMessage");
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = NULL;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == NULL && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : classname_(0), msg_(0) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (throwable) {
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(0);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message());
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : classname_(0), msg_(copystr(msg ? msg : "Unspecified DirectorException message")) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_;
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void raiseJavaException(JNIEnv *jenv) const {
      if (jenv) {
	jenv->ExceptionClear();

	jmethodID ctorMethodID = 0;
	jclass throwableclass = 0;
        if (classname_) {
          throwableclass = jenv->FindClass(classname_);
          if (throwableclass)
            ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
	}

	if (ctorMethodID) {
	  jenv->ThrowNew(throwableclass, what());
	} else {
	  SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
	}
      }
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = 0;
      if (srcmsg) {
	size_t msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  SWIGINTERN bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }
}

namespace Swig {
  namespace {
    jclass jclass_ApiJNI = NULL;
    jmethodID director_method_ids[390];
  }
}

#include <measurement_kit/nettest.hpp>


#include <string>


#include <stdint.h>		// Use the C99 official header


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <typeinfo>
#include <stdexcept>


#include <utility>

SWIGINTERN void mk_nettest_common_Settings_addAnnotation(mk::nettest::common::Settings *self,std::string key,std::string value){
    std::swap(self->annotations[key], value);
  }
SWIGINTERN void mk_nettest_common_NeedsInputSettings_addInput(mk::nettest::common::NeedsInputSettings *self,std::string value){
    self->inputs.push_back(std::move(value));
  }
SWIGINTERN void mk_nettest_common_NeedsInputSettings_addInputFilepath(mk::nettest::common::NeedsInputSettings *self,std::string value){
    self->input_filepaths.push_back(std::move(value));
  }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "nettest_wrap.h"

SwigDirector_NettestBase::SwigDirector_NettestBase(JNIEnv *jenv) : mk::nettest::common::Nettest(), Swig::Director(jenv) {
}

SwigDirector_NettestBase::~SwigDirector_NettestBase() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_NettestBase::run() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return mk::nettest::common::Nettest::run();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[0], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::Nettest::run ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_NettestBase::on_failure_asn_lookup(mk::nettest::events::FailureAsnLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[1]) {
    mk::nettest::common::Nettest::on_failure_asn_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureAsnLookupEvent **)&jarg0) = new mk::nettest::events::FailureAsnLookupEvent((const mk::nettest::events::FailureAsnLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[1], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::Nettest::on_failure_asn_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBase::on_failure_cc_lookup(mk::nettest::events::FailureCcLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[2]) {
    mk::nettest::common::Nettest::on_failure_cc_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureCcLookupEvent **)&jarg0) = new mk::nettest::events::FailureCcLookupEvent((const mk::nettest::events::FailureCcLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[2], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::Nettest::on_failure_cc_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBase::on_failure_ip_lookup(mk::nettest::events::FailureIpLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[3]) {
    mk::nettest::common::Nettest::on_failure_ip_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureIpLookupEvent **)&jarg0) = new mk::nettest::events::FailureIpLookupEvent((const mk::nettest::events::FailureIpLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[3], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::Nettest::on_failure_ip_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBase::on_failure_measurement(mk::nettest::events::FailureMeasurementEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[4]) {
    mk::nettest::common::Nettest::on_failure_measurement(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureMeasurementEvent **)&jarg0) = new mk::nettest::events::FailureMeasurementEvent((const mk::nettest::events::FailureMeasurementEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[4], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::Nettest::on_failure_measurement ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBase::on_failure_measurement_submission(mk::nettest::events::FailureMeasurementSubmissionEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[5]) {
    mk::nettest::common::Nettest::on_failure_measurement_submission(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureMeasurementSubmissionEvent **)&jarg0) = new mk::nettest::events::FailureMeasurementSubmissionEvent((const mk::nettest::events::FailureMeasurementSubmissionEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[5], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::Nettest::on_failure_measurement_submission ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBase::on_failure_report_create(mk::nettest::events::FailureReportCreateEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[6]) {
    mk::nettest::common::Nettest::on_failure_report_create(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureReportCreateEvent **)&jarg0) = new mk::nettest::events::FailureReportCreateEvent((const mk::nettest::events::FailureReportCreateEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[6], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::Nettest::on_failure_report_create ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBase::on_failure_report_close(mk::nettest::events::FailureReportCloseEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[7]) {
    mk::nettest::common::Nettest::on_failure_report_close(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureReportCloseEvent **)&jarg0) = new mk::nettest::events::FailureReportCloseEvent((const mk::nettest::events::FailureReportCloseEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[7], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::Nettest::on_failure_report_close ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBase::on_failure_resolver_lookup(mk::nettest::events::FailureResolverLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[8]) {
    mk::nettest::common::Nettest::on_failure_resolver_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureResolverLookupEvent **)&jarg0) = new mk::nettest::events::FailureResolverLookupEvent((const mk::nettest::events::FailureResolverLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[8], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::Nettest::on_failure_resolver_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBase::on_failure_startup(mk::nettest::events::FailureStartupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[9]) {
    mk::nettest::common::Nettest::on_failure_startup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureStartupEvent **)&jarg0) = new mk::nettest::events::FailureStartupEvent((const mk::nettest::events::FailureStartupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[9], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::Nettest::on_failure_startup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBase::on_log(mk::nettest::events::LogEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[10]) {
    mk::nettest::common::Nettest::on_log(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::LogEvent **)&jarg0) = new mk::nettest::events::LogEvent((const mk::nettest::events::LogEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[10], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::Nettest::on_log ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBase::on_measurement(mk::nettest::events::MeasurementEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[11]) {
    mk::nettest::common::Nettest::on_measurement(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::MeasurementEvent **)&jarg0) = new mk::nettest::events::MeasurementEvent((const mk::nettest::events::MeasurementEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[11], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::Nettest::on_measurement ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBase::on_status_end(mk::nettest::events::StatusEndEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[12]) {
    mk::nettest::common::Nettest::on_status_end(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusEndEvent **)&jarg0) = new mk::nettest::events::StatusEndEvent((const mk::nettest::events::StatusEndEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[12], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::Nettest::on_status_end ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBase::on_status_geoip_lookup(mk::nettest::events::StatusGeoipLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[13]) {
    mk::nettest::common::Nettest::on_status_geoip_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusGeoipLookupEvent **)&jarg0) = new mk::nettest::events::StatusGeoipLookupEvent((const mk::nettest::events::StatusGeoipLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[13], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::Nettest::on_status_geoip_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBase::on_status_progress(mk::nettest::events::StatusProgressEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[14]) {
    mk::nettest::common::Nettest::on_status_progress(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusProgressEvent **)&jarg0) = new mk::nettest::events::StatusProgressEvent((const mk::nettest::events::StatusProgressEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[14], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::Nettest::on_status_progress ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBase::on_status_queued(mk::nettest::events::StatusQueuedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[15]) {
    mk::nettest::common::Nettest::on_status_queued(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusQueuedEvent **)&jarg0) = new mk::nettest::events::StatusQueuedEvent((const mk::nettest::events::StatusQueuedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[15], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::Nettest::on_status_queued ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBase::on_status_measurement_start(mk::nettest::events::StatusMeasurementStartEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[16]) {
    mk::nettest::common::Nettest::on_status_measurement_start(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementStartEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementStartEvent((const mk::nettest::events::StatusMeasurementStartEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[16], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::Nettest::on_status_measurement_start ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBase::on_status_measurement_submission(mk::nettest::events::StatusMeasurementSubmissionEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[17]) {
    mk::nettest::common::Nettest::on_status_measurement_submission(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementSubmissionEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementSubmissionEvent((const mk::nettest::events::StatusMeasurementSubmissionEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[17], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::Nettest::on_status_measurement_submission ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBase::on_status_measurement_done(mk::nettest::events::StatusMeasurementDoneEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[18]) {
    mk::nettest::common::Nettest::on_status_measurement_done(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementDoneEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementDoneEvent((const mk::nettest::events::StatusMeasurementDoneEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[18], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::Nettest::on_status_measurement_done ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBase::on_status_report_close(mk::nettest::events::StatusReportCloseEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[19]) {
    mk::nettest::common::Nettest::on_status_report_close(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusReportCloseEvent **)&jarg0) = new mk::nettest::events::StatusReportCloseEvent((const mk::nettest::events::StatusReportCloseEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[19], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::Nettest::on_status_report_close ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBase::on_status_report_create(mk::nettest::events::StatusReportCreateEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[20]) {
    mk::nettest::common::Nettest::on_status_report_create(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusReportCreateEvent **)&jarg0) = new mk::nettest::events::StatusReportCreateEvent((const mk::nettest::events::StatusReportCreateEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[20], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::Nettest::on_status_report_create ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBase::on_status_resolver_lookup(mk::nettest::events::StatusResolverLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[21]) {
    mk::nettest::common::Nettest::on_status_resolver_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusResolverLookupEvent **)&jarg0) = new mk::nettest::events::StatusResolverLookupEvent((const mk::nettest::events::StatusResolverLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[21], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::Nettest::on_status_resolver_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBase::on_status_started(mk::nettest::events::StatusStartedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[22]) {
    mk::nettest::common::Nettest::on_status_started(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusStartedEvent **)&jarg0) = new mk::nettest::events::StatusStartedEvent((const mk::nettest::events::StatusStartedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[22], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::Nettest::on_status_started ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBase::on_task_terminated(mk::nettest::events::TaskTerminatedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[23]) {
    mk::nettest::common::Nettest::on_task_terminated(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::TaskTerminatedEvent **)&jarg0) = new mk::nettest::events::TaskTerminatedEvent((const mk::nettest::events::TaskTerminatedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[23], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::Nettest::on_task_terminated ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_NettestBase::dispatch_event(nlohmann::json doc) {
  return mk::nettest::common::Nettest::dispatch_event(doc);
}

void SwigDirector_NettestBase::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "run", "()Z", NULL 
    },
    {
      "onFailureAsnLookup", "(Lio/ooni/mk/nettest/swig/EventFailureAsnLookup;)V", NULL 
    },
    {
      "onFailureCcLookup", "(Lio/ooni/mk/nettest/swig/EventFailureCcLookup;)V", NULL 
    },
    {
      "onFailureIpLookup", "(Lio/ooni/mk/nettest/swig/EventFailureIpLookup;)V", NULL 
    },
    {
      "onFailureMeasurement", "(Lio/ooni/mk/nettest/swig/EventFailureMeasurement;)V", NULL 
    },
    {
      "onFailureMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/EventFailureMeasurementSubmission;)V", NULL 
    },
    {
      "onFailureReportCreate", "(Lio/ooni/mk/nettest/swig/EventFailureReportCreate;)V", NULL 
    },
    {
      "onFailureReportClose", "(Lio/ooni/mk/nettest/swig/EventFailureReportClose;)V", NULL 
    },
    {
      "onFailureResolverLookup", "(Lio/ooni/mk/nettest/swig/EventFailureResolverLookup;)V", NULL 
    },
    {
      "onFailureStartup", "(Lio/ooni/mk/nettest/swig/EventFailureStartup;)V", NULL 
    },
    {
      "onLog", "(Lio/ooni/mk/nettest/swig/EventLog;)V", NULL 
    },
    {
      "onMeasurement", "(Lio/ooni/mk/nettest/swig/EventMeasurement;)V", NULL 
    },
    {
      "onStatusEnd", "(Lio/ooni/mk/nettest/swig/EventStatusEnd;)V", NULL 
    },
    {
      "onStatusGeoipLookup", "(Lio/ooni/mk/nettest/swig/EventStatusGeoipLookup;)V", NULL 
    },
    {
      "onStatusProgress", "(Lio/ooni/mk/nettest/swig/EventStatusProgress;)V", NULL 
    },
    {
      "onStatusQueued", "(Lio/ooni/mk/nettest/swig/EventStatusQueued;)V", NULL 
    },
    {
      "onStatusMeasurementStart", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementStart;)V", NULL 
    },
    {
      "onStatusMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementSubmission;)V", NULL 
    },
    {
      "onStatusMeasurementDone", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementDone;)V", NULL 
    },
    {
      "onStatusReportClose", "(Lio/ooni/mk/nettest/swig/EventStatusReportClose;)V", NULL 
    },
    {
      "onStatusReportCreate", "(Lio/ooni/mk/nettest/swig/EventStatusReportCreate;)V", NULL 
    },
    {
      "onStatusResolverLookup", "(Lio/ooni/mk/nettest/swig/EventStatusResolverLookup;)V", NULL 
    },
    {
      "onStatusStarted", "(Lio/ooni/mk/nettest/swig/EventStatusStarted;)V", NULL 
    },
    {
      "onTaskTerminated", "(Lio/ooni/mk/nettest/swig/EventTaskTerminated;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("io/ooni/mk/nettest/swig/NettestBase");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 24; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_NettestBasePerformance::SwigDirector_NettestBasePerformance(JNIEnv *jenv) : mk::nettest::common::PerformanceNettest(), Swig::Director(jenv) {
}

SwigDirector_NettestBasePerformance::~SwigDirector_NettestBasePerformance() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_NettestBasePerformance::run() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return mk::nettest::common::Nettest::run();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[24], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::PerformanceNettest::run ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_NettestBasePerformance::on_failure_asn_lookup(mk::nettest::events::FailureAsnLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[1]) {
    mk::nettest::common::Nettest::on_failure_asn_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureAsnLookupEvent **)&jarg0) = new mk::nettest::events::FailureAsnLookupEvent((const mk::nettest::events::FailureAsnLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[25], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::PerformanceNettest::on_failure_asn_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBasePerformance::on_failure_cc_lookup(mk::nettest::events::FailureCcLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[2]) {
    mk::nettest::common::Nettest::on_failure_cc_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureCcLookupEvent **)&jarg0) = new mk::nettest::events::FailureCcLookupEvent((const mk::nettest::events::FailureCcLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[26], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::PerformanceNettest::on_failure_cc_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBasePerformance::on_failure_ip_lookup(mk::nettest::events::FailureIpLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[3]) {
    mk::nettest::common::Nettest::on_failure_ip_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureIpLookupEvent **)&jarg0) = new mk::nettest::events::FailureIpLookupEvent((const mk::nettest::events::FailureIpLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[27], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::PerformanceNettest::on_failure_ip_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBasePerformance::on_failure_measurement(mk::nettest::events::FailureMeasurementEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[4]) {
    mk::nettest::common::Nettest::on_failure_measurement(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureMeasurementEvent **)&jarg0) = new mk::nettest::events::FailureMeasurementEvent((const mk::nettest::events::FailureMeasurementEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[28], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::PerformanceNettest::on_failure_measurement ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBasePerformance::on_failure_measurement_submission(mk::nettest::events::FailureMeasurementSubmissionEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[5]) {
    mk::nettest::common::Nettest::on_failure_measurement_submission(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureMeasurementSubmissionEvent **)&jarg0) = new mk::nettest::events::FailureMeasurementSubmissionEvent((const mk::nettest::events::FailureMeasurementSubmissionEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[29], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::PerformanceNettest::on_failure_measurement_submission ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBasePerformance::on_failure_report_create(mk::nettest::events::FailureReportCreateEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[6]) {
    mk::nettest::common::Nettest::on_failure_report_create(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureReportCreateEvent **)&jarg0) = new mk::nettest::events::FailureReportCreateEvent((const mk::nettest::events::FailureReportCreateEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[30], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::PerformanceNettest::on_failure_report_create ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBasePerformance::on_failure_report_close(mk::nettest::events::FailureReportCloseEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[7]) {
    mk::nettest::common::Nettest::on_failure_report_close(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureReportCloseEvent **)&jarg0) = new mk::nettest::events::FailureReportCloseEvent((const mk::nettest::events::FailureReportCloseEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[31], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::PerformanceNettest::on_failure_report_close ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBasePerformance::on_failure_resolver_lookup(mk::nettest::events::FailureResolverLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[8]) {
    mk::nettest::common::Nettest::on_failure_resolver_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureResolverLookupEvent **)&jarg0) = new mk::nettest::events::FailureResolverLookupEvent((const mk::nettest::events::FailureResolverLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[32], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::PerformanceNettest::on_failure_resolver_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBasePerformance::on_failure_startup(mk::nettest::events::FailureStartupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[9]) {
    mk::nettest::common::Nettest::on_failure_startup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureStartupEvent **)&jarg0) = new mk::nettest::events::FailureStartupEvent((const mk::nettest::events::FailureStartupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[33], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::PerformanceNettest::on_failure_startup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBasePerformance::on_log(mk::nettest::events::LogEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[10]) {
    mk::nettest::common::Nettest::on_log(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::LogEvent **)&jarg0) = new mk::nettest::events::LogEvent((const mk::nettest::events::LogEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[34], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::PerformanceNettest::on_log ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBasePerformance::on_measurement(mk::nettest::events::MeasurementEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[11]) {
    mk::nettest::common::Nettest::on_measurement(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::MeasurementEvent **)&jarg0) = new mk::nettest::events::MeasurementEvent((const mk::nettest::events::MeasurementEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[35], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::PerformanceNettest::on_measurement ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBasePerformance::on_status_end(mk::nettest::events::StatusEndEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[12]) {
    mk::nettest::common::Nettest::on_status_end(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusEndEvent **)&jarg0) = new mk::nettest::events::StatusEndEvent((const mk::nettest::events::StatusEndEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[36], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::PerformanceNettest::on_status_end ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBasePerformance::on_status_geoip_lookup(mk::nettest::events::StatusGeoipLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[13]) {
    mk::nettest::common::Nettest::on_status_geoip_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusGeoipLookupEvent **)&jarg0) = new mk::nettest::events::StatusGeoipLookupEvent((const mk::nettest::events::StatusGeoipLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[37], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::PerformanceNettest::on_status_geoip_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBasePerformance::on_status_progress(mk::nettest::events::StatusProgressEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[14]) {
    mk::nettest::common::Nettest::on_status_progress(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusProgressEvent **)&jarg0) = new mk::nettest::events::StatusProgressEvent((const mk::nettest::events::StatusProgressEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[38], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::PerformanceNettest::on_status_progress ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBasePerformance::on_status_queued(mk::nettest::events::StatusQueuedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[15]) {
    mk::nettest::common::Nettest::on_status_queued(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusQueuedEvent **)&jarg0) = new mk::nettest::events::StatusQueuedEvent((const mk::nettest::events::StatusQueuedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[39], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::PerformanceNettest::on_status_queued ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBasePerformance::on_status_measurement_start(mk::nettest::events::StatusMeasurementStartEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[16]) {
    mk::nettest::common::Nettest::on_status_measurement_start(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementStartEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementStartEvent((const mk::nettest::events::StatusMeasurementStartEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[40], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::PerformanceNettest::on_status_measurement_start ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBasePerformance::on_status_measurement_submission(mk::nettest::events::StatusMeasurementSubmissionEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[17]) {
    mk::nettest::common::Nettest::on_status_measurement_submission(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementSubmissionEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementSubmissionEvent((const mk::nettest::events::StatusMeasurementSubmissionEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[41], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::PerformanceNettest::on_status_measurement_submission ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBasePerformance::on_status_measurement_done(mk::nettest::events::StatusMeasurementDoneEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[18]) {
    mk::nettest::common::Nettest::on_status_measurement_done(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementDoneEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementDoneEvent((const mk::nettest::events::StatusMeasurementDoneEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[42], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::PerformanceNettest::on_status_measurement_done ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBasePerformance::on_status_report_close(mk::nettest::events::StatusReportCloseEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[19]) {
    mk::nettest::common::Nettest::on_status_report_close(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusReportCloseEvent **)&jarg0) = new mk::nettest::events::StatusReportCloseEvent((const mk::nettest::events::StatusReportCloseEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[43], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::PerformanceNettest::on_status_report_close ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBasePerformance::on_status_report_create(mk::nettest::events::StatusReportCreateEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[20]) {
    mk::nettest::common::Nettest::on_status_report_create(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusReportCreateEvent **)&jarg0) = new mk::nettest::events::StatusReportCreateEvent((const mk::nettest::events::StatusReportCreateEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[44], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::PerformanceNettest::on_status_report_create ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBasePerformance::on_status_resolver_lookup(mk::nettest::events::StatusResolverLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[21]) {
    mk::nettest::common::Nettest::on_status_resolver_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusResolverLookupEvent **)&jarg0) = new mk::nettest::events::StatusResolverLookupEvent((const mk::nettest::events::StatusResolverLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[45], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::PerformanceNettest::on_status_resolver_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBasePerformance::on_status_started(mk::nettest::events::StatusStartedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[22]) {
    mk::nettest::common::Nettest::on_status_started(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusStartedEvent **)&jarg0) = new mk::nettest::events::StatusStartedEvent((const mk::nettest::events::StatusStartedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[46], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::PerformanceNettest::on_status_started ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBasePerformance::on_task_terminated(mk::nettest::events::TaskTerminatedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[23]) {
    mk::nettest::common::Nettest::on_task_terminated(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::TaskTerminatedEvent **)&jarg0) = new mk::nettest::events::TaskTerminatedEvent((const mk::nettest::events::TaskTerminatedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[47], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::PerformanceNettest::on_task_terminated ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_NettestBasePerformance::dispatch_event(nlohmann::json doc) {
  return mk::nettest::common::PerformanceNettest::dispatch_event(doc);
}

void SwigDirector_NettestBasePerformance::on_status_update_performance(mk::nettest::events::StatusUpdatePerformanceEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[24]) {
    mk::nettest::common::PerformanceNettest::on_status_update_performance(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusUpdatePerformanceEvent **)&jarg0) = new mk::nettest::events::StatusUpdatePerformanceEvent((const mk::nettest::events::StatusUpdatePerformanceEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[48], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::PerformanceNettest::on_status_update_performance ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBasePerformance::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "run", "()Z", NULL 
    },
    {
      "onFailureAsnLookup", "(Lio/ooni/mk/nettest/swig/EventFailureAsnLookup;)V", NULL 
    },
    {
      "onFailureCcLookup", "(Lio/ooni/mk/nettest/swig/EventFailureCcLookup;)V", NULL 
    },
    {
      "onFailureIpLookup", "(Lio/ooni/mk/nettest/swig/EventFailureIpLookup;)V", NULL 
    },
    {
      "onFailureMeasurement", "(Lio/ooni/mk/nettest/swig/EventFailureMeasurement;)V", NULL 
    },
    {
      "onFailureMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/EventFailureMeasurementSubmission;)V", NULL 
    },
    {
      "onFailureReportCreate", "(Lio/ooni/mk/nettest/swig/EventFailureReportCreate;)V", NULL 
    },
    {
      "onFailureReportClose", "(Lio/ooni/mk/nettest/swig/EventFailureReportClose;)V", NULL 
    },
    {
      "onFailureResolverLookup", "(Lio/ooni/mk/nettest/swig/EventFailureResolverLookup;)V", NULL 
    },
    {
      "onFailureStartup", "(Lio/ooni/mk/nettest/swig/EventFailureStartup;)V", NULL 
    },
    {
      "onLog", "(Lio/ooni/mk/nettest/swig/EventLog;)V", NULL 
    },
    {
      "onMeasurement", "(Lio/ooni/mk/nettest/swig/EventMeasurement;)V", NULL 
    },
    {
      "onStatusEnd", "(Lio/ooni/mk/nettest/swig/EventStatusEnd;)V", NULL 
    },
    {
      "onStatusGeoipLookup", "(Lio/ooni/mk/nettest/swig/EventStatusGeoipLookup;)V", NULL 
    },
    {
      "onStatusProgress", "(Lio/ooni/mk/nettest/swig/EventStatusProgress;)V", NULL 
    },
    {
      "onStatusQueued", "(Lio/ooni/mk/nettest/swig/EventStatusQueued;)V", NULL 
    },
    {
      "onStatusMeasurementStart", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementStart;)V", NULL 
    },
    {
      "onStatusMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementSubmission;)V", NULL 
    },
    {
      "onStatusMeasurementDone", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementDone;)V", NULL 
    },
    {
      "onStatusReportClose", "(Lio/ooni/mk/nettest/swig/EventStatusReportClose;)V", NULL 
    },
    {
      "onStatusReportCreate", "(Lio/ooni/mk/nettest/swig/EventStatusReportCreate;)V", NULL 
    },
    {
      "onStatusResolverLookup", "(Lio/ooni/mk/nettest/swig/EventStatusResolverLookup;)V", NULL 
    },
    {
      "onStatusStarted", "(Lio/ooni/mk/nettest/swig/EventStatusStarted;)V", NULL 
    },
    {
      "onTaskTerminated", "(Lio/ooni/mk/nettest/swig/EventTaskTerminated;)V", NULL 
    },
    {
      "onStatusUpdatePerformance", "(Lio/ooni/mk/nettest/swig/EventStatusUpdatePerformance;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("io/ooni/mk/nettest/swig/NettestBasePerformance");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 25; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_NettestBaseWebsites::SwigDirector_NettestBaseWebsites(JNIEnv *jenv) : mk::nettest::common::WebsitesNettest(), Swig::Director(jenv) {
}

SwigDirector_NettestBaseWebsites::~SwigDirector_NettestBaseWebsites() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_NettestBaseWebsites::run() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return mk::nettest::common::Nettest::run();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[49], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::WebsitesNettest::run ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_NettestBaseWebsites::on_failure_asn_lookup(mk::nettest::events::FailureAsnLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[1]) {
    mk::nettest::common::Nettest::on_failure_asn_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureAsnLookupEvent **)&jarg0) = new mk::nettest::events::FailureAsnLookupEvent((const mk::nettest::events::FailureAsnLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[50], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::WebsitesNettest::on_failure_asn_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBaseWebsites::on_failure_cc_lookup(mk::nettest::events::FailureCcLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[2]) {
    mk::nettest::common::Nettest::on_failure_cc_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureCcLookupEvent **)&jarg0) = new mk::nettest::events::FailureCcLookupEvent((const mk::nettest::events::FailureCcLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[51], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::WebsitesNettest::on_failure_cc_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBaseWebsites::on_failure_ip_lookup(mk::nettest::events::FailureIpLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[3]) {
    mk::nettest::common::Nettest::on_failure_ip_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureIpLookupEvent **)&jarg0) = new mk::nettest::events::FailureIpLookupEvent((const mk::nettest::events::FailureIpLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[52], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::WebsitesNettest::on_failure_ip_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBaseWebsites::on_failure_measurement(mk::nettest::events::FailureMeasurementEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[4]) {
    mk::nettest::common::Nettest::on_failure_measurement(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureMeasurementEvent **)&jarg0) = new mk::nettest::events::FailureMeasurementEvent((const mk::nettest::events::FailureMeasurementEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[53], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::WebsitesNettest::on_failure_measurement ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBaseWebsites::on_failure_measurement_submission(mk::nettest::events::FailureMeasurementSubmissionEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[5]) {
    mk::nettest::common::Nettest::on_failure_measurement_submission(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureMeasurementSubmissionEvent **)&jarg0) = new mk::nettest::events::FailureMeasurementSubmissionEvent((const mk::nettest::events::FailureMeasurementSubmissionEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[54], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::WebsitesNettest::on_failure_measurement_submission ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBaseWebsites::on_failure_report_create(mk::nettest::events::FailureReportCreateEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[6]) {
    mk::nettest::common::Nettest::on_failure_report_create(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureReportCreateEvent **)&jarg0) = new mk::nettest::events::FailureReportCreateEvent((const mk::nettest::events::FailureReportCreateEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[55], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::WebsitesNettest::on_failure_report_create ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBaseWebsites::on_failure_report_close(mk::nettest::events::FailureReportCloseEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[7]) {
    mk::nettest::common::Nettest::on_failure_report_close(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureReportCloseEvent **)&jarg0) = new mk::nettest::events::FailureReportCloseEvent((const mk::nettest::events::FailureReportCloseEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[56], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::WebsitesNettest::on_failure_report_close ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBaseWebsites::on_failure_resolver_lookup(mk::nettest::events::FailureResolverLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[8]) {
    mk::nettest::common::Nettest::on_failure_resolver_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureResolverLookupEvent **)&jarg0) = new mk::nettest::events::FailureResolverLookupEvent((const mk::nettest::events::FailureResolverLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[57], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::WebsitesNettest::on_failure_resolver_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBaseWebsites::on_failure_startup(mk::nettest::events::FailureStartupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[9]) {
    mk::nettest::common::Nettest::on_failure_startup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureStartupEvent **)&jarg0) = new mk::nettest::events::FailureStartupEvent((const mk::nettest::events::FailureStartupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[58], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::WebsitesNettest::on_failure_startup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBaseWebsites::on_log(mk::nettest::events::LogEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[10]) {
    mk::nettest::common::Nettest::on_log(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::LogEvent **)&jarg0) = new mk::nettest::events::LogEvent((const mk::nettest::events::LogEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[59], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::WebsitesNettest::on_log ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBaseWebsites::on_measurement(mk::nettest::events::MeasurementEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[11]) {
    mk::nettest::common::Nettest::on_measurement(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::MeasurementEvent **)&jarg0) = new mk::nettest::events::MeasurementEvent((const mk::nettest::events::MeasurementEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[60], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::WebsitesNettest::on_measurement ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBaseWebsites::on_status_end(mk::nettest::events::StatusEndEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[12]) {
    mk::nettest::common::Nettest::on_status_end(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusEndEvent **)&jarg0) = new mk::nettest::events::StatusEndEvent((const mk::nettest::events::StatusEndEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[61], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::WebsitesNettest::on_status_end ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBaseWebsites::on_status_geoip_lookup(mk::nettest::events::StatusGeoipLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[13]) {
    mk::nettest::common::Nettest::on_status_geoip_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusGeoipLookupEvent **)&jarg0) = new mk::nettest::events::StatusGeoipLookupEvent((const mk::nettest::events::StatusGeoipLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[62], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::WebsitesNettest::on_status_geoip_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBaseWebsites::on_status_progress(mk::nettest::events::StatusProgressEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[14]) {
    mk::nettest::common::Nettest::on_status_progress(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusProgressEvent **)&jarg0) = new mk::nettest::events::StatusProgressEvent((const mk::nettest::events::StatusProgressEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[63], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::WebsitesNettest::on_status_progress ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBaseWebsites::on_status_queued(mk::nettest::events::StatusQueuedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[15]) {
    mk::nettest::common::Nettest::on_status_queued(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusQueuedEvent **)&jarg0) = new mk::nettest::events::StatusQueuedEvent((const mk::nettest::events::StatusQueuedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[64], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::WebsitesNettest::on_status_queued ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBaseWebsites::on_status_measurement_start(mk::nettest::events::StatusMeasurementStartEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[16]) {
    mk::nettest::common::Nettest::on_status_measurement_start(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementStartEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementStartEvent((const mk::nettest::events::StatusMeasurementStartEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[65], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::WebsitesNettest::on_status_measurement_start ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBaseWebsites::on_status_measurement_submission(mk::nettest::events::StatusMeasurementSubmissionEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[17]) {
    mk::nettest::common::Nettest::on_status_measurement_submission(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementSubmissionEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementSubmissionEvent((const mk::nettest::events::StatusMeasurementSubmissionEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[66], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::WebsitesNettest::on_status_measurement_submission ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBaseWebsites::on_status_measurement_done(mk::nettest::events::StatusMeasurementDoneEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[18]) {
    mk::nettest::common::Nettest::on_status_measurement_done(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementDoneEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementDoneEvent((const mk::nettest::events::StatusMeasurementDoneEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[67], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::WebsitesNettest::on_status_measurement_done ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBaseWebsites::on_status_report_close(mk::nettest::events::StatusReportCloseEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[19]) {
    mk::nettest::common::Nettest::on_status_report_close(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusReportCloseEvent **)&jarg0) = new mk::nettest::events::StatusReportCloseEvent((const mk::nettest::events::StatusReportCloseEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[68], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::WebsitesNettest::on_status_report_close ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBaseWebsites::on_status_report_create(mk::nettest::events::StatusReportCreateEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[20]) {
    mk::nettest::common::Nettest::on_status_report_create(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusReportCreateEvent **)&jarg0) = new mk::nettest::events::StatusReportCreateEvent((const mk::nettest::events::StatusReportCreateEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[69], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::WebsitesNettest::on_status_report_create ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBaseWebsites::on_status_resolver_lookup(mk::nettest::events::StatusResolverLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[21]) {
    mk::nettest::common::Nettest::on_status_resolver_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusResolverLookupEvent **)&jarg0) = new mk::nettest::events::StatusResolverLookupEvent((const mk::nettest::events::StatusResolverLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[70], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::WebsitesNettest::on_status_resolver_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBaseWebsites::on_status_started(mk::nettest::events::StatusStartedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[22]) {
    mk::nettest::common::Nettest::on_status_started(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusStartedEvent **)&jarg0) = new mk::nettest::events::StatusStartedEvent((const mk::nettest::events::StatusStartedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[71], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::WebsitesNettest::on_status_started ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBaseWebsites::on_task_terminated(mk::nettest::events::TaskTerminatedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[23]) {
    mk::nettest::common::Nettest::on_task_terminated(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::TaskTerminatedEvent **)&jarg0) = new mk::nettest::events::TaskTerminatedEvent((const mk::nettest::events::TaskTerminatedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[72], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::WebsitesNettest::on_task_terminated ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_NettestBaseWebsites::dispatch_event(nlohmann::json doc) {
  return mk::nettest::common::WebsitesNettest::dispatch_event(doc);
}

void SwigDirector_NettestBaseWebsites::on_status_update_websites(mk::nettest::events::StatusUpdateWebsitesEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[24]) {
    mk::nettest::common::WebsitesNettest::on_status_update_websites(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusUpdateWebsitesEvent **)&jarg0) = new mk::nettest::events::StatusUpdateWebsitesEvent((const mk::nettest::events::StatusUpdateWebsitesEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[73], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::common::WebsitesNettest::on_status_update_websites ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestBaseWebsites::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "run", "()Z", NULL 
    },
    {
      "onFailureAsnLookup", "(Lio/ooni/mk/nettest/swig/EventFailureAsnLookup;)V", NULL 
    },
    {
      "onFailureCcLookup", "(Lio/ooni/mk/nettest/swig/EventFailureCcLookup;)V", NULL 
    },
    {
      "onFailureIpLookup", "(Lio/ooni/mk/nettest/swig/EventFailureIpLookup;)V", NULL 
    },
    {
      "onFailureMeasurement", "(Lio/ooni/mk/nettest/swig/EventFailureMeasurement;)V", NULL 
    },
    {
      "onFailureMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/EventFailureMeasurementSubmission;)V", NULL 
    },
    {
      "onFailureReportCreate", "(Lio/ooni/mk/nettest/swig/EventFailureReportCreate;)V", NULL 
    },
    {
      "onFailureReportClose", "(Lio/ooni/mk/nettest/swig/EventFailureReportClose;)V", NULL 
    },
    {
      "onFailureResolverLookup", "(Lio/ooni/mk/nettest/swig/EventFailureResolverLookup;)V", NULL 
    },
    {
      "onFailureStartup", "(Lio/ooni/mk/nettest/swig/EventFailureStartup;)V", NULL 
    },
    {
      "onLog", "(Lio/ooni/mk/nettest/swig/EventLog;)V", NULL 
    },
    {
      "onMeasurement", "(Lio/ooni/mk/nettest/swig/EventMeasurement;)V", NULL 
    },
    {
      "onStatusEnd", "(Lio/ooni/mk/nettest/swig/EventStatusEnd;)V", NULL 
    },
    {
      "onStatusGeoipLookup", "(Lio/ooni/mk/nettest/swig/EventStatusGeoipLookup;)V", NULL 
    },
    {
      "onStatusProgress", "(Lio/ooni/mk/nettest/swig/EventStatusProgress;)V", NULL 
    },
    {
      "onStatusQueued", "(Lio/ooni/mk/nettest/swig/EventStatusQueued;)V", NULL 
    },
    {
      "onStatusMeasurementStart", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementStart;)V", NULL 
    },
    {
      "onStatusMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementSubmission;)V", NULL 
    },
    {
      "onStatusMeasurementDone", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementDone;)V", NULL 
    },
    {
      "onStatusReportClose", "(Lio/ooni/mk/nettest/swig/EventStatusReportClose;)V", NULL 
    },
    {
      "onStatusReportCreate", "(Lio/ooni/mk/nettest/swig/EventStatusReportCreate;)V", NULL 
    },
    {
      "onStatusResolverLookup", "(Lio/ooni/mk/nettest/swig/EventStatusResolverLookup;)V", NULL 
    },
    {
      "onStatusStarted", "(Lio/ooni/mk/nettest/swig/EventStatusStarted;)V", NULL 
    },
    {
      "onTaskTerminated", "(Lio/ooni/mk/nettest/swig/EventTaskTerminated;)V", NULL 
    },
    {
      "onStatusUpdateWebsites", "(Lio/ooni/mk/nettest/swig/EventStatusUpdateWebsites;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("io/ooni/mk/nettest/swig/NettestBaseWebsites");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 25; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_NettestCaptivePortal::SwigDirector_NettestCaptivePortal(JNIEnv *jenv, mk::nettest::CaptivePortalSettings arg0) : mk::nettest::CaptivePortalNettest(arg0), Swig::Director(jenv) {
}

SwigDirector_NettestCaptivePortal::~SwigDirector_NettestCaptivePortal() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_NettestCaptivePortal::run() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return mk::nettest::CaptivePortalNettest::run();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[74], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::CaptivePortalNettest::run ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_NettestCaptivePortal::on_failure_asn_lookup(mk::nettest::events::FailureAsnLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[1]) {
    mk::nettest::common::Nettest::on_failure_asn_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureAsnLookupEvent **)&jarg0) = new mk::nettest::events::FailureAsnLookupEvent((const mk::nettest::events::FailureAsnLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[75], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::CaptivePortalNettest::on_failure_asn_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestCaptivePortal::on_failure_cc_lookup(mk::nettest::events::FailureCcLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[2]) {
    mk::nettest::common::Nettest::on_failure_cc_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureCcLookupEvent **)&jarg0) = new mk::nettest::events::FailureCcLookupEvent((const mk::nettest::events::FailureCcLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[76], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::CaptivePortalNettest::on_failure_cc_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestCaptivePortal::on_failure_ip_lookup(mk::nettest::events::FailureIpLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[3]) {
    mk::nettest::common::Nettest::on_failure_ip_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureIpLookupEvent **)&jarg0) = new mk::nettest::events::FailureIpLookupEvent((const mk::nettest::events::FailureIpLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[77], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::CaptivePortalNettest::on_failure_ip_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestCaptivePortal::on_failure_measurement(mk::nettest::events::FailureMeasurementEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[4]) {
    mk::nettest::common::Nettest::on_failure_measurement(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureMeasurementEvent **)&jarg0) = new mk::nettest::events::FailureMeasurementEvent((const mk::nettest::events::FailureMeasurementEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[78], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::CaptivePortalNettest::on_failure_measurement ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestCaptivePortal::on_failure_measurement_submission(mk::nettest::events::FailureMeasurementSubmissionEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[5]) {
    mk::nettest::common::Nettest::on_failure_measurement_submission(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureMeasurementSubmissionEvent **)&jarg0) = new mk::nettest::events::FailureMeasurementSubmissionEvent((const mk::nettest::events::FailureMeasurementSubmissionEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[79], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::CaptivePortalNettest::on_failure_measurement_submission ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestCaptivePortal::on_failure_report_create(mk::nettest::events::FailureReportCreateEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[6]) {
    mk::nettest::common::Nettest::on_failure_report_create(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureReportCreateEvent **)&jarg0) = new mk::nettest::events::FailureReportCreateEvent((const mk::nettest::events::FailureReportCreateEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[80], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::CaptivePortalNettest::on_failure_report_create ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestCaptivePortal::on_failure_report_close(mk::nettest::events::FailureReportCloseEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[7]) {
    mk::nettest::common::Nettest::on_failure_report_close(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureReportCloseEvent **)&jarg0) = new mk::nettest::events::FailureReportCloseEvent((const mk::nettest::events::FailureReportCloseEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[81], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::CaptivePortalNettest::on_failure_report_close ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestCaptivePortal::on_failure_resolver_lookup(mk::nettest::events::FailureResolverLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[8]) {
    mk::nettest::common::Nettest::on_failure_resolver_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureResolverLookupEvent **)&jarg0) = new mk::nettest::events::FailureResolverLookupEvent((const mk::nettest::events::FailureResolverLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[82], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::CaptivePortalNettest::on_failure_resolver_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestCaptivePortal::on_failure_startup(mk::nettest::events::FailureStartupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[9]) {
    mk::nettest::common::Nettest::on_failure_startup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureStartupEvent **)&jarg0) = new mk::nettest::events::FailureStartupEvent((const mk::nettest::events::FailureStartupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[83], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::CaptivePortalNettest::on_failure_startup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestCaptivePortal::on_log(mk::nettest::events::LogEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[10]) {
    mk::nettest::common::Nettest::on_log(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::LogEvent **)&jarg0) = new mk::nettest::events::LogEvent((const mk::nettest::events::LogEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[84], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::CaptivePortalNettest::on_log ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestCaptivePortal::on_measurement(mk::nettest::events::MeasurementEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[11]) {
    mk::nettest::common::Nettest::on_measurement(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::MeasurementEvent **)&jarg0) = new mk::nettest::events::MeasurementEvent((const mk::nettest::events::MeasurementEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[85], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::CaptivePortalNettest::on_measurement ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestCaptivePortal::on_status_end(mk::nettest::events::StatusEndEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[12]) {
    mk::nettest::common::Nettest::on_status_end(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusEndEvent **)&jarg0) = new mk::nettest::events::StatusEndEvent((const mk::nettest::events::StatusEndEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[86], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::CaptivePortalNettest::on_status_end ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestCaptivePortal::on_status_geoip_lookup(mk::nettest::events::StatusGeoipLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[13]) {
    mk::nettest::common::Nettest::on_status_geoip_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusGeoipLookupEvent **)&jarg0) = new mk::nettest::events::StatusGeoipLookupEvent((const mk::nettest::events::StatusGeoipLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[87], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::CaptivePortalNettest::on_status_geoip_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestCaptivePortal::on_status_progress(mk::nettest::events::StatusProgressEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[14]) {
    mk::nettest::common::Nettest::on_status_progress(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusProgressEvent **)&jarg0) = new mk::nettest::events::StatusProgressEvent((const mk::nettest::events::StatusProgressEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[88], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::CaptivePortalNettest::on_status_progress ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestCaptivePortal::on_status_queued(mk::nettest::events::StatusQueuedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[15]) {
    mk::nettest::common::Nettest::on_status_queued(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusQueuedEvent **)&jarg0) = new mk::nettest::events::StatusQueuedEvent((const mk::nettest::events::StatusQueuedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[89], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::CaptivePortalNettest::on_status_queued ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestCaptivePortal::on_status_measurement_start(mk::nettest::events::StatusMeasurementStartEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[16]) {
    mk::nettest::common::Nettest::on_status_measurement_start(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementStartEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementStartEvent((const mk::nettest::events::StatusMeasurementStartEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[90], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::CaptivePortalNettest::on_status_measurement_start ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestCaptivePortal::on_status_measurement_submission(mk::nettest::events::StatusMeasurementSubmissionEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[17]) {
    mk::nettest::common::Nettest::on_status_measurement_submission(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementSubmissionEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementSubmissionEvent((const mk::nettest::events::StatusMeasurementSubmissionEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[91], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::CaptivePortalNettest::on_status_measurement_submission ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestCaptivePortal::on_status_measurement_done(mk::nettest::events::StatusMeasurementDoneEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[18]) {
    mk::nettest::common::Nettest::on_status_measurement_done(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementDoneEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementDoneEvent((const mk::nettest::events::StatusMeasurementDoneEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[92], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::CaptivePortalNettest::on_status_measurement_done ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestCaptivePortal::on_status_report_close(mk::nettest::events::StatusReportCloseEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[19]) {
    mk::nettest::common::Nettest::on_status_report_close(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusReportCloseEvent **)&jarg0) = new mk::nettest::events::StatusReportCloseEvent((const mk::nettest::events::StatusReportCloseEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[93], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::CaptivePortalNettest::on_status_report_close ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestCaptivePortal::on_status_report_create(mk::nettest::events::StatusReportCreateEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[20]) {
    mk::nettest::common::Nettest::on_status_report_create(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusReportCreateEvent **)&jarg0) = new mk::nettest::events::StatusReportCreateEvent((const mk::nettest::events::StatusReportCreateEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[94], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::CaptivePortalNettest::on_status_report_create ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestCaptivePortal::on_status_resolver_lookup(mk::nettest::events::StatusResolverLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[21]) {
    mk::nettest::common::Nettest::on_status_resolver_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusResolverLookupEvent **)&jarg0) = new mk::nettest::events::StatusResolverLookupEvent((const mk::nettest::events::StatusResolverLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[95], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::CaptivePortalNettest::on_status_resolver_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestCaptivePortal::on_status_started(mk::nettest::events::StatusStartedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[22]) {
    mk::nettest::common::Nettest::on_status_started(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusStartedEvent **)&jarg0) = new mk::nettest::events::StatusStartedEvent((const mk::nettest::events::StatusStartedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[96], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::CaptivePortalNettest::on_status_started ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestCaptivePortal::on_task_terminated(mk::nettest::events::TaskTerminatedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[23]) {
    mk::nettest::common::Nettest::on_task_terminated(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::TaskTerminatedEvent **)&jarg0) = new mk::nettest::events::TaskTerminatedEvent((const mk::nettest::events::TaskTerminatedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[97], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::CaptivePortalNettest::on_task_terminated ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_NettestCaptivePortal::dispatch_event(nlohmann::json doc) {
  return mk::nettest::common::Nettest::dispatch_event(doc);
}

void SwigDirector_NettestCaptivePortal::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "run", "()Z", NULL 
    },
    {
      "onFailureAsnLookup", "(Lio/ooni/mk/nettest/swig/EventFailureAsnLookup;)V", NULL 
    },
    {
      "onFailureCcLookup", "(Lio/ooni/mk/nettest/swig/EventFailureCcLookup;)V", NULL 
    },
    {
      "onFailureIpLookup", "(Lio/ooni/mk/nettest/swig/EventFailureIpLookup;)V", NULL 
    },
    {
      "onFailureMeasurement", "(Lio/ooni/mk/nettest/swig/EventFailureMeasurement;)V", NULL 
    },
    {
      "onFailureMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/EventFailureMeasurementSubmission;)V", NULL 
    },
    {
      "onFailureReportCreate", "(Lio/ooni/mk/nettest/swig/EventFailureReportCreate;)V", NULL 
    },
    {
      "onFailureReportClose", "(Lio/ooni/mk/nettest/swig/EventFailureReportClose;)V", NULL 
    },
    {
      "onFailureResolverLookup", "(Lio/ooni/mk/nettest/swig/EventFailureResolverLookup;)V", NULL 
    },
    {
      "onFailureStartup", "(Lio/ooni/mk/nettest/swig/EventFailureStartup;)V", NULL 
    },
    {
      "onLog", "(Lio/ooni/mk/nettest/swig/EventLog;)V", NULL 
    },
    {
      "onMeasurement", "(Lio/ooni/mk/nettest/swig/EventMeasurement;)V", NULL 
    },
    {
      "onStatusEnd", "(Lio/ooni/mk/nettest/swig/EventStatusEnd;)V", NULL 
    },
    {
      "onStatusGeoipLookup", "(Lio/ooni/mk/nettest/swig/EventStatusGeoipLookup;)V", NULL 
    },
    {
      "onStatusProgress", "(Lio/ooni/mk/nettest/swig/EventStatusProgress;)V", NULL 
    },
    {
      "onStatusQueued", "(Lio/ooni/mk/nettest/swig/EventStatusQueued;)V", NULL 
    },
    {
      "onStatusMeasurementStart", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementStart;)V", NULL 
    },
    {
      "onStatusMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementSubmission;)V", NULL 
    },
    {
      "onStatusMeasurementDone", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementDone;)V", NULL 
    },
    {
      "onStatusReportClose", "(Lio/ooni/mk/nettest/swig/EventStatusReportClose;)V", NULL 
    },
    {
      "onStatusReportCreate", "(Lio/ooni/mk/nettest/swig/EventStatusReportCreate;)V", NULL 
    },
    {
      "onStatusResolverLookup", "(Lio/ooni/mk/nettest/swig/EventStatusResolverLookup;)V", NULL 
    },
    {
      "onStatusStarted", "(Lio/ooni/mk/nettest/swig/EventStatusStarted;)V", NULL 
    },
    {
      "onTaskTerminated", "(Lio/ooni/mk/nettest/swig/EventTaskTerminated;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("io/ooni/mk/nettest/swig/NettestCaptivePortal");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 24; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_NettestDash::SwigDirector_NettestDash(JNIEnv *jenv, mk::nettest::DashSettings arg0) : mk::nettest::DashNettest(arg0), Swig::Director(jenv) {
}

SwigDirector_NettestDash::~SwigDirector_NettestDash() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_NettestDash::run() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return mk::nettest::DashNettest::run();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[98], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DashNettest::run ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_NettestDash::on_failure_asn_lookup(mk::nettest::events::FailureAsnLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[1]) {
    mk::nettest::common::Nettest::on_failure_asn_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureAsnLookupEvent **)&jarg0) = new mk::nettest::events::FailureAsnLookupEvent((const mk::nettest::events::FailureAsnLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[99], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DashNettest::on_failure_asn_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDash::on_failure_cc_lookup(mk::nettest::events::FailureCcLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[2]) {
    mk::nettest::common::Nettest::on_failure_cc_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureCcLookupEvent **)&jarg0) = new mk::nettest::events::FailureCcLookupEvent((const mk::nettest::events::FailureCcLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[100], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DashNettest::on_failure_cc_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDash::on_failure_ip_lookup(mk::nettest::events::FailureIpLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[3]) {
    mk::nettest::common::Nettest::on_failure_ip_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureIpLookupEvent **)&jarg0) = new mk::nettest::events::FailureIpLookupEvent((const mk::nettest::events::FailureIpLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[101], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DashNettest::on_failure_ip_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDash::on_failure_measurement(mk::nettest::events::FailureMeasurementEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[4]) {
    mk::nettest::common::Nettest::on_failure_measurement(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureMeasurementEvent **)&jarg0) = new mk::nettest::events::FailureMeasurementEvent((const mk::nettest::events::FailureMeasurementEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[102], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DashNettest::on_failure_measurement ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDash::on_failure_measurement_submission(mk::nettest::events::FailureMeasurementSubmissionEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[5]) {
    mk::nettest::common::Nettest::on_failure_measurement_submission(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureMeasurementSubmissionEvent **)&jarg0) = new mk::nettest::events::FailureMeasurementSubmissionEvent((const mk::nettest::events::FailureMeasurementSubmissionEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[103], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DashNettest::on_failure_measurement_submission ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDash::on_failure_report_create(mk::nettest::events::FailureReportCreateEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[6]) {
    mk::nettest::common::Nettest::on_failure_report_create(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureReportCreateEvent **)&jarg0) = new mk::nettest::events::FailureReportCreateEvent((const mk::nettest::events::FailureReportCreateEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[104], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DashNettest::on_failure_report_create ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDash::on_failure_report_close(mk::nettest::events::FailureReportCloseEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[7]) {
    mk::nettest::common::Nettest::on_failure_report_close(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureReportCloseEvent **)&jarg0) = new mk::nettest::events::FailureReportCloseEvent((const mk::nettest::events::FailureReportCloseEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[105], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DashNettest::on_failure_report_close ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDash::on_failure_resolver_lookup(mk::nettest::events::FailureResolverLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[8]) {
    mk::nettest::common::Nettest::on_failure_resolver_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureResolverLookupEvent **)&jarg0) = new mk::nettest::events::FailureResolverLookupEvent((const mk::nettest::events::FailureResolverLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[106], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DashNettest::on_failure_resolver_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDash::on_failure_startup(mk::nettest::events::FailureStartupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[9]) {
    mk::nettest::common::Nettest::on_failure_startup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureStartupEvent **)&jarg0) = new mk::nettest::events::FailureStartupEvent((const mk::nettest::events::FailureStartupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[107], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DashNettest::on_failure_startup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDash::on_log(mk::nettest::events::LogEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[10]) {
    mk::nettest::common::Nettest::on_log(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::LogEvent **)&jarg0) = new mk::nettest::events::LogEvent((const mk::nettest::events::LogEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[108], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DashNettest::on_log ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDash::on_measurement(mk::nettest::events::MeasurementEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[11]) {
    mk::nettest::common::Nettest::on_measurement(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::MeasurementEvent **)&jarg0) = new mk::nettest::events::MeasurementEvent((const mk::nettest::events::MeasurementEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[109], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DashNettest::on_measurement ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDash::on_status_end(mk::nettest::events::StatusEndEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[12]) {
    mk::nettest::common::Nettest::on_status_end(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusEndEvent **)&jarg0) = new mk::nettest::events::StatusEndEvent((const mk::nettest::events::StatusEndEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[110], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DashNettest::on_status_end ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDash::on_status_geoip_lookup(mk::nettest::events::StatusGeoipLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[13]) {
    mk::nettest::common::Nettest::on_status_geoip_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusGeoipLookupEvent **)&jarg0) = new mk::nettest::events::StatusGeoipLookupEvent((const mk::nettest::events::StatusGeoipLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[111], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DashNettest::on_status_geoip_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDash::on_status_progress(mk::nettest::events::StatusProgressEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[14]) {
    mk::nettest::common::Nettest::on_status_progress(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusProgressEvent **)&jarg0) = new mk::nettest::events::StatusProgressEvent((const mk::nettest::events::StatusProgressEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[112], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DashNettest::on_status_progress ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDash::on_status_queued(mk::nettest::events::StatusQueuedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[15]) {
    mk::nettest::common::Nettest::on_status_queued(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusQueuedEvent **)&jarg0) = new mk::nettest::events::StatusQueuedEvent((const mk::nettest::events::StatusQueuedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[113], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DashNettest::on_status_queued ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDash::on_status_measurement_start(mk::nettest::events::StatusMeasurementStartEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[16]) {
    mk::nettest::common::Nettest::on_status_measurement_start(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementStartEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementStartEvent((const mk::nettest::events::StatusMeasurementStartEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[114], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DashNettest::on_status_measurement_start ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDash::on_status_measurement_submission(mk::nettest::events::StatusMeasurementSubmissionEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[17]) {
    mk::nettest::common::Nettest::on_status_measurement_submission(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementSubmissionEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementSubmissionEvent((const mk::nettest::events::StatusMeasurementSubmissionEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[115], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DashNettest::on_status_measurement_submission ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDash::on_status_measurement_done(mk::nettest::events::StatusMeasurementDoneEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[18]) {
    mk::nettest::common::Nettest::on_status_measurement_done(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementDoneEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementDoneEvent((const mk::nettest::events::StatusMeasurementDoneEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[116], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DashNettest::on_status_measurement_done ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDash::on_status_report_close(mk::nettest::events::StatusReportCloseEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[19]) {
    mk::nettest::common::Nettest::on_status_report_close(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusReportCloseEvent **)&jarg0) = new mk::nettest::events::StatusReportCloseEvent((const mk::nettest::events::StatusReportCloseEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[117], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DashNettest::on_status_report_close ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDash::on_status_report_create(mk::nettest::events::StatusReportCreateEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[20]) {
    mk::nettest::common::Nettest::on_status_report_create(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusReportCreateEvent **)&jarg0) = new mk::nettest::events::StatusReportCreateEvent((const mk::nettest::events::StatusReportCreateEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[118], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DashNettest::on_status_report_create ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDash::on_status_resolver_lookup(mk::nettest::events::StatusResolverLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[21]) {
    mk::nettest::common::Nettest::on_status_resolver_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusResolverLookupEvent **)&jarg0) = new mk::nettest::events::StatusResolverLookupEvent((const mk::nettest::events::StatusResolverLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[119], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DashNettest::on_status_resolver_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDash::on_status_started(mk::nettest::events::StatusStartedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[22]) {
    mk::nettest::common::Nettest::on_status_started(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusStartedEvent **)&jarg0) = new mk::nettest::events::StatusStartedEvent((const mk::nettest::events::StatusStartedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[120], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DashNettest::on_status_started ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDash::on_task_terminated(mk::nettest::events::TaskTerminatedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[23]) {
    mk::nettest::common::Nettest::on_task_terminated(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::TaskTerminatedEvent **)&jarg0) = new mk::nettest::events::TaskTerminatedEvent((const mk::nettest::events::TaskTerminatedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[121], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DashNettest::on_task_terminated ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_NettestDash::dispatch_event(nlohmann::json doc) {
  return mk::nettest::common::PerformanceNettest::dispatch_event(doc);
}

void SwigDirector_NettestDash::on_status_update_performance(mk::nettest::events::StatusUpdatePerformanceEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[24]) {
    mk::nettest::common::PerformanceNettest::on_status_update_performance(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusUpdatePerformanceEvent **)&jarg0) = new mk::nettest::events::StatusUpdatePerformanceEvent((const mk::nettest::events::StatusUpdatePerformanceEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[122], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DashNettest::on_status_update_performance ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDash::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "run", "()Z", NULL 
    },
    {
      "onFailureAsnLookup", "(Lio/ooni/mk/nettest/swig/EventFailureAsnLookup;)V", NULL 
    },
    {
      "onFailureCcLookup", "(Lio/ooni/mk/nettest/swig/EventFailureCcLookup;)V", NULL 
    },
    {
      "onFailureIpLookup", "(Lio/ooni/mk/nettest/swig/EventFailureIpLookup;)V", NULL 
    },
    {
      "onFailureMeasurement", "(Lio/ooni/mk/nettest/swig/EventFailureMeasurement;)V", NULL 
    },
    {
      "onFailureMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/EventFailureMeasurementSubmission;)V", NULL 
    },
    {
      "onFailureReportCreate", "(Lio/ooni/mk/nettest/swig/EventFailureReportCreate;)V", NULL 
    },
    {
      "onFailureReportClose", "(Lio/ooni/mk/nettest/swig/EventFailureReportClose;)V", NULL 
    },
    {
      "onFailureResolverLookup", "(Lio/ooni/mk/nettest/swig/EventFailureResolverLookup;)V", NULL 
    },
    {
      "onFailureStartup", "(Lio/ooni/mk/nettest/swig/EventFailureStartup;)V", NULL 
    },
    {
      "onLog", "(Lio/ooni/mk/nettest/swig/EventLog;)V", NULL 
    },
    {
      "onMeasurement", "(Lio/ooni/mk/nettest/swig/EventMeasurement;)V", NULL 
    },
    {
      "onStatusEnd", "(Lio/ooni/mk/nettest/swig/EventStatusEnd;)V", NULL 
    },
    {
      "onStatusGeoipLookup", "(Lio/ooni/mk/nettest/swig/EventStatusGeoipLookup;)V", NULL 
    },
    {
      "onStatusProgress", "(Lio/ooni/mk/nettest/swig/EventStatusProgress;)V", NULL 
    },
    {
      "onStatusQueued", "(Lio/ooni/mk/nettest/swig/EventStatusQueued;)V", NULL 
    },
    {
      "onStatusMeasurementStart", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementStart;)V", NULL 
    },
    {
      "onStatusMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementSubmission;)V", NULL 
    },
    {
      "onStatusMeasurementDone", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementDone;)V", NULL 
    },
    {
      "onStatusReportClose", "(Lio/ooni/mk/nettest/swig/EventStatusReportClose;)V", NULL 
    },
    {
      "onStatusReportCreate", "(Lio/ooni/mk/nettest/swig/EventStatusReportCreate;)V", NULL 
    },
    {
      "onStatusResolverLookup", "(Lio/ooni/mk/nettest/swig/EventStatusResolverLookup;)V", NULL 
    },
    {
      "onStatusStarted", "(Lio/ooni/mk/nettest/swig/EventStatusStarted;)V", NULL 
    },
    {
      "onTaskTerminated", "(Lio/ooni/mk/nettest/swig/EventTaskTerminated;)V", NULL 
    },
    {
      "onStatusUpdatePerformance", "(Lio/ooni/mk/nettest/swig/EventStatusUpdatePerformance;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("io/ooni/mk/nettest/swig/NettestDash");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 25; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_NettestDnsInjection::SwigDirector_NettestDnsInjection(JNIEnv *jenv, mk::nettest::DnsInjectionSettings arg0) : mk::nettest::DnsInjectionNettest(arg0), Swig::Director(jenv) {
}

SwigDirector_NettestDnsInjection::~SwigDirector_NettestDnsInjection() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_NettestDnsInjection::run() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return mk::nettest::DnsInjectionNettest::run();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[123], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DnsInjectionNettest::run ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_NettestDnsInjection::on_failure_asn_lookup(mk::nettest::events::FailureAsnLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[1]) {
    mk::nettest::common::Nettest::on_failure_asn_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureAsnLookupEvent **)&jarg0) = new mk::nettest::events::FailureAsnLookupEvent((const mk::nettest::events::FailureAsnLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[124], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DnsInjectionNettest::on_failure_asn_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDnsInjection::on_failure_cc_lookup(mk::nettest::events::FailureCcLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[2]) {
    mk::nettest::common::Nettest::on_failure_cc_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureCcLookupEvent **)&jarg0) = new mk::nettest::events::FailureCcLookupEvent((const mk::nettest::events::FailureCcLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[125], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DnsInjectionNettest::on_failure_cc_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDnsInjection::on_failure_ip_lookup(mk::nettest::events::FailureIpLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[3]) {
    mk::nettest::common::Nettest::on_failure_ip_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureIpLookupEvent **)&jarg0) = new mk::nettest::events::FailureIpLookupEvent((const mk::nettest::events::FailureIpLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[126], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DnsInjectionNettest::on_failure_ip_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDnsInjection::on_failure_measurement(mk::nettest::events::FailureMeasurementEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[4]) {
    mk::nettest::common::Nettest::on_failure_measurement(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureMeasurementEvent **)&jarg0) = new mk::nettest::events::FailureMeasurementEvent((const mk::nettest::events::FailureMeasurementEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[127], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DnsInjectionNettest::on_failure_measurement ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDnsInjection::on_failure_measurement_submission(mk::nettest::events::FailureMeasurementSubmissionEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[5]) {
    mk::nettest::common::Nettest::on_failure_measurement_submission(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureMeasurementSubmissionEvent **)&jarg0) = new mk::nettest::events::FailureMeasurementSubmissionEvent((const mk::nettest::events::FailureMeasurementSubmissionEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[128], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DnsInjectionNettest::on_failure_measurement_submission ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDnsInjection::on_failure_report_create(mk::nettest::events::FailureReportCreateEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[6]) {
    mk::nettest::common::Nettest::on_failure_report_create(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureReportCreateEvent **)&jarg0) = new mk::nettest::events::FailureReportCreateEvent((const mk::nettest::events::FailureReportCreateEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[129], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DnsInjectionNettest::on_failure_report_create ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDnsInjection::on_failure_report_close(mk::nettest::events::FailureReportCloseEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[7]) {
    mk::nettest::common::Nettest::on_failure_report_close(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureReportCloseEvent **)&jarg0) = new mk::nettest::events::FailureReportCloseEvent((const mk::nettest::events::FailureReportCloseEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[130], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DnsInjectionNettest::on_failure_report_close ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDnsInjection::on_failure_resolver_lookup(mk::nettest::events::FailureResolverLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[8]) {
    mk::nettest::common::Nettest::on_failure_resolver_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureResolverLookupEvent **)&jarg0) = new mk::nettest::events::FailureResolverLookupEvent((const mk::nettest::events::FailureResolverLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[131], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DnsInjectionNettest::on_failure_resolver_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDnsInjection::on_failure_startup(mk::nettest::events::FailureStartupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[9]) {
    mk::nettest::common::Nettest::on_failure_startup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureStartupEvent **)&jarg0) = new mk::nettest::events::FailureStartupEvent((const mk::nettest::events::FailureStartupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[132], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DnsInjectionNettest::on_failure_startup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDnsInjection::on_log(mk::nettest::events::LogEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[10]) {
    mk::nettest::common::Nettest::on_log(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::LogEvent **)&jarg0) = new mk::nettest::events::LogEvent((const mk::nettest::events::LogEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[133], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DnsInjectionNettest::on_log ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDnsInjection::on_measurement(mk::nettest::events::MeasurementEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[11]) {
    mk::nettest::common::Nettest::on_measurement(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::MeasurementEvent **)&jarg0) = new mk::nettest::events::MeasurementEvent((const mk::nettest::events::MeasurementEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[134], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DnsInjectionNettest::on_measurement ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDnsInjection::on_status_end(mk::nettest::events::StatusEndEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[12]) {
    mk::nettest::common::Nettest::on_status_end(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusEndEvent **)&jarg0) = new mk::nettest::events::StatusEndEvent((const mk::nettest::events::StatusEndEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[135], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DnsInjectionNettest::on_status_end ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDnsInjection::on_status_geoip_lookup(mk::nettest::events::StatusGeoipLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[13]) {
    mk::nettest::common::Nettest::on_status_geoip_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusGeoipLookupEvent **)&jarg0) = new mk::nettest::events::StatusGeoipLookupEvent((const mk::nettest::events::StatusGeoipLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[136], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DnsInjectionNettest::on_status_geoip_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDnsInjection::on_status_progress(mk::nettest::events::StatusProgressEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[14]) {
    mk::nettest::common::Nettest::on_status_progress(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusProgressEvent **)&jarg0) = new mk::nettest::events::StatusProgressEvent((const mk::nettest::events::StatusProgressEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[137], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DnsInjectionNettest::on_status_progress ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDnsInjection::on_status_queued(mk::nettest::events::StatusQueuedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[15]) {
    mk::nettest::common::Nettest::on_status_queued(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusQueuedEvent **)&jarg0) = new mk::nettest::events::StatusQueuedEvent((const mk::nettest::events::StatusQueuedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[138], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DnsInjectionNettest::on_status_queued ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDnsInjection::on_status_measurement_start(mk::nettest::events::StatusMeasurementStartEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[16]) {
    mk::nettest::common::Nettest::on_status_measurement_start(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementStartEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementStartEvent((const mk::nettest::events::StatusMeasurementStartEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[139], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DnsInjectionNettest::on_status_measurement_start ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDnsInjection::on_status_measurement_submission(mk::nettest::events::StatusMeasurementSubmissionEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[17]) {
    mk::nettest::common::Nettest::on_status_measurement_submission(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementSubmissionEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementSubmissionEvent((const mk::nettest::events::StatusMeasurementSubmissionEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[140], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DnsInjectionNettest::on_status_measurement_submission ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDnsInjection::on_status_measurement_done(mk::nettest::events::StatusMeasurementDoneEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[18]) {
    mk::nettest::common::Nettest::on_status_measurement_done(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementDoneEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementDoneEvent((const mk::nettest::events::StatusMeasurementDoneEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[141], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DnsInjectionNettest::on_status_measurement_done ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDnsInjection::on_status_report_close(mk::nettest::events::StatusReportCloseEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[19]) {
    mk::nettest::common::Nettest::on_status_report_close(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusReportCloseEvent **)&jarg0) = new mk::nettest::events::StatusReportCloseEvent((const mk::nettest::events::StatusReportCloseEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[142], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DnsInjectionNettest::on_status_report_close ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDnsInjection::on_status_report_create(mk::nettest::events::StatusReportCreateEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[20]) {
    mk::nettest::common::Nettest::on_status_report_create(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusReportCreateEvent **)&jarg0) = new mk::nettest::events::StatusReportCreateEvent((const mk::nettest::events::StatusReportCreateEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[143], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DnsInjectionNettest::on_status_report_create ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDnsInjection::on_status_resolver_lookup(mk::nettest::events::StatusResolverLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[21]) {
    mk::nettest::common::Nettest::on_status_resolver_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusResolverLookupEvent **)&jarg0) = new mk::nettest::events::StatusResolverLookupEvent((const mk::nettest::events::StatusResolverLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[144], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DnsInjectionNettest::on_status_resolver_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDnsInjection::on_status_started(mk::nettest::events::StatusStartedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[22]) {
    mk::nettest::common::Nettest::on_status_started(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusStartedEvent **)&jarg0) = new mk::nettest::events::StatusStartedEvent((const mk::nettest::events::StatusStartedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[145], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DnsInjectionNettest::on_status_started ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestDnsInjection::on_task_terminated(mk::nettest::events::TaskTerminatedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[23]) {
    mk::nettest::common::Nettest::on_task_terminated(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::TaskTerminatedEvent **)&jarg0) = new mk::nettest::events::TaskTerminatedEvent((const mk::nettest::events::TaskTerminatedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[146], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::DnsInjectionNettest::on_task_terminated ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_NettestDnsInjection::dispatch_event(nlohmann::json doc) {
  return mk::nettest::common::Nettest::dispatch_event(doc);
}

void SwigDirector_NettestDnsInjection::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "run", "()Z", NULL 
    },
    {
      "onFailureAsnLookup", "(Lio/ooni/mk/nettest/swig/EventFailureAsnLookup;)V", NULL 
    },
    {
      "onFailureCcLookup", "(Lio/ooni/mk/nettest/swig/EventFailureCcLookup;)V", NULL 
    },
    {
      "onFailureIpLookup", "(Lio/ooni/mk/nettest/swig/EventFailureIpLookup;)V", NULL 
    },
    {
      "onFailureMeasurement", "(Lio/ooni/mk/nettest/swig/EventFailureMeasurement;)V", NULL 
    },
    {
      "onFailureMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/EventFailureMeasurementSubmission;)V", NULL 
    },
    {
      "onFailureReportCreate", "(Lio/ooni/mk/nettest/swig/EventFailureReportCreate;)V", NULL 
    },
    {
      "onFailureReportClose", "(Lio/ooni/mk/nettest/swig/EventFailureReportClose;)V", NULL 
    },
    {
      "onFailureResolverLookup", "(Lio/ooni/mk/nettest/swig/EventFailureResolverLookup;)V", NULL 
    },
    {
      "onFailureStartup", "(Lio/ooni/mk/nettest/swig/EventFailureStartup;)V", NULL 
    },
    {
      "onLog", "(Lio/ooni/mk/nettest/swig/EventLog;)V", NULL 
    },
    {
      "onMeasurement", "(Lio/ooni/mk/nettest/swig/EventMeasurement;)V", NULL 
    },
    {
      "onStatusEnd", "(Lio/ooni/mk/nettest/swig/EventStatusEnd;)V", NULL 
    },
    {
      "onStatusGeoipLookup", "(Lio/ooni/mk/nettest/swig/EventStatusGeoipLookup;)V", NULL 
    },
    {
      "onStatusProgress", "(Lio/ooni/mk/nettest/swig/EventStatusProgress;)V", NULL 
    },
    {
      "onStatusQueued", "(Lio/ooni/mk/nettest/swig/EventStatusQueued;)V", NULL 
    },
    {
      "onStatusMeasurementStart", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementStart;)V", NULL 
    },
    {
      "onStatusMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementSubmission;)V", NULL 
    },
    {
      "onStatusMeasurementDone", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementDone;)V", NULL 
    },
    {
      "onStatusReportClose", "(Lio/ooni/mk/nettest/swig/EventStatusReportClose;)V", NULL 
    },
    {
      "onStatusReportCreate", "(Lio/ooni/mk/nettest/swig/EventStatusReportCreate;)V", NULL 
    },
    {
      "onStatusResolverLookup", "(Lio/ooni/mk/nettest/swig/EventStatusResolverLookup;)V", NULL 
    },
    {
      "onStatusStarted", "(Lio/ooni/mk/nettest/swig/EventStatusStarted;)V", NULL 
    },
    {
      "onTaskTerminated", "(Lio/ooni/mk/nettest/swig/EventTaskTerminated;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("io/ooni/mk/nettest/swig/NettestDnsInjection");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 24; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_NettestFacebookMessenger::SwigDirector_NettestFacebookMessenger(JNIEnv *jenv, mk::nettest::FacebookMessengerSettings arg0) : mk::nettest::FacebookMessengerNettest(arg0), Swig::Director(jenv) {
}

SwigDirector_NettestFacebookMessenger::~SwigDirector_NettestFacebookMessenger() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_NettestFacebookMessenger::run() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return mk::nettest::FacebookMessengerNettest::run();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[147], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::FacebookMessengerNettest::run ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_NettestFacebookMessenger::on_failure_asn_lookup(mk::nettest::events::FailureAsnLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[1]) {
    mk::nettest::common::Nettest::on_failure_asn_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureAsnLookupEvent **)&jarg0) = new mk::nettest::events::FailureAsnLookupEvent((const mk::nettest::events::FailureAsnLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[148], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::FacebookMessengerNettest::on_failure_asn_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestFacebookMessenger::on_failure_cc_lookup(mk::nettest::events::FailureCcLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[2]) {
    mk::nettest::common::Nettest::on_failure_cc_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureCcLookupEvent **)&jarg0) = new mk::nettest::events::FailureCcLookupEvent((const mk::nettest::events::FailureCcLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[149], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::FacebookMessengerNettest::on_failure_cc_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestFacebookMessenger::on_failure_ip_lookup(mk::nettest::events::FailureIpLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[3]) {
    mk::nettest::common::Nettest::on_failure_ip_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureIpLookupEvent **)&jarg0) = new mk::nettest::events::FailureIpLookupEvent((const mk::nettest::events::FailureIpLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[150], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::FacebookMessengerNettest::on_failure_ip_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestFacebookMessenger::on_failure_measurement(mk::nettest::events::FailureMeasurementEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[4]) {
    mk::nettest::common::Nettest::on_failure_measurement(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureMeasurementEvent **)&jarg0) = new mk::nettest::events::FailureMeasurementEvent((const mk::nettest::events::FailureMeasurementEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[151], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::FacebookMessengerNettest::on_failure_measurement ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestFacebookMessenger::on_failure_measurement_submission(mk::nettest::events::FailureMeasurementSubmissionEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[5]) {
    mk::nettest::common::Nettest::on_failure_measurement_submission(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureMeasurementSubmissionEvent **)&jarg0) = new mk::nettest::events::FailureMeasurementSubmissionEvent((const mk::nettest::events::FailureMeasurementSubmissionEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[152], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::FacebookMessengerNettest::on_failure_measurement_submission ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestFacebookMessenger::on_failure_report_create(mk::nettest::events::FailureReportCreateEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[6]) {
    mk::nettest::common::Nettest::on_failure_report_create(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureReportCreateEvent **)&jarg0) = new mk::nettest::events::FailureReportCreateEvent((const mk::nettest::events::FailureReportCreateEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[153], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::FacebookMessengerNettest::on_failure_report_create ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestFacebookMessenger::on_failure_report_close(mk::nettest::events::FailureReportCloseEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[7]) {
    mk::nettest::common::Nettest::on_failure_report_close(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureReportCloseEvent **)&jarg0) = new mk::nettest::events::FailureReportCloseEvent((const mk::nettest::events::FailureReportCloseEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[154], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::FacebookMessengerNettest::on_failure_report_close ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestFacebookMessenger::on_failure_resolver_lookup(mk::nettest::events::FailureResolverLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[8]) {
    mk::nettest::common::Nettest::on_failure_resolver_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureResolverLookupEvent **)&jarg0) = new mk::nettest::events::FailureResolverLookupEvent((const mk::nettest::events::FailureResolverLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[155], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::FacebookMessengerNettest::on_failure_resolver_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestFacebookMessenger::on_failure_startup(mk::nettest::events::FailureStartupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[9]) {
    mk::nettest::common::Nettest::on_failure_startup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureStartupEvent **)&jarg0) = new mk::nettest::events::FailureStartupEvent((const mk::nettest::events::FailureStartupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[156], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::FacebookMessengerNettest::on_failure_startup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestFacebookMessenger::on_log(mk::nettest::events::LogEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[10]) {
    mk::nettest::common::Nettest::on_log(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::LogEvent **)&jarg0) = new mk::nettest::events::LogEvent((const mk::nettest::events::LogEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[157], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::FacebookMessengerNettest::on_log ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestFacebookMessenger::on_measurement(mk::nettest::events::MeasurementEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[11]) {
    mk::nettest::common::Nettest::on_measurement(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::MeasurementEvent **)&jarg0) = new mk::nettest::events::MeasurementEvent((const mk::nettest::events::MeasurementEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[158], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::FacebookMessengerNettest::on_measurement ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestFacebookMessenger::on_status_end(mk::nettest::events::StatusEndEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[12]) {
    mk::nettest::common::Nettest::on_status_end(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusEndEvent **)&jarg0) = new mk::nettest::events::StatusEndEvent((const mk::nettest::events::StatusEndEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[159], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::FacebookMessengerNettest::on_status_end ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestFacebookMessenger::on_status_geoip_lookup(mk::nettest::events::StatusGeoipLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[13]) {
    mk::nettest::common::Nettest::on_status_geoip_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusGeoipLookupEvent **)&jarg0) = new mk::nettest::events::StatusGeoipLookupEvent((const mk::nettest::events::StatusGeoipLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[160], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::FacebookMessengerNettest::on_status_geoip_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestFacebookMessenger::on_status_progress(mk::nettest::events::StatusProgressEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[14]) {
    mk::nettest::common::Nettest::on_status_progress(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusProgressEvent **)&jarg0) = new mk::nettest::events::StatusProgressEvent((const mk::nettest::events::StatusProgressEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[161], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::FacebookMessengerNettest::on_status_progress ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestFacebookMessenger::on_status_queued(mk::nettest::events::StatusQueuedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[15]) {
    mk::nettest::common::Nettest::on_status_queued(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusQueuedEvent **)&jarg0) = new mk::nettest::events::StatusQueuedEvent((const mk::nettest::events::StatusQueuedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[162], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::FacebookMessengerNettest::on_status_queued ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestFacebookMessenger::on_status_measurement_start(mk::nettest::events::StatusMeasurementStartEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[16]) {
    mk::nettest::common::Nettest::on_status_measurement_start(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementStartEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementStartEvent((const mk::nettest::events::StatusMeasurementStartEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[163], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::FacebookMessengerNettest::on_status_measurement_start ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestFacebookMessenger::on_status_measurement_submission(mk::nettest::events::StatusMeasurementSubmissionEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[17]) {
    mk::nettest::common::Nettest::on_status_measurement_submission(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementSubmissionEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementSubmissionEvent((const mk::nettest::events::StatusMeasurementSubmissionEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[164], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::FacebookMessengerNettest::on_status_measurement_submission ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestFacebookMessenger::on_status_measurement_done(mk::nettest::events::StatusMeasurementDoneEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[18]) {
    mk::nettest::common::Nettest::on_status_measurement_done(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementDoneEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementDoneEvent((const mk::nettest::events::StatusMeasurementDoneEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[165], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::FacebookMessengerNettest::on_status_measurement_done ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestFacebookMessenger::on_status_report_close(mk::nettest::events::StatusReportCloseEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[19]) {
    mk::nettest::common::Nettest::on_status_report_close(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusReportCloseEvent **)&jarg0) = new mk::nettest::events::StatusReportCloseEvent((const mk::nettest::events::StatusReportCloseEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[166], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::FacebookMessengerNettest::on_status_report_close ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestFacebookMessenger::on_status_report_create(mk::nettest::events::StatusReportCreateEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[20]) {
    mk::nettest::common::Nettest::on_status_report_create(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusReportCreateEvent **)&jarg0) = new mk::nettest::events::StatusReportCreateEvent((const mk::nettest::events::StatusReportCreateEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[167], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::FacebookMessengerNettest::on_status_report_create ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestFacebookMessenger::on_status_resolver_lookup(mk::nettest::events::StatusResolverLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[21]) {
    mk::nettest::common::Nettest::on_status_resolver_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusResolverLookupEvent **)&jarg0) = new mk::nettest::events::StatusResolverLookupEvent((const mk::nettest::events::StatusResolverLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[168], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::FacebookMessengerNettest::on_status_resolver_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestFacebookMessenger::on_status_started(mk::nettest::events::StatusStartedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[22]) {
    mk::nettest::common::Nettest::on_status_started(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusStartedEvent **)&jarg0) = new mk::nettest::events::StatusStartedEvent((const mk::nettest::events::StatusStartedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[169], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::FacebookMessengerNettest::on_status_started ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestFacebookMessenger::on_task_terminated(mk::nettest::events::TaskTerminatedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[23]) {
    mk::nettest::common::Nettest::on_task_terminated(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::TaskTerminatedEvent **)&jarg0) = new mk::nettest::events::TaskTerminatedEvent((const mk::nettest::events::TaskTerminatedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[170], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::FacebookMessengerNettest::on_task_terminated ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_NettestFacebookMessenger::dispatch_event(nlohmann::json doc) {
  return mk::nettest::common::Nettest::dispatch_event(doc);
}

void SwigDirector_NettestFacebookMessenger::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "run", "()Z", NULL 
    },
    {
      "onFailureAsnLookup", "(Lio/ooni/mk/nettest/swig/EventFailureAsnLookup;)V", NULL 
    },
    {
      "onFailureCcLookup", "(Lio/ooni/mk/nettest/swig/EventFailureCcLookup;)V", NULL 
    },
    {
      "onFailureIpLookup", "(Lio/ooni/mk/nettest/swig/EventFailureIpLookup;)V", NULL 
    },
    {
      "onFailureMeasurement", "(Lio/ooni/mk/nettest/swig/EventFailureMeasurement;)V", NULL 
    },
    {
      "onFailureMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/EventFailureMeasurementSubmission;)V", NULL 
    },
    {
      "onFailureReportCreate", "(Lio/ooni/mk/nettest/swig/EventFailureReportCreate;)V", NULL 
    },
    {
      "onFailureReportClose", "(Lio/ooni/mk/nettest/swig/EventFailureReportClose;)V", NULL 
    },
    {
      "onFailureResolverLookup", "(Lio/ooni/mk/nettest/swig/EventFailureResolverLookup;)V", NULL 
    },
    {
      "onFailureStartup", "(Lio/ooni/mk/nettest/swig/EventFailureStartup;)V", NULL 
    },
    {
      "onLog", "(Lio/ooni/mk/nettest/swig/EventLog;)V", NULL 
    },
    {
      "onMeasurement", "(Lio/ooni/mk/nettest/swig/EventMeasurement;)V", NULL 
    },
    {
      "onStatusEnd", "(Lio/ooni/mk/nettest/swig/EventStatusEnd;)V", NULL 
    },
    {
      "onStatusGeoipLookup", "(Lio/ooni/mk/nettest/swig/EventStatusGeoipLookup;)V", NULL 
    },
    {
      "onStatusProgress", "(Lio/ooni/mk/nettest/swig/EventStatusProgress;)V", NULL 
    },
    {
      "onStatusQueued", "(Lio/ooni/mk/nettest/swig/EventStatusQueued;)V", NULL 
    },
    {
      "onStatusMeasurementStart", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementStart;)V", NULL 
    },
    {
      "onStatusMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementSubmission;)V", NULL 
    },
    {
      "onStatusMeasurementDone", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementDone;)V", NULL 
    },
    {
      "onStatusReportClose", "(Lio/ooni/mk/nettest/swig/EventStatusReportClose;)V", NULL 
    },
    {
      "onStatusReportCreate", "(Lio/ooni/mk/nettest/swig/EventStatusReportCreate;)V", NULL 
    },
    {
      "onStatusResolverLookup", "(Lio/ooni/mk/nettest/swig/EventStatusResolverLookup;)V", NULL 
    },
    {
      "onStatusStarted", "(Lio/ooni/mk/nettest/swig/EventStatusStarted;)V", NULL 
    },
    {
      "onTaskTerminated", "(Lio/ooni/mk/nettest/swig/EventTaskTerminated;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("io/ooni/mk/nettest/swig/NettestFacebookMessenger");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 24; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_NettestHttpHeaderFieldManipulation::SwigDirector_NettestHttpHeaderFieldManipulation(JNIEnv *jenv, mk::nettest::HttpHeaderFieldManipulationSettings arg0) : mk::nettest::HttpHeaderFieldManipulationNettest(arg0), Swig::Director(jenv) {
}

SwigDirector_NettestHttpHeaderFieldManipulation::~SwigDirector_NettestHttpHeaderFieldManipulation() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_NettestHttpHeaderFieldManipulation::run() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return mk::nettest::HttpHeaderFieldManipulationNettest::run();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[171], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpHeaderFieldManipulationNettest::run ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_NettestHttpHeaderFieldManipulation::on_failure_asn_lookup(mk::nettest::events::FailureAsnLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[1]) {
    mk::nettest::common::Nettest::on_failure_asn_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureAsnLookupEvent **)&jarg0) = new mk::nettest::events::FailureAsnLookupEvent((const mk::nettest::events::FailureAsnLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[172], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpHeaderFieldManipulationNettest::on_failure_asn_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpHeaderFieldManipulation::on_failure_cc_lookup(mk::nettest::events::FailureCcLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[2]) {
    mk::nettest::common::Nettest::on_failure_cc_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureCcLookupEvent **)&jarg0) = new mk::nettest::events::FailureCcLookupEvent((const mk::nettest::events::FailureCcLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[173], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpHeaderFieldManipulationNettest::on_failure_cc_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpHeaderFieldManipulation::on_failure_ip_lookup(mk::nettest::events::FailureIpLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[3]) {
    mk::nettest::common::Nettest::on_failure_ip_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureIpLookupEvent **)&jarg0) = new mk::nettest::events::FailureIpLookupEvent((const mk::nettest::events::FailureIpLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[174], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpHeaderFieldManipulationNettest::on_failure_ip_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpHeaderFieldManipulation::on_failure_measurement(mk::nettest::events::FailureMeasurementEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[4]) {
    mk::nettest::common::Nettest::on_failure_measurement(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureMeasurementEvent **)&jarg0) = new mk::nettest::events::FailureMeasurementEvent((const mk::nettest::events::FailureMeasurementEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[175], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpHeaderFieldManipulationNettest::on_failure_measurement ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpHeaderFieldManipulation::on_failure_measurement_submission(mk::nettest::events::FailureMeasurementSubmissionEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[5]) {
    mk::nettest::common::Nettest::on_failure_measurement_submission(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureMeasurementSubmissionEvent **)&jarg0) = new mk::nettest::events::FailureMeasurementSubmissionEvent((const mk::nettest::events::FailureMeasurementSubmissionEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[176], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpHeaderFieldManipulationNettest::on_failure_measurement_submission ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpHeaderFieldManipulation::on_failure_report_create(mk::nettest::events::FailureReportCreateEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[6]) {
    mk::nettest::common::Nettest::on_failure_report_create(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureReportCreateEvent **)&jarg0) = new mk::nettest::events::FailureReportCreateEvent((const mk::nettest::events::FailureReportCreateEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[177], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpHeaderFieldManipulationNettest::on_failure_report_create ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpHeaderFieldManipulation::on_failure_report_close(mk::nettest::events::FailureReportCloseEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[7]) {
    mk::nettest::common::Nettest::on_failure_report_close(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureReportCloseEvent **)&jarg0) = new mk::nettest::events::FailureReportCloseEvent((const mk::nettest::events::FailureReportCloseEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[178], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpHeaderFieldManipulationNettest::on_failure_report_close ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpHeaderFieldManipulation::on_failure_resolver_lookup(mk::nettest::events::FailureResolverLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[8]) {
    mk::nettest::common::Nettest::on_failure_resolver_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureResolverLookupEvent **)&jarg0) = new mk::nettest::events::FailureResolverLookupEvent((const mk::nettest::events::FailureResolverLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[179], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpHeaderFieldManipulationNettest::on_failure_resolver_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpHeaderFieldManipulation::on_failure_startup(mk::nettest::events::FailureStartupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[9]) {
    mk::nettest::common::Nettest::on_failure_startup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureStartupEvent **)&jarg0) = new mk::nettest::events::FailureStartupEvent((const mk::nettest::events::FailureStartupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[180], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpHeaderFieldManipulationNettest::on_failure_startup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpHeaderFieldManipulation::on_log(mk::nettest::events::LogEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[10]) {
    mk::nettest::common::Nettest::on_log(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::LogEvent **)&jarg0) = new mk::nettest::events::LogEvent((const mk::nettest::events::LogEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[181], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpHeaderFieldManipulationNettest::on_log ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpHeaderFieldManipulation::on_measurement(mk::nettest::events::MeasurementEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[11]) {
    mk::nettest::common::Nettest::on_measurement(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::MeasurementEvent **)&jarg0) = new mk::nettest::events::MeasurementEvent((const mk::nettest::events::MeasurementEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[182], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpHeaderFieldManipulationNettest::on_measurement ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpHeaderFieldManipulation::on_status_end(mk::nettest::events::StatusEndEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[12]) {
    mk::nettest::common::Nettest::on_status_end(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusEndEvent **)&jarg0) = new mk::nettest::events::StatusEndEvent((const mk::nettest::events::StatusEndEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[183], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpHeaderFieldManipulationNettest::on_status_end ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpHeaderFieldManipulation::on_status_geoip_lookup(mk::nettest::events::StatusGeoipLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[13]) {
    mk::nettest::common::Nettest::on_status_geoip_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusGeoipLookupEvent **)&jarg0) = new mk::nettest::events::StatusGeoipLookupEvent((const mk::nettest::events::StatusGeoipLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[184], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpHeaderFieldManipulationNettest::on_status_geoip_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpHeaderFieldManipulation::on_status_progress(mk::nettest::events::StatusProgressEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[14]) {
    mk::nettest::common::Nettest::on_status_progress(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusProgressEvent **)&jarg0) = new mk::nettest::events::StatusProgressEvent((const mk::nettest::events::StatusProgressEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[185], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpHeaderFieldManipulationNettest::on_status_progress ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpHeaderFieldManipulation::on_status_queued(mk::nettest::events::StatusQueuedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[15]) {
    mk::nettest::common::Nettest::on_status_queued(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusQueuedEvent **)&jarg0) = new mk::nettest::events::StatusQueuedEvent((const mk::nettest::events::StatusQueuedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[186], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpHeaderFieldManipulationNettest::on_status_queued ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpHeaderFieldManipulation::on_status_measurement_start(mk::nettest::events::StatusMeasurementStartEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[16]) {
    mk::nettest::common::Nettest::on_status_measurement_start(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementStartEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementStartEvent((const mk::nettest::events::StatusMeasurementStartEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[187], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpHeaderFieldManipulationNettest::on_status_measurement_start ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpHeaderFieldManipulation::on_status_measurement_submission(mk::nettest::events::StatusMeasurementSubmissionEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[17]) {
    mk::nettest::common::Nettest::on_status_measurement_submission(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementSubmissionEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementSubmissionEvent((const mk::nettest::events::StatusMeasurementSubmissionEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[188], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpHeaderFieldManipulationNettest::on_status_measurement_submission ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpHeaderFieldManipulation::on_status_measurement_done(mk::nettest::events::StatusMeasurementDoneEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[18]) {
    mk::nettest::common::Nettest::on_status_measurement_done(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementDoneEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementDoneEvent((const mk::nettest::events::StatusMeasurementDoneEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[189], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpHeaderFieldManipulationNettest::on_status_measurement_done ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpHeaderFieldManipulation::on_status_report_close(mk::nettest::events::StatusReportCloseEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[19]) {
    mk::nettest::common::Nettest::on_status_report_close(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusReportCloseEvent **)&jarg0) = new mk::nettest::events::StatusReportCloseEvent((const mk::nettest::events::StatusReportCloseEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[190], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpHeaderFieldManipulationNettest::on_status_report_close ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpHeaderFieldManipulation::on_status_report_create(mk::nettest::events::StatusReportCreateEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[20]) {
    mk::nettest::common::Nettest::on_status_report_create(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusReportCreateEvent **)&jarg0) = new mk::nettest::events::StatusReportCreateEvent((const mk::nettest::events::StatusReportCreateEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[191], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpHeaderFieldManipulationNettest::on_status_report_create ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpHeaderFieldManipulation::on_status_resolver_lookup(mk::nettest::events::StatusResolverLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[21]) {
    mk::nettest::common::Nettest::on_status_resolver_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusResolverLookupEvent **)&jarg0) = new mk::nettest::events::StatusResolverLookupEvent((const mk::nettest::events::StatusResolverLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[192], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpHeaderFieldManipulationNettest::on_status_resolver_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpHeaderFieldManipulation::on_status_started(mk::nettest::events::StatusStartedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[22]) {
    mk::nettest::common::Nettest::on_status_started(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusStartedEvent **)&jarg0) = new mk::nettest::events::StatusStartedEvent((const mk::nettest::events::StatusStartedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[193], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpHeaderFieldManipulationNettest::on_status_started ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpHeaderFieldManipulation::on_task_terminated(mk::nettest::events::TaskTerminatedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[23]) {
    mk::nettest::common::Nettest::on_task_terminated(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::TaskTerminatedEvent **)&jarg0) = new mk::nettest::events::TaskTerminatedEvent((const mk::nettest::events::TaskTerminatedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[194], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpHeaderFieldManipulationNettest::on_task_terminated ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_NettestHttpHeaderFieldManipulation::dispatch_event(nlohmann::json doc) {
  return mk::nettest::common::Nettest::dispatch_event(doc);
}

void SwigDirector_NettestHttpHeaderFieldManipulation::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "run", "()Z", NULL 
    },
    {
      "onFailureAsnLookup", "(Lio/ooni/mk/nettest/swig/EventFailureAsnLookup;)V", NULL 
    },
    {
      "onFailureCcLookup", "(Lio/ooni/mk/nettest/swig/EventFailureCcLookup;)V", NULL 
    },
    {
      "onFailureIpLookup", "(Lio/ooni/mk/nettest/swig/EventFailureIpLookup;)V", NULL 
    },
    {
      "onFailureMeasurement", "(Lio/ooni/mk/nettest/swig/EventFailureMeasurement;)V", NULL 
    },
    {
      "onFailureMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/EventFailureMeasurementSubmission;)V", NULL 
    },
    {
      "onFailureReportCreate", "(Lio/ooni/mk/nettest/swig/EventFailureReportCreate;)V", NULL 
    },
    {
      "onFailureReportClose", "(Lio/ooni/mk/nettest/swig/EventFailureReportClose;)V", NULL 
    },
    {
      "onFailureResolverLookup", "(Lio/ooni/mk/nettest/swig/EventFailureResolverLookup;)V", NULL 
    },
    {
      "onFailureStartup", "(Lio/ooni/mk/nettest/swig/EventFailureStartup;)V", NULL 
    },
    {
      "onLog", "(Lio/ooni/mk/nettest/swig/EventLog;)V", NULL 
    },
    {
      "onMeasurement", "(Lio/ooni/mk/nettest/swig/EventMeasurement;)V", NULL 
    },
    {
      "onStatusEnd", "(Lio/ooni/mk/nettest/swig/EventStatusEnd;)V", NULL 
    },
    {
      "onStatusGeoipLookup", "(Lio/ooni/mk/nettest/swig/EventStatusGeoipLookup;)V", NULL 
    },
    {
      "onStatusProgress", "(Lio/ooni/mk/nettest/swig/EventStatusProgress;)V", NULL 
    },
    {
      "onStatusQueued", "(Lio/ooni/mk/nettest/swig/EventStatusQueued;)V", NULL 
    },
    {
      "onStatusMeasurementStart", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementStart;)V", NULL 
    },
    {
      "onStatusMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementSubmission;)V", NULL 
    },
    {
      "onStatusMeasurementDone", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementDone;)V", NULL 
    },
    {
      "onStatusReportClose", "(Lio/ooni/mk/nettest/swig/EventStatusReportClose;)V", NULL 
    },
    {
      "onStatusReportCreate", "(Lio/ooni/mk/nettest/swig/EventStatusReportCreate;)V", NULL 
    },
    {
      "onStatusResolverLookup", "(Lio/ooni/mk/nettest/swig/EventStatusResolverLookup;)V", NULL 
    },
    {
      "onStatusStarted", "(Lio/ooni/mk/nettest/swig/EventStatusStarted;)V", NULL 
    },
    {
      "onTaskTerminated", "(Lio/ooni/mk/nettest/swig/EventTaskTerminated;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("io/ooni/mk/nettest/swig/NettestHttpHeaderFieldManipulation");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 24; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_NettestHttpInvalidRequestLine::SwigDirector_NettestHttpInvalidRequestLine(JNIEnv *jenv, mk::nettest::HttpInvalidRequestLineSettings arg0) : mk::nettest::HttpInvalidRequestLineNettest(arg0), Swig::Director(jenv) {
}

SwigDirector_NettestHttpInvalidRequestLine::~SwigDirector_NettestHttpInvalidRequestLine() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_NettestHttpInvalidRequestLine::run() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return mk::nettest::HttpInvalidRequestLineNettest::run();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[195], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpInvalidRequestLineNettest::run ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_NettestHttpInvalidRequestLine::on_failure_asn_lookup(mk::nettest::events::FailureAsnLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[1]) {
    mk::nettest::common::Nettest::on_failure_asn_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureAsnLookupEvent **)&jarg0) = new mk::nettest::events::FailureAsnLookupEvent((const mk::nettest::events::FailureAsnLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[196], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpInvalidRequestLineNettest::on_failure_asn_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpInvalidRequestLine::on_failure_cc_lookup(mk::nettest::events::FailureCcLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[2]) {
    mk::nettest::common::Nettest::on_failure_cc_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureCcLookupEvent **)&jarg0) = new mk::nettest::events::FailureCcLookupEvent((const mk::nettest::events::FailureCcLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[197], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpInvalidRequestLineNettest::on_failure_cc_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpInvalidRequestLine::on_failure_ip_lookup(mk::nettest::events::FailureIpLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[3]) {
    mk::nettest::common::Nettest::on_failure_ip_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureIpLookupEvent **)&jarg0) = new mk::nettest::events::FailureIpLookupEvent((const mk::nettest::events::FailureIpLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[198], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpInvalidRequestLineNettest::on_failure_ip_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpInvalidRequestLine::on_failure_measurement(mk::nettest::events::FailureMeasurementEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[4]) {
    mk::nettest::common::Nettest::on_failure_measurement(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureMeasurementEvent **)&jarg0) = new mk::nettest::events::FailureMeasurementEvent((const mk::nettest::events::FailureMeasurementEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[199], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpInvalidRequestLineNettest::on_failure_measurement ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpInvalidRequestLine::on_failure_measurement_submission(mk::nettest::events::FailureMeasurementSubmissionEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[5]) {
    mk::nettest::common::Nettest::on_failure_measurement_submission(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureMeasurementSubmissionEvent **)&jarg0) = new mk::nettest::events::FailureMeasurementSubmissionEvent((const mk::nettest::events::FailureMeasurementSubmissionEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[200], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpInvalidRequestLineNettest::on_failure_measurement_submission ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpInvalidRequestLine::on_failure_report_create(mk::nettest::events::FailureReportCreateEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[6]) {
    mk::nettest::common::Nettest::on_failure_report_create(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureReportCreateEvent **)&jarg0) = new mk::nettest::events::FailureReportCreateEvent((const mk::nettest::events::FailureReportCreateEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[201], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpInvalidRequestLineNettest::on_failure_report_create ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpInvalidRequestLine::on_failure_report_close(mk::nettest::events::FailureReportCloseEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[7]) {
    mk::nettest::common::Nettest::on_failure_report_close(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureReportCloseEvent **)&jarg0) = new mk::nettest::events::FailureReportCloseEvent((const mk::nettest::events::FailureReportCloseEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[202], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpInvalidRequestLineNettest::on_failure_report_close ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpInvalidRequestLine::on_failure_resolver_lookup(mk::nettest::events::FailureResolverLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[8]) {
    mk::nettest::common::Nettest::on_failure_resolver_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureResolverLookupEvent **)&jarg0) = new mk::nettest::events::FailureResolverLookupEvent((const mk::nettest::events::FailureResolverLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[203], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpInvalidRequestLineNettest::on_failure_resolver_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpInvalidRequestLine::on_failure_startup(mk::nettest::events::FailureStartupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[9]) {
    mk::nettest::common::Nettest::on_failure_startup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureStartupEvent **)&jarg0) = new mk::nettest::events::FailureStartupEvent((const mk::nettest::events::FailureStartupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[204], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpInvalidRequestLineNettest::on_failure_startup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpInvalidRequestLine::on_log(mk::nettest::events::LogEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[10]) {
    mk::nettest::common::Nettest::on_log(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::LogEvent **)&jarg0) = new mk::nettest::events::LogEvent((const mk::nettest::events::LogEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[205], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpInvalidRequestLineNettest::on_log ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpInvalidRequestLine::on_measurement(mk::nettest::events::MeasurementEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[11]) {
    mk::nettest::common::Nettest::on_measurement(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::MeasurementEvent **)&jarg0) = new mk::nettest::events::MeasurementEvent((const mk::nettest::events::MeasurementEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[206], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpInvalidRequestLineNettest::on_measurement ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpInvalidRequestLine::on_status_end(mk::nettest::events::StatusEndEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[12]) {
    mk::nettest::common::Nettest::on_status_end(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusEndEvent **)&jarg0) = new mk::nettest::events::StatusEndEvent((const mk::nettest::events::StatusEndEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[207], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpInvalidRequestLineNettest::on_status_end ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpInvalidRequestLine::on_status_geoip_lookup(mk::nettest::events::StatusGeoipLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[13]) {
    mk::nettest::common::Nettest::on_status_geoip_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusGeoipLookupEvent **)&jarg0) = new mk::nettest::events::StatusGeoipLookupEvent((const mk::nettest::events::StatusGeoipLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[208], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpInvalidRequestLineNettest::on_status_geoip_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpInvalidRequestLine::on_status_progress(mk::nettest::events::StatusProgressEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[14]) {
    mk::nettest::common::Nettest::on_status_progress(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusProgressEvent **)&jarg0) = new mk::nettest::events::StatusProgressEvent((const mk::nettest::events::StatusProgressEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[209], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpInvalidRequestLineNettest::on_status_progress ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpInvalidRequestLine::on_status_queued(mk::nettest::events::StatusQueuedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[15]) {
    mk::nettest::common::Nettest::on_status_queued(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusQueuedEvent **)&jarg0) = new mk::nettest::events::StatusQueuedEvent((const mk::nettest::events::StatusQueuedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[210], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpInvalidRequestLineNettest::on_status_queued ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpInvalidRequestLine::on_status_measurement_start(mk::nettest::events::StatusMeasurementStartEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[16]) {
    mk::nettest::common::Nettest::on_status_measurement_start(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementStartEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementStartEvent((const mk::nettest::events::StatusMeasurementStartEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[211], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpInvalidRequestLineNettest::on_status_measurement_start ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpInvalidRequestLine::on_status_measurement_submission(mk::nettest::events::StatusMeasurementSubmissionEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[17]) {
    mk::nettest::common::Nettest::on_status_measurement_submission(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementSubmissionEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementSubmissionEvent((const mk::nettest::events::StatusMeasurementSubmissionEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[212], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpInvalidRequestLineNettest::on_status_measurement_submission ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpInvalidRequestLine::on_status_measurement_done(mk::nettest::events::StatusMeasurementDoneEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[18]) {
    mk::nettest::common::Nettest::on_status_measurement_done(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementDoneEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementDoneEvent((const mk::nettest::events::StatusMeasurementDoneEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[213], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpInvalidRequestLineNettest::on_status_measurement_done ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpInvalidRequestLine::on_status_report_close(mk::nettest::events::StatusReportCloseEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[19]) {
    mk::nettest::common::Nettest::on_status_report_close(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusReportCloseEvent **)&jarg0) = new mk::nettest::events::StatusReportCloseEvent((const mk::nettest::events::StatusReportCloseEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[214], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpInvalidRequestLineNettest::on_status_report_close ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpInvalidRequestLine::on_status_report_create(mk::nettest::events::StatusReportCreateEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[20]) {
    mk::nettest::common::Nettest::on_status_report_create(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusReportCreateEvent **)&jarg0) = new mk::nettest::events::StatusReportCreateEvent((const mk::nettest::events::StatusReportCreateEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[215], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpInvalidRequestLineNettest::on_status_report_create ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpInvalidRequestLine::on_status_resolver_lookup(mk::nettest::events::StatusResolverLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[21]) {
    mk::nettest::common::Nettest::on_status_resolver_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusResolverLookupEvent **)&jarg0) = new mk::nettest::events::StatusResolverLookupEvent((const mk::nettest::events::StatusResolverLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[216], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpInvalidRequestLineNettest::on_status_resolver_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpInvalidRequestLine::on_status_started(mk::nettest::events::StatusStartedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[22]) {
    mk::nettest::common::Nettest::on_status_started(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusStartedEvent **)&jarg0) = new mk::nettest::events::StatusStartedEvent((const mk::nettest::events::StatusStartedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[217], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpInvalidRequestLineNettest::on_status_started ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestHttpInvalidRequestLine::on_task_terminated(mk::nettest::events::TaskTerminatedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[23]) {
    mk::nettest::common::Nettest::on_task_terminated(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::TaskTerminatedEvent **)&jarg0) = new mk::nettest::events::TaskTerminatedEvent((const mk::nettest::events::TaskTerminatedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[218], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::HttpInvalidRequestLineNettest::on_task_terminated ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_NettestHttpInvalidRequestLine::dispatch_event(nlohmann::json doc) {
  return mk::nettest::common::Nettest::dispatch_event(doc);
}

void SwigDirector_NettestHttpInvalidRequestLine::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "run", "()Z", NULL 
    },
    {
      "onFailureAsnLookup", "(Lio/ooni/mk/nettest/swig/EventFailureAsnLookup;)V", NULL 
    },
    {
      "onFailureCcLookup", "(Lio/ooni/mk/nettest/swig/EventFailureCcLookup;)V", NULL 
    },
    {
      "onFailureIpLookup", "(Lio/ooni/mk/nettest/swig/EventFailureIpLookup;)V", NULL 
    },
    {
      "onFailureMeasurement", "(Lio/ooni/mk/nettest/swig/EventFailureMeasurement;)V", NULL 
    },
    {
      "onFailureMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/EventFailureMeasurementSubmission;)V", NULL 
    },
    {
      "onFailureReportCreate", "(Lio/ooni/mk/nettest/swig/EventFailureReportCreate;)V", NULL 
    },
    {
      "onFailureReportClose", "(Lio/ooni/mk/nettest/swig/EventFailureReportClose;)V", NULL 
    },
    {
      "onFailureResolverLookup", "(Lio/ooni/mk/nettest/swig/EventFailureResolverLookup;)V", NULL 
    },
    {
      "onFailureStartup", "(Lio/ooni/mk/nettest/swig/EventFailureStartup;)V", NULL 
    },
    {
      "onLog", "(Lio/ooni/mk/nettest/swig/EventLog;)V", NULL 
    },
    {
      "onMeasurement", "(Lio/ooni/mk/nettest/swig/EventMeasurement;)V", NULL 
    },
    {
      "onStatusEnd", "(Lio/ooni/mk/nettest/swig/EventStatusEnd;)V", NULL 
    },
    {
      "onStatusGeoipLookup", "(Lio/ooni/mk/nettest/swig/EventStatusGeoipLookup;)V", NULL 
    },
    {
      "onStatusProgress", "(Lio/ooni/mk/nettest/swig/EventStatusProgress;)V", NULL 
    },
    {
      "onStatusQueued", "(Lio/ooni/mk/nettest/swig/EventStatusQueued;)V", NULL 
    },
    {
      "onStatusMeasurementStart", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementStart;)V", NULL 
    },
    {
      "onStatusMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementSubmission;)V", NULL 
    },
    {
      "onStatusMeasurementDone", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementDone;)V", NULL 
    },
    {
      "onStatusReportClose", "(Lio/ooni/mk/nettest/swig/EventStatusReportClose;)V", NULL 
    },
    {
      "onStatusReportCreate", "(Lio/ooni/mk/nettest/swig/EventStatusReportCreate;)V", NULL 
    },
    {
      "onStatusResolverLookup", "(Lio/ooni/mk/nettest/swig/EventStatusResolverLookup;)V", NULL 
    },
    {
      "onStatusStarted", "(Lio/ooni/mk/nettest/swig/EventStatusStarted;)V", NULL 
    },
    {
      "onTaskTerminated", "(Lio/ooni/mk/nettest/swig/EventTaskTerminated;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("io/ooni/mk/nettest/swig/NettestHttpInvalidRequestLine");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 24; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_NettestMeekFrontedRequests::SwigDirector_NettestMeekFrontedRequests(JNIEnv *jenv, mk::nettest::MeekFrontedRequestsSettings arg0) : mk::nettest::MeekFrontedRequestsNettest(arg0), Swig::Director(jenv) {
}

SwigDirector_NettestMeekFrontedRequests::~SwigDirector_NettestMeekFrontedRequests() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_NettestMeekFrontedRequests::run() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return mk::nettest::MeekFrontedRequestsNettest::run();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[219], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MeekFrontedRequestsNettest::run ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_NettestMeekFrontedRequests::on_failure_asn_lookup(mk::nettest::events::FailureAsnLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[1]) {
    mk::nettest::common::Nettest::on_failure_asn_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureAsnLookupEvent **)&jarg0) = new mk::nettest::events::FailureAsnLookupEvent((const mk::nettest::events::FailureAsnLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[220], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MeekFrontedRequestsNettest::on_failure_asn_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMeekFrontedRequests::on_failure_cc_lookup(mk::nettest::events::FailureCcLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[2]) {
    mk::nettest::common::Nettest::on_failure_cc_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureCcLookupEvent **)&jarg0) = new mk::nettest::events::FailureCcLookupEvent((const mk::nettest::events::FailureCcLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[221], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MeekFrontedRequestsNettest::on_failure_cc_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMeekFrontedRequests::on_failure_ip_lookup(mk::nettest::events::FailureIpLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[3]) {
    mk::nettest::common::Nettest::on_failure_ip_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureIpLookupEvent **)&jarg0) = new mk::nettest::events::FailureIpLookupEvent((const mk::nettest::events::FailureIpLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[222], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MeekFrontedRequestsNettest::on_failure_ip_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMeekFrontedRequests::on_failure_measurement(mk::nettest::events::FailureMeasurementEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[4]) {
    mk::nettest::common::Nettest::on_failure_measurement(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureMeasurementEvent **)&jarg0) = new mk::nettest::events::FailureMeasurementEvent((const mk::nettest::events::FailureMeasurementEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[223], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MeekFrontedRequestsNettest::on_failure_measurement ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMeekFrontedRequests::on_failure_measurement_submission(mk::nettest::events::FailureMeasurementSubmissionEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[5]) {
    mk::nettest::common::Nettest::on_failure_measurement_submission(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureMeasurementSubmissionEvent **)&jarg0) = new mk::nettest::events::FailureMeasurementSubmissionEvent((const mk::nettest::events::FailureMeasurementSubmissionEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[224], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MeekFrontedRequestsNettest::on_failure_measurement_submission ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMeekFrontedRequests::on_failure_report_create(mk::nettest::events::FailureReportCreateEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[6]) {
    mk::nettest::common::Nettest::on_failure_report_create(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureReportCreateEvent **)&jarg0) = new mk::nettest::events::FailureReportCreateEvent((const mk::nettest::events::FailureReportCreateEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[225], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MeekFrontedRequestsNettest::on_failure_report_create ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMeekFrontedRequests::on_failure_report_close(mk::nettest::events::FailureReportCloseEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[7]) {
    mk::nettest::common::Nettest::on_failure_report_close(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureReportCloseEvent **)&jarg0) = new mk::nettest::events::FailureReportCloseEvent((const mk::nettest::events::FailureReportCloseEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[226], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MeekFrontedRequestsNettest::on_failure_report_close ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMeekFrontedRequests::on_failure_resolver_lookup(mk::nettest::events::FailureResolverLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[8]) {
    mk::nettest::common::Nettest::on_failure_resolver_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureResolverLookupEvent **)&jarg0) = new mk::nettest::events::FailureResolverLookupEvent((const mk::nettest::events::FailureResolverLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[227], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MeekFrontedRequestsNettest::on_failure_resolver_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMeekFrontedRequests::on_failure_startup(mk::nettest::events::FailureStartupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[9]) {
    mk::nettest::common::Nettest::on_failure_startup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureStartupEvent **)&jarg0) = new mk::nettest::events::FailureStartupEvent((const mk::nettest::events::FailureStartupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[228], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MeekFrontedRequestsNettest::on_failure_startup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMeekFrontedRequests::on_log(mk::nettest::events::LogEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[10]) {
    mk::nettest::common::Nettest::on_log(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::LogEvent **)&jarg0) = new mk::nettest::events::LogEvent((const mk::nettest::events::LogEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[229], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MeekFrontedRequestsNettest::on_log ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMeekFrontedRequests::on_measurement(mk::nettest::events::MeasurementEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[11]) {
    mk::nettest::common::Nettest::on_measurement(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::MeasurementEvent **)&jarg0) = new mk::nettest::events::MeasurementEvent((const mk::nettest::events::MeasurementEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[230], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MeekFrontedRequestsNettest::on_measurement ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMeekFrontedRequests::on_status_end(mk::nettest::events::StatusEndEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[12]) {
    mk::nettest::common::Nettest::on_status_end(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusEndEvent **)&jarg0) = new mk::nettest::events::StatusEndEvent((const mk::nettest::events::StatusEndEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[231], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MeekFrontedRequestsNettest::on_status_end ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMeekFrontedRequests::on_status_geoip_lookup(mk::nettest::events::StatusGeoipLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[13]) {
    mk::nettest::common::Nettest::on_status_geoip_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusGeoipLookupEvent **)&jarg0) = new mk::nettest::events::StatusGeoipLookupEvent((const mk::nettest::events::StatusGeoipLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[232], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MeekFrontedRequestsNettest::on_status_geoip_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMeekFrontedRequests::on_status_progress(mk::nettest::events::StatusProgressEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[14]) {
    mk::nettest::common::Nettest::on_status_progress(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusProgressEvent **)&jarg0) = new mk::nettest::events::StatusProgressEvent((const mk::nettest::events::StatusProgressEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[233], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MeekFrontedRequestsNettest::on_status_progress ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMeekFrontedRequests::on_status_queued(mk::nettest::events::StatusQueuedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[15]) {
    mk::nettest::common::Nettest::on_status_queued(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusQueuedEvent **)&jarg0) = new mk::nettest::events::StatusQueuedEvent((const mk::nettest::events::StatusQueuedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[234], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MeekFrontedRequestsNettest::on_status_queued ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMeekFrontedRequests::on_status_measurement_start(mk::nettest::events::StatusMeasurementStartEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[16]) {
    mk::nettest::common::Nettest::on_status_measurement_start(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementStartEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementStartEvent((const mk::nettest::events::StatusMeasurementStartEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[235], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MeekFrontedRequestsNettest::on_status_measurement_start ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMeekFrontedRequests::on_status_measurement_submission(mk::nettest::events::StatusMeasurementSubmissionEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[17]) {
    mk::nettest::common::Nettest::on_status_measurement_submission(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementSubmissionEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementSubmissionEvent((const mk::nettest::events::StatusMeasurementSubmissionEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[236], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MeekFrontedRequestsNettest::on_status_measurement_submission ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMeekFrontedRequests::on_status_measurement_done(mk::nettest::events::StatusMeasurementDoneEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[18]) {
    mk::nettest::common::Nettest::on_status_measurement_done(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementDoneEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementDoneEvent((const mk::nettest::events::StatusMeasurementDoneEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[237], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MeekFrontedRequestsNettest::on_status_measurement_done ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMeekFrontedRequests::on_status_report_close(mk::nettest::events::StatusReportCloseEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[19]) {
    mk::nettest::common::Nettest::on_status_report_close(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusReportCloseEvent **)&jarg0) = new mk::nettest::events::StatusReportCloseEvent((const mk::nettest::events::StatusReportCloseEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[238], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MeekFrontedRequestsNettest::on_status_report_close ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMeekFrontedRequests::on_status_report_create(mk::nettest::events::StatusReportCreateEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[20]) {
    mk::nettest::common::Nettest::on_status_report_create(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusReportCreateEvent **)&jarg0) = new mk::nettest::events::StatusReportCreateEvent((const mk::nettest::events::StatusReportCreateEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[239], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MeekFrontedRequestsNettest::on_status_report_create ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMeekFrontedRequests::on_status_resolver_lookup(mk::nettest::events::StatusResolverLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[21]) {
    mk::nettest::common::Nettest::on_status_resolver_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusResolverLookupEvent **)&jarg0) = new mk::nettest::events::StatusResolverLookupEvent((const mk::nettest::events::StatusResolverLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[240], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MeekFrontedRequestsNettest::on_status_resolver_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMeekFrontedRequests::on_status_started(mk::nettest::events::StatusStartedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[22]) {
    mk::nettest::common::Nettest::on_status_started(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusStartedEvent **)&jarg0) = new mk::nettest::events::StatusStartedEvent((const mk::nettest::events::StatusStartedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[241], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MeekFrontedRequestsNettest::on_status_started ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMeekFrontedRequests::on_task_terminated(mk::nettest::events::TaskTerminatedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[23]) {
    mk::nettest::common::Nettest::on_task_terminated(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::TaskTerminatedEvent **)&jarg0) = new mk::nettest::events::TaskTerminatedEvent((const mk::nettest::events::TaskTerminatedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[242], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MeekFrontedRequestsNettest::on_task_terminated ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_NettestMeekFrontedRequests::dispatch_event(nlohmann::json doc) {
  return mk::nettest::common::Nettest::dispatch_event(doc);
}

void SwigDirector_NettestMeekFrontedRequests::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "run", "()Z", NULL 
    },
    {
      "onFailureAsnLookup", "(Lio/ooni/mk/nettest/swig/EventFailureAsnLookup;)V", NULL 
    },
    {
      "onFailureCcLookup", "(Lio/ooni/mk/nettest/swig/EventFailureCcLookup;)V", NULL 
    },
    {
      "onFailureIpLookup", "(Lio/ooni/mk/nettest/swig/EventFailureIpLookup;)V", NULL 
    },
    {
      "onFailureMeasurement", "(Lio/ooni/mk/nettest/swig/EventFailureMeasurement;)V", NULL 
    },
    {
      "onFailureMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/EventFailureMeasurementSubmission;)V", NULL 
    },
    {
      "onFailureReportCreate", "(Lio/ooni/mk/nettest/swig/EventFailureReportCreate;)V", NULL 
    },
    {
      "onFailureReportClose", "(Lio/ooni/mk/nettest/swig/EventFailureReportClose;)V", NULL 
    },
    {
      "onFailureResolverLookup", "(Lio/ooni/mk/nettest/swig/EventFailureResolverLookup;)V", NULL 
    },
    {
      "onFailureStartup", "(Lio/ooni/mk/nettest/swig/EventFailureStartup;)V", NULL 
    },
    {
      "onLog", "(Lio/ooni/mk/nettest/swig/EventLog;)V", NULL 
    },
    {
      "onMeasurement", "(Lio/ooni/mk/nettest/swig/EventMeasurement;)V", NULL 
    },
    {
      "onStatusEnd", "(Lio/ooni/mk/nettest/swig/EventStatusEnd;)V", NULL 
    },
    {
      "onStatusGeoipLookup", "(Lio/ooni/mk/nettest/swig/EventStatusGeoipLookup;)V", NULL 
    },
    {
      "onStatusProgress", "(Lio/ooni/mk/nettest/swig/EventStatusProgress;)V", NULL 
    },
    {
      "onStatusQueued", "(Lio/ooni/mk/nettest/swig/EventStatusQueued;)V", NULL 
    },
    {
      "onStatusMeasurementStart", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementStart;)V", NULL 
    },
    {
      "onStatusMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementSubmission;)V", NULL 
    },
    {
      "onStatusMeasurementDone", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementDone;)V", NULL 
    },
    {
      "onStatusReportClose", "(Lio/ooni/mk/nettest/swig/EventStatusReportClose;)V", NULL 
    },
    {
      "onStatusReportCreate", "(Lio/ooni/mk/nettest/swig/EventStatusReportCreate;)V", NULL 
    },
    {
      "onStatusResolverLookup", "(Lio/ooni/mk/nettest/swig/EventStatusResolverLookup;)V", NULL 
    },
    {
      "onStatusStarted", "(Lio/ooni/mk/nettest/swig/EventStatusStarted;)V", NULL 
    },
    {
      "onTaskTerminated", "(Lio/ooni/mk/nettest/swig/EventTaskTerminated;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("io/ooni/mk/nettest/swig/NettestMeekFrontedRequests");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 24; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_NettestMultiNdt::SwigDirector_NettestMultiNdt(JNIEnv *jenv, mk::nettest::MultiNdtSettings arg0) : mk::nettest::MultiNdtNettest(arg0), Swig::Director(jenv) {
}

SwigDirector_NettestMultiNdt::~SwigDirector_NettestMultiNdt() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_NettestMultiNdt::run() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return mk::nettest::MultiNdtNettest::run();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[243], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MultiNdtNettest::run ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_NettestMultiNdt::on_failure_asn_lookup(mk::nettest::events::FailureAsnLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[1]) {
    mk::nettest::common::Nettest::on_failure_asn_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureAsnLookupEvent **)&jarg0) = new mk::nettest::events::FailureAsnLookupEvent((const mk::nettest::events::FailureAsnLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[244], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MultiNdtNettest::on_failure_asn_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMultiNdt::on_failure_cc_lookup(mk::nettest::events::FailureCcLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[2]) {
    mk::nettest::common::Nettest::on_failure_cc_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureCcLookupEvent **)&jarg0) = new mk::nettest::events::FailureCcLookupEvent((const mk::nettest::events::FailureCcLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[245], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MultiNdtNettest::on_failure_cc_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMultiNdt::on_failure_ip_lookup(mk::nettest::events::FailureIpLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[3]) {
    mk::nettest::common::Nettest::on_failure_ip_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureIpLookupEvent **)&jarg0) = new mk::nettest::events::FailureIpLookupEvent((const mk::nettest::events::FailureIpLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[246], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MultiNdtNettest::on_failure_ip_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMultiNdt::on_failure_measurement(mk::nettest::events::FailureMeasurementEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[4]) {
    mk::nettest::common::Nettest::on_failure_measurement(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureMeasurementEvent **)&jarg0) = new mk::nettest::events::FailureMeasurementEvent((const mk::nettest::events::FailureMeasurementEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[247], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MultiNdtNettest::on_failure_measurement ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMultiNdt::on_failure_measurement_submission(mk::nettest::events::FailureMeasurementSubmissionEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[5]) {
    mk::nettest::common::Nettest::on_failure_measurement_submission(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureMeasurementSubmissionEvent **)&jarg0) = new mk::nettest::events::FailureMeasurementSubmissionEvent((const mk::nettest::events::FailureMeasurementSubmissionEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[248], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MultiNdtNettest::on_failure_measurement_submission ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMultiNdt::on_failure_report_create(mk::nettest::events::FailureReportCreateEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[6]) {
    mk::nettest::common::Nettest::on_failure_report_create(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureReportCreateEvent **)&jarg0) = new mk::nettest::events::FailureReportCreateEvent((const mk::nettest::events::FailureReportCreateEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[249], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MultiNdtNettest::on_failure_report_create ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMultiNdt::on_failure_report_close(mk::nettest::events::FailureReportCloseEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[7]) {
    mk::nettest::common::Nettest::on_failure_report_close(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureReportCloseEvent **)&jarg0) = new mk::nettest::events::FailureReportCloseEvent((const mk::nettest::events::FailureReportCloseEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[250], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MultiNdtNettest::on_failure_report_close ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMultiNdt::on_failure_resolver_lookup(mk::nettest::events::FailureResolverLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[8]) {
    mk::nettest::common::Nettest::on_failure_resolver_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureResolverLookupEvent **)&jarg0) = new mk::nettest::events::FailureResolverLookupEvent((const mk::nettest::events::FailureResolverLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[251], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MultiNdtNettest::on_failure_resolver_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMultiNdt::on_failure_startup(mk::nettest::events::FailureStartupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[9]) {
    mk::nettest::common::Nettest::on_failure_startup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureStartupEvent **)&jarg0) = new mk::nettest::events::FailureStartupEvent((const mk::nettest::events::FailureStartupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[252], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MultiNdtNettest::on_failure_startup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMultiNdt::on_log(mk::nettest::events::LogEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[10]) {
    mk::nettest::common::Nettest::on_log(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::LogEvent **)&jarg0) = new mk::nettest::events::LogEvent((const mk::nettest::events::LogEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[253], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MultiNdtNettest::on_log ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMultiNdt::on_measurement(mk::nettest::events::MeasurementEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[11]) {
    mk::nettest::common::Nettest::on_measurement(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::MeasurementEvent **)&jarg0) = new mk::nettest::events::MeasurementEvent((const mk::nettest::events::MeasurementEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[254], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MultiNdtNettest::on_measurement ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMultiNdt::on_status_end(mk::nettest::events::StatusEndEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[12]) {
    mk::nettest::common::Nettest::on_status_end(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusEndEvent **)&jarg0) = new mk::nettest::events::StatusEndEvent((const mk::nettest::events::StatusEndEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[255], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MultiNdtNettest::on_status_end ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMultiNdt::on_status_geoip_lookup(mk::nettest::events::StatusGeoipLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[13]) {
    mk::nettest::common::Nettest::on_status_geoip_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusGeoipLookupEvent **)&jarg0) = new mk::nettest::events::StatusGeoipLookupEvent((const mk::nettest::events::StatusGeoipLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[256], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MultiNdtNettest::on_status_geoip_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMultiNdt::on_status_progress(mk::nettest::events::StatusProgressEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[14]) {
    mk::nettest::common::Nettest::on_status_progress(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusProgressEvent **)&jarg0) = new mk::nettest::events::StatusProgressEvent((const mk::nettest::events::StatusProgressEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[257], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MultiNdtNettest::on_status_progress ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMultiNdt::on_status_queued(mk::nettest::events::StatusQueuedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[15]) {
    mk::nettest::common::Nettest::on_status_queued(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusQueuedEvent **)&jarg0) = new mk::nettest::events::StatusQueuedEvent((const mk::nettest::events::StatusQueuedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[258], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MultiNdtNettest::on_status_queued ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMultiNdt::on_status_measurement_start(mk::nettest::events::StatusMeasurementStartEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[16]) {
    mk::nettest::common::Nettest::on_status_measurement_start(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementStartEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementStartEvent((const mk::nettest::events::StatusMeasurementStartEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[259], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MultiNdtNettest::on_status_measurement_start ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMultiNdt::on_status_measurement_submission(mk::nettest::events::StatusMeasurementSubmissionEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[17]) {
    mk::nettest::common::Nettest::on_status_measurement_submission(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementSubmissionEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementSubmissionEvent((const mk::nettest::events::StatusMeasurementSubmissionEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[260], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MultiNdtNettest::on_status_measurement_submission ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMultiNdt::on_status_measurement_done(mk::nettest::events::StatusMeasurementDoneEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[18]) {
    mk::nettest::common::Nettest::on_status_measurement_done(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementDoneEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementDoneEvent((const mk::nettest::events::StatusMeasurementDoneEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[261], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MultiNdtNettest::on_status_measurement_done ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMultiNdt::on_status_report_close(mk::nettest::events::StatusReportCloseEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[19]) {
    mk::nettest::common::Nettest::on_status_report_close(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusReportCloseEvent **)&jarg0) = new mk::nettest::events::StatusReportCloseEvent((const mk::nettest::events::StatusReportCloseEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[262], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MultiNdtNettest::on_status_report_close ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMultiNdt::on_status_report_create(mk::nettest::events::StatusReportCreateEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[20]) {
    mk::nettest::common::Nettest::on_status_report_create(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusReportCreateEvent **)&jarg0) = new mk::nettest::events::StatusReportCreateEvent((const mk::nettest::events::StatusReportCreateEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[263], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MultiNdtNettest::on_status_report_create ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMultiNdt::on_status_resolver_lookup(mk::nettest::events::StatusResolverLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[21]) {
    mk::nettest::common::Nettest::on_status_resolver_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusResolverLookupEvent **)&jarg0) = new mk::nettest::events::StatusResolverLookupEvent((const mk::nettest::events::StatusResolverLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[264], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MultiNdtNettest::on_status_resolver_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMultiNdt::on_status_started(mk::nettest::events::StatusStartedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[22]) {
    mk::nettest::common::Nettest::on_status_started(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusStartedEvent **)&jarg0) = new mk::nettest::events::StatusStartedEvent((const mk::nettest::events::StatusStartedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[265], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MultiNdtNettest::on_status_started ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMultiNdt::on_task_terminated(mk::nettest::events::TaskTerminatedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[23]) {
    mk::nettest::common::Nettest::on_task_terminated(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::TaskTerminatedEvent **)&jarg0) = new mk::nettest::events::TaskTerminatedEvent((const mk::nettest::events::TaskTerminatedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[266], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MultiNdtNettest::on_task_terminated ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_NettestMultiNdt::dispatch_event(nlohmann::json doc) {
  return mk::nettest::common::PerformanceNettest::dispatch_event(doc);
}

void SwigDirector_NettestMultiNdt::on_status_update_performance(mk::nettest::events::StatusUpdatePerformanceEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[24]) {
    mk::nettest::common::PerformanceNettest::on_status_update_performance(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusUpdatePerformanceEvent **)&jarg0) = new mk::nettest::events::StatusUpdatePerformanceEvent((const mk::nettest::events::StatusUpdatePerformanceEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[267], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::MultiNdtNettest::on_status_update_performance ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestMultiNdt::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "run", "()Z", NULL 
    },
    {
      "onFailureAsnLookup", "(Lio/ooni/mk/nettest/swig/EventFailureAsnLookup;)V", NULL 
    },
    {
      "onFailureCcLookup", "(Lio/ooni/mk/nettest/swig/EventFailureCcLookup;)V", NULL 
    },
    {
      "onFailureIpLookup", "(Lio/ooni/mk/nettest/swig/EventFailureIpLookup;)V", NULL 
    },
    {
      "onFailureMeasurement", "(Lio/ooni/mk/nettest/swig/EventFailureMeasurement;)V", NULL 
    },
    {
      "onFailureMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/EventFailureMeasurementSubmission;)V", NULL 
    },
    {
      "onFailureReportCreate", "(Lio/ooni/mk/nettest/swig/EventFailureReportCreate;)V", NULL 
    },
    {
      "onFailureReportClose", "(Lio/ooni/mk/nettest/swig/EventFailureReportClose;)V", NULL 
    },
    {
      "onFailureResolverLookup", "(Lio/ooni/mk/nettest/swig/EventFailureResolverLookup;)V", NULL 
    },
    {
      "onFailureStartup", "(Lio/ooni/mk/nettest/swig/EventFailureStartup;)V", NULL 
    },
    {
      "onLog", "(Lio/ooni/mk/nettest/swig/EventLog;)V", NULL 
    },
    {
      "onMeasurement", "(Lio/ooni/mk/nettest/swig/EventMeasurement;)V", NULL 
    },
    {
      "onStatusEnd", "(Lio/ooni/mk/nettest/swig/EventStatusEnd;)V", NULL 
    },
    {
      "onStatusGeoipLookup", "(Lio/ooni/mk/nettest/swig/EventStatusGeoipLookup;)V", NULL 
    },
    {
      "onStatusProgress", "(Lio/ooni/mk/nettest/swig/EventStatusProgress;)V", NULL 
    },
    {
      "onStatusQueued", "(Lio/ooni/mk/nettest/swig/EventStatusQueued;)V", NULL 
    },
    {
      "onStatusMeasurementStart", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementStart;)V", NULL 
    },
    {
      "onStatusMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementSubmission;)V", NULL 
    },
    {
      "onStatusMeasurementDone", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementDone;)V", NULL 
    },
    {
      "onStatusReportClose", "(Lio/ooni/mk/nettest/swig/EventStatusReportClose;)V", NULL 
    },
    {
      "onStatusReportCreate", "(Lio/ooni/mk/nettest/swig/EventStatusReportCreate;)V", NULL 
    },
    {
      "onStatusResolverLookup", "(Lio/ooni/mk/nettest/swig/EventStatusResolverLookup;)V", NULL 
    },
    {
      "onStatusStarted", "(Lio/ooni/mk/nettest/swig/EventStatusStarted;)V", NULL 
    },
    {
      "onTaskTerminated", "(Lio/ooni/mk/nettest/swig/EventTaskTerminated;)V", NULL 
    },
    {
      "onStatusUpdatePerformance", "(Lio/ooni/mk/nettest/swig/EventStatusUpdatePerformance;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("io/ooni/mk/nettest/swig/NettestMultiNdt");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 25; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_NettestNdt::SwigDirector_NettestNdt(JNIEnv *jenv, mk::nettest::NdtSettings arg0) : mk::nettest::NdtNettest(arg0), Swig::Director(jenv) {
}

SwigDirector_NettestNdt::~SwigDirector_NettestNdt() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_NettestNdt::run() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return mk::nettest::NdtNettest::run();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[268], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::NdtNettest::run ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_NettestNdt::on_failure_asn_lookup(mk::nettest::events::FailureAsnLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[1]) {
    mk::nettest::common::Nettest::on_failure_asn_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureAsnLookupEvent **)&jarg0) = new mk::nettest::events::FailureAsnLookupEvent((const mk::nettest::events::FailureAsnLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[269], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::NdtNettest::on_failure_asn_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestNdt::on_failure_cc_lookup(mk::nettest::events::FailureCcLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[2]) {
    mk::nettest::common::Nettest::on_failure_cc_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureCcLookupEvent **)&jarg0) = new mk::nettest::events::FailureCcLookupEvent((const mk::nettest::events::FailureCcLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[270], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::NdtNettest::on_failure_cc_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestNdt::on_failure_ip_lookup(mk::nettest::events::FailureIpLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[3]) {
    mk::nettest::common::Nettest::on_failure_ip_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureIpLookupEvent **)&jarg0) = new mk::nettest::events::FailureIpLookupEvent((const mk::nettest::events::FailureIpLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[271], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::NdtNettest::on_failure_ip_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestNdt::on_failure_measurement(mk::nettest::events::FailureMeasurementEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[4]) {
    mk::nettest::common::Nettest::on_failure_measurement(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureMeasurementEvent **)&jarg0) = new mk::nettest::events::FailureMeasurementEvent((const mk::nettest::events::FailureMeasurementEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[272], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::NdtNettest::on_failure_measurement ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestNdt::on_failure_measurement_submission(mk::nettest::events::FailureMeasurementSubmissionEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[5]) {
    mk::nettest::common::Nettest::on_failure_measurement_submission(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureMeasurementSubmissionEvent **)&jarg0) = new mk::nettest::events::FailureMeasurementSubmissionEvent((const mk::nettest::events::FailureMeasurementSubmissionEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[273], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::NdtNettest::on_failure_measurement_submission ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestNdt::on_failure_report_create(mk::nettest::events::FailureReportCreateEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[6]) {
    mk::nettest::common::Nettest::on_failure_report_create(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureReportCreateEvent **)&jarg0) = new mk::nettest::events::FailureReportCreateEvent((const mk::nettest::events::FailureReportCreateEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[274], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::NdtNettest::on_failure_report_create ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestNdt::on_failure_report_close(mk::nettest::events::FailureReportCloseEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[7]) {
    mk::nettest::common::Nettest::on_failure_report_close(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureReportCloseEvent **)&jarg0) = new mk::nettest::events::FailureReportCloseEvent((const mk::nettest::events::FailureReportCloseEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[275], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::NdtNettest::on_failure_report_close ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestNdt::on_failure_resolver_lookup(mk::nettest::events::FailureResolverLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[8]) {
    mk::nettest::common::Nettest::on_failure_resolver_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureResolverLookupEvent **)&jarg0) = new mk::nettest::events::FailureResolverLookupEvent((const mk::nettest::events::FailureResolverLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[276], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::NdtNettest::on_failure_resolver_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestNdt::on_failure_startup(mk::nettest::events::FailureStartupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[9]) {
    mk::nettest::common::Nettest::on_failure_startup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureStartupEvent **)&jarg0) = new mk::nettest::events::FailureStartupEvent((const mk::nettest::events::FailureStartupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[277], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::NdtNettest::on_failure_startup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestNdt::on_log(mk::nettest::events::LogEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[10]) {
    mk::nettest::common::Nettest::on_log(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::LogEvent **)&jarg0) = new mk::nettest::events::LogEvent((const mk::nettest::events::LogEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[278], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::NdtNettest::on_log ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestNdt::on_measurement(mk::nettest::events::MeasurementEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[11]) {
    mk::nettest::common::Nettest::on_measurement(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::MeasurementEvent **)&jarg0) = new mk::nettest::events::MeasurementEvent((const mk::nettest::events::MeasurementEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[279], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::NdtNettest::on_measurement ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestNdt::on_status_end(mk::nettest::events::StatusEndEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[12]) {
    mk::nettest::common::Nettest::on_status_end(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusEndEvent **)&jarg0) = new mk::nettest::events::StatusEndEvent((const mk::nettest::events::StatusEndEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[280], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::NdtNettest::on_status_end ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestNdt::on_status_geoip_lookup(mk::nettest::events::StatusGeoipLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[13]) {
    mk::nettest::common::Nettest::on_status_geoip_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusGeoipLookupEvent **)&jarg0) = new mk::nettest::events::StatusGeoipLookupEvent((const mk::nettest::events::StatusGeoipLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[281], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::NdtNettest::on_status_geoip_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestNdt::on_status_progress(mk::nettest::events::StatusProgressEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[14]) {
    mk::nettest::common::Nettest::on_status_progress(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusProgressEvent **)&jarg0) = new mk::nettest::events::StatusProgressEvent((const mk::nettest::events::StatusProgressEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[282], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::NdtNettest::on_status_progress ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestNdt::on_status_queued(mk::nettest::events::StatusQueuedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[15]) {
    mk::nettest::common::Nettest::on_status_queued(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusQueuedEvent **)&jarg0) = new mk::nettest::events::StatusQueuedEvent((const mk::nettest::events::StatusQueuedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[283], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::NdtNettest::on_status_queued ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestNdt::on_status_measurement_start(mk::nettest::events::StatusMeasurementStartEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[16]) {
    mk::nettest::common::Nettest::on_status_measurement_start(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementStartEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementStartEvent((const mk::nettest::events::StatusMeasurementStartEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[284], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::NdtNettest::on_status_measurement_start ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestNdt::on_status_measurement_submission(mk::nettest::events::StatusMeasurementSubmissionEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[17]) {
    mk::nettest::common::Nettest::on_status_measurement_submission(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementSubmissionEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementSubmissionEvent((const mk::nettest::events::StatusMeasurementSubmissionEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[285], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::NdtNettest::on_status_measurement_submission ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestNdt::on_status_measurement_done(mk::nettest::events::StatusMeasurementDoneEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[18]) {
    mk::nettest::common::Nettest::on_status_measurement_done(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementDoneEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementDoneEvent((const mk::nettest::events::StatusMeasurementDoneEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[286], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::NdtNettest::on_status_measurement_done ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestNdt::on_status_report_close(mk::nettest::events::StatusReportCloseEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[19]) {
    mk::nettest::common::Nettest::on_status_report_close(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusReportCloseEvent **)&jarg0) = new mk::nettest::events::StatusReportCloseEvent((const mk::nettest::events::StatusReportCloseEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[287], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::NdtNettest::on_status_report_close ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestNdt::on_status_report_create(mk::nettest::events::StatusReportCreateEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[20]) {
    mk::nettest::common::Nettest::on_status_report_create(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusReportCreateEvent **)&jarg0) = new mk::nettest::events::StatusReportCreateEvent((const mk::nettest::events::StatusReportCreateEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[288], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::NdtNettest::on_status_report_create ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestNdt::on_status_resolver_lookup(mk::nettest::events::StatusResolverLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[21]) {
    mk::nettest::common::Nettest::on_status_resolver_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusResolverLookupEvent **)&jarg0) = new mk::nettest::events::StatusResolverLookupEvent((const mk::nettest::events::StatusResolverLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[289], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::NdtNettest::on_status_resolver_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestNdt::on_status_started(mk::nettest::events::StatusStartedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[22]) {
    mk::nettest::common::Nettest::on_status_started(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusStartedEvent **)&jarg0) = new mk::nettest::events::StatusStartedEvent((const mk::nettest::events::StatusStartedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[290], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::NdtNettest::on_status_started ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestNdt::on_task_terminated(mk::nettest::events::TaskTerminatedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[23]) {
    mk::nettest::common::Nettest::on_task_terminated(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::TaskTerminatedEvent **)&jarg0) = new mk::nettest::events::TaskTerminatedEvent((const mk::nettest::events::TaskTerminatedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[291], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::NdtNettest::on_task_terminated ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_NettestNdt::dispatch_event(nlohmann::json doc) {
  return mk::nettest::common::PerformanceNettest::dispatch_event(doc);
}

void SwigDirector_NettestNdt::on_status_update_performance(mk::nettest::events::StatusUpdatePerformanceEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[24]) {
    mk::nettest::common::PerformanceNettest::on_status_update_performance(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusUpdatePerformanceEvent **)&jarg0) = new mk::nettest::events::StatusUpdatePerformanceEvent((const mk::nettest::events::StatusUpdatePerformanceEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[292], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::NdtNettest::on_status_update_performance ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestNdt::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "run", "()Z", NULL 
    },
    {
      "onFailureAsnLookup", "(Lio/ooni/mk/nettest/swig/EventFailureAsnLookup;)V", NULL 
    },
    {
      "onFailureCcLookup", "(Lio/ooni/mk/nettest/swig/EventFailureCcLookup;)V", NULL 
    },
    {
      "onFailureIpLookup", "(Lio/ooni/mk/nettest/swig/EventFailureIpLookup;)V", NULL 
    },
    {
      "onFailureMeasurement", "(Lio/ooni/mk/nettest/swig/EventFailureMeasurement;)V", NULL 
    },
    {
      "onFailureMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/EventFailureMeasurementSubmission;)V", NULL 
    },
    {
      "onFailureReportCreate", "(Lio/ooni/mk/nettest/swig/EventFailureReportCreate;)V", NULL 
    },
    {
      "onFailureReportClose", "(Lio/ooni/mk/nettest/swig/EventFailureReportClose;)V", NULL 
    },
    {
      "onFailureResolverLookup", "(Lio/ooni/mk/nettest/swig/EventFailureResolverLookup;)V", NULL 
    },
    {
      "onFailureStartup", "(Lio/ooni/mk/nettest/swig/EventFailureStartup;)V", NULL 
    },
    {
      "onLog", "(Lio/ooni/mk/nettest/swig/EventLog;)V", NULL 
    },
    {
      "onMeasurement", "(Lio/ooni/mk/nettest/swig/EventMeasurement;)V", NULL 
    },
    {
      "onStatusEnd", "(Lio/ooni/mk/nettest/swig/EventStatusEnd;)V", NULL 
    },
    {
      "onStatusGeoipLookup", "(Lio/ooni/mk/nettest/swig/EventStatusGeoipLookup;)V", NULL 
    },
    {
      "onStatusProgress", "(Lio/ooni/mk/nettest/swig/EventStatusProgress;)V", NULL 
    },
    {
      "onStatusQueued", "(Lio/ooni/mk/nettest/swig/EventStatusQueued;)V", NULL 
    },
    {
      "onStatusMeasurementStart", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementStart;)V", NULL 
    },
    {
      "onStatusMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementSubmission;)V", NULL 
    },
    {
      "onStatusMeasurementDone", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementDone;)V", NULL 
    },
    {
      "onStatusReportClose", "(Lio/ooni/mk/nettest/swig/EventStatusReportClose;)V", NULL 
    },
    {
      "onStatusReportCreate", "(Lio/ooni/mk/nettest/swig/EventStatusReportCreate;)V", NULL 
    },
    {
      "onStatusResolverLookup", "(Lio/ooni/mk/nettest/swig/EventStatusResolverLookup;)V", NULL 
    },
    {
      "onStatusStarted", "(Lio/ooni/mk/nettest/swig/EventStatusStarted;)V", NULL 
    },
    {
      "onTaskTerminated", "(Lio/ooni/mk/nettest/swig/EventTaskTerminated;)V", NULL 
    },
    {
      "onStatusUpdatePerformance", "(Lio/ooni/mk/nettest/swig/EventStatusUpdatePerformance;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("io/ooni/mk/nettest/swig/NettestNdt");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 25; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_NettestTcpConnect::SwigDirector_NettestTcpConnect(JNIEnv *jenv, mk::nettest::TcpConnectSettings arg0) : mk::nettest::TcpConnectNettest(arg0), Swig::Director(jenv) {
}

SwigDirector_NettestTcpConnect::~SwigDirector_NettestTcpConnect() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_NettestTcpConnect::run() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return mk::nettest::TcpConnectNettest::run();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[293], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TcpConnectNettest::run ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_NettestTcpConnect::on_failure_asn_lookup(mk::nettest::events::FailureAsnLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[1]) {
    mk::nettest::common::Nettest::on_failure_asn_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureAsnLookupEvent **)&jarg0) = new mk::nettest::events::FailureAsnLookupEvent((const mk::nettest::events::FailureAsnLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[294], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TcpConnectNettest::on_failure_asn_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTcpConnect::on_failure_cc_lookup(mk::nettest::events::FailureCcLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[2]) {
    mk::nettest::common::Nettest::on_failure_cc_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureCcLookupEvent **)&jarg0) = new mk::nettest::events::FailureCcLookupEvent((const mk::nettest::events::FailureCcLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[295], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TcpConnectNettest::on_failure_cc_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTcpConnect::on_failure_ip_lookup(mk::nettest::events::FailureIpLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[3]) {
    mk::nettest::common::Nettest::on_failure_ip_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureIpLookupEvent **)&jarg0) = new mk::nettest::events::FailureIpLookupEvent((const mk::nettest::events::FailureIpLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[296], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TcpConnectNettest::on_failure_ip_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTcpConnect::on_failure_measurement(mk::nettest::events::FailureMeasurementEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[4]) {
    mk::nettest::common::Nettest::on_failure_measurement(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureMeasurementEvent **)&jarg0) = new mk::nettest::events::FailureMeasurementEvent((const mk::nettest::events::FailureMeasurementEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[297], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TcpConnectNettest::on_failure_measurement ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTcpConnect::on_failure_measurement_submission(mk::nettest::events::FailureMeasurementSubmissionEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[5]) {
    mk::nettest::common::Nettest::on_failure_measurement_submission(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureMeasurementSubmissionEvent **)&jarg0) = new mk::nettest::events::FailureMeasurementSubmissionEvent((const mk::nettest::events::FailureMeasurementSubmissionEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[298], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TcpConnectNettest::on_failure_measurement_submission ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTcpConnect::on_failure_report_create(mk::nettest::events::FailureReportCreateEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[6]) {
    mk::nettest::common::Nettest::on_failure_report_create(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureReportCreateEvent **)&jarg0) = new mk::nettest::events::FailureReportCreateEvent((const mk::nettest::events::FailureReportCreateEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[299], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TcpConnectNettest::on_failure_report_create ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTcpConnect::on_failure_report_close(mk::nettest::events::FailureReportCloseEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[7]) {
    mk::nettest::common::Nettest::on_failure_report_close(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureReportCloseEvent **)&jarg0) = new mk::nettest::events::FailureReportCloseEvent((const mk::nettest::events::FailureReportCloseEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[300], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TcpConnectNettest::on_failure_report_close ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTcpConnect::on_failure_resolver_lookup(mk::nettest::events::FailureResolverLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[8]) {
    mk::nettest::common::Nettest::on_failure_resolver_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureResolverLookupEvent **)&jarg0) = new mk::nettest::events::FailureResolverLookupEvent((const mk::nettest::events::FailureResolverLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[301], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TcpConnectNettest::on_failure_resolver_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTcpConnect::on_failure_startup(mk::nettest::events::FailureStartupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[9]) {
    mk::nettest::common::Nettest::on_failure_startup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureStartupEvent **)&jarg0) = new mk::nettest::events::FailureStartupEvent((const mk::nettest::events::FailureStartupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[302], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TcpConnectNettest::on_failure_startup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTcpConnect::on_log(mk::nettest::events::LogEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[10]) {
    mk::nettest::common::Nettest::on_log(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::LogEvent **)&jarg0) = new mk::nettest::events::LogEvent((const mk::nettest::events::LogEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[303], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TcpConnectNettest::on_log ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTcpConnect::on_measurement(mk::nettest::events::MeasurementEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[11]) {
    mk::nettest::common::Nettest::on_measurement(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::MeasurementEvent **)&jarg0) = new mk::nettest::events::MeasurementEvent((const mk::nettest::events::MeasurementEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[304], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TcpConnectNettest::on_measurement ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTcpConnect::on_status_end(mk::nettest::events::StatusEndEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[12]) {
    mk::nettest::common::Nettest::on_status_end(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusEndEvent **)&jarg0) = new mk::nettest::events::StatusEndEvent((const mk::nettest::events::StatusEndEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[305], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TcpConnectNettest::on_status_end ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTcpConnect::on_status_geoip_lookup(mk::nettest::events::StatusGeoipLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[13]) {
    mk::nettest::common::Nettest::on_status_geoip_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusGeoipLookupEvent **)&jarg0) = new mk::nettest::events::StatusGeoipLookupEvent((const mk::nettest::events::StatusGeoipLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[306], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TcpConnectNettest::on_status_geoip_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTcpConnect::on_status_progress(mk::nettest::events::StatusProgressEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[14]) {
    mk::nettest::common::Nettest::on_status_progress(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusProgressEvent **)&jarg0) = new mk::nettest::events::StatusProgressEvent((const mk::nettest::events::StatusProgressEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[307], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TcpConnectNettest::on_status_progress ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTcpConnect::on_status_queued(mk::nettest::events::StatusQueuedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[15]) {
    mk::nettest::common::Nettest::on_status_queued(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusQueuedEvent **)&jarg0) = new mk::nettest::events::StatusQueuedEvent((const mk::nettest::events::StatusQueuedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[308], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TcpConnectNettest::on_status_queued ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTcpConnect::on_status_measurement_start(mk::nettest::events::StatusMeasurementStartEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[16]) {
    mk::nettest::common::Nettest::on_status_measurement_start(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementStartEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementStartEvent((const mk::nettest::events::StatusMeasurementStartEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[309], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TcpConnectNettest::on_status_measurement_start ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTcpConnect::on_status_measurement_submission(mk::nettest::events::StatusMeasurementSubmissionEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[17]) {
    mk::nettest::common::Nettest::on_status_measurement_submission(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementSubmissionEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementSubmissionEvent((const mk::nettest::events::StatusMeasurementSubmissionEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[310], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TcpConnectNettest::on_status_measurement_submission ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTcpConnect::on_status_measurement_done(mk::nettest::events::StatusMeasurementDoneEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[18]) {
    mk::nettest::common::Nettest::on_status_measurement_done(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementDoneEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementDoneEvent((const mk::nettest::events::StatusMeasurementDoneEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[311], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TcpConnectNettest::on_status_measurement_done ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTcpConnect::on_status_report_close(mk::nettest::events::StatusReportCloseEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[19]) {
    mk::nettest::common::Nettest::on_status_report_close(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusReportCloseEvent **)&jarg0) = new mk::nettest::events::StatusReportCloseEvent((const mk::nettest::events::StatusReportCloseEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[312], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TcpConnectNettest::on_status_report_close ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTcpConnect::on_status_report_create(mk::nettest::events::StatusReportCreateEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[20]) {
    mk::nettest::common::Nettest::on_status_report_create(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusReportCreateEvent **)&jarg0) = new mk::nettest::events::StatusReportCreateEvent((const mk::nettest::events::StatusReportCreateEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[313], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TcpConnectNettest::on_status_report_create ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTcpConnect::on_status_resolver_lookup(mk::nettest::events::StatusResolverLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[21]) {
    mk::nettest::common::Nettest::on_status_resolver_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusResolverLookupEvent **)&jarg0) = new mk::nettest::events::StatusResolverLookupEvent((const mk::nettest::events::StatusResolverLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[314], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TcpConnectNettest::on_status_resolver_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTcpConnect::on_status_started(mk::nettest::events::StatusStartedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[22]) {
    mk::nettest::common::Nettest::on_status_started(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusStartedEvent **)&jarg0) = new mk::nettest::events::StatusStartedEvent((const mk::nettest::events::StatusStartedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[315], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TcpConnectNettest::on_status_started ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTcpConnect::on_task_terminated(mk::nettest::events::TaskTerminatedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[23]) {
    mk::nettest::common::Nettest::on_task_terminated(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::TaskTerminatedEvent **)&jarg0) = new mk::nettest::events::TaskTerminatedEvent((const mk::nettest::events::TaskTerminatedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[316], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TcpConnectNettest::on_task_terminated ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_NettestTcpConnect::dispatch_event(nlohmann::json doc) {
  return mk::nettest::common::Nettest::dispatch_event(doc);
}

void SwigDirector_NettestTcpConnect::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "run", "()Z", NULL 
    },
    {
      "onFailureAsnLookup", "(Lio/ooni/mk/nettest/swig/EventFailureAsnLookup;)V", NULL 
    },
    {
      "onFailureCcLookup", "(Lio/ooni/mk/nettest/swig/EventFailureCcLookup;)V", NULL 
    },
    {
      "onFailureIpLookup", "(Lio/ooni/mk/nettest/swig/EventFailureIpLookup;)V", NULL 
    },
    {
      "onFailureMeasurement", "(Lio/ooni/mk/nettest/swig/EventFailureMeasurement;)V", NULL 
    },
    {
      "onFailureMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/EventFailureMeasurementSubmission;)V", NULL 
    },
    {
      "onFailureReportCreate", "(Lio/ooni/mk/nettest/swig/EventFailureReportCreate;)V", NULL 
    },
    {
      "onFailureReportClose", "(Lio/ooni/mk/nettest/swig/EventFailureReportClose;)V", NULL 
    },
    {
      "onFailureResolverLookup", "(Lio/ooni/mk/nettest/swig/EventFailureResolverLookup;)V", NULL 
    },
    {
      "onFailureStartup", "(Lio/ooni/mk/nettest/swig/EventFailureStartup;)V", NULL 
    },
    {
      "onLog", "(Lio/ooni/mk/nettest/swig/EventLog;)V", NULL 
    },
    {
      "onMeasurement", "(Lio/ooni/mk/nettest/swig/EventMeasurement;)V", NULL 
    },
    {
      "onStatusEnd", "(Lio/ooni/mk/nettest/swig/EventStatusEnd;)V", NULL 
    },
    {
      "onStatusGeoipLookup", "(Lio/ooni/mk/nettest/swig/EventStatusGeoipLookup;)V", NULL 
    },
    {
      "onStatusProgress", "(Lio/ooni/mk/nettest/swig/EventStatusProgress;)V", NULL 
    },
    {
      "onStatusQueued", "(Lio/ooni/mk/nettest/swig/EventStatusQueued;)V", NULL 
    },
    {
      "onStatusMeasurementStart", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementStart;)V", NULL 
    },
    {
      "onStatusMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementSubmission;)V", NULL 
    },
    {
      "onStatusMeasurementDone", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementDone;)V", NULL 
    },
    {
      "onStatusReportClose", "(Lio/ooni/mk/nettest/swig/EventStatusReportClose;)V", NULL 
    },
    {
      "onStatusReportCreate", "(Lio/ooni/mk/nettest/swig/EventStatusReportCreate;)V", NULL 
    },
    {
      "onStatusResolverLookup", "(Lio/ooni/mk/nettest/swig/EventStatusResolverLookup;)V", NULL 
    },
    {
      "onStatusStarted", "(Lio/ooni/mk/nettest/swig/EventStatusStarted;)V", NULL 
    },
    {
      "onTaskTerminated", "(Lio/ooni/mk/nettest/swig/EventTaskTerminated;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("io/ooni/mk/nettest/swig/NettestTcpConnect");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 24; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_NettestTelegram::SwigDirector_NettestTelegram(JNIEnv *jenv, mk::nettest::TelegramSettings arg0) : mk::nettest::TelegramNettest(arg0), Swig::Director(jenv) {
}

SwigDirector_NettestTelegram::~SwigDirector_NettestTelegram() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_NettestTelegram::run() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return mk::nettest::TelegramNettest::run();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[317], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TelegramNettest::run ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_NettestTelegram::on_failure_asn_lookup(mk::nettest::events::FailureAsnLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[1]) {
    mk::nettest::common::Nettest::on_failure_asn_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureAsnLookupEvent **)&jarg0) = new mk::nettest::events::FailureAsnLookupEvent((const mk::nettest::events::FailureAsnLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[318], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TelegramNettest::on_failure_asn_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTelegram::on_failure_cc_lookup(mk::nettest::events::FailureCcLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[2]) {
    mk::nettest::common::Nettest::on_failure_cc_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureCcLookupEvent **)&jarg0) = new mk::nettest::events::FailureCcLookupEvent((const mk::nettest::events::FailureCcLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[319], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TelegramNettest::on_failure_cc_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTelegram::on_failure_ip_lookup(mk::nettest::events::FailureIpLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[3]) {
    mk::nettest::common::Nettest::on_failure_ip_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureIpLookupEvent **)&jarg0) = new mk::nettest::events::FailureIpLookupEvent((const mk::nettest::events::FailureIpLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[320], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TelegramNettest::on_failure_ip_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTelegram::on_failure_measurement(mk::nettest::events::FailureMeasurementEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[4]) {
    mk::nettest::common::Nettest::on_failure_measurement(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureMeasurementEvent **)&jarg0) = new mk::nettest::events::FailureMeasurementEvent((const mk::nettest::events::FailureMeasurementEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[321], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TelegramNettest::on_failure_measurement ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTelegram::on_failure_measurement_submission(mk::nettest::events::FailureMeasurementSubmissionEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[5]) {
    mk::nettest::common::Nettest::on_failure_measurement_submission(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureMeasurementSubmissionEvent **)&jarg0) = new mk::nettest::events::FailureMeasurementSubmissionEvent((const mk::nettest::events::FailureMeasurementSubmissionEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[322], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TelegramNettest::on_failure_measurement_submission ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTelegram::on_failure_report_create(mk::nettest::events::FailureReportCreateEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[6]) {
    mk::nettest::common::Nettest::on_failure_report_create(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureReportCreateEvent **)&jarg0) = new mk::nettest::events::FailureReportCreateEvent((const mk::nettest::events::FailureReportCreateEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[323], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TelegramNettest::on_failure_report_create ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTelegram::on_failure_report_close(mk::nettest::events::FailureReportCloseEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[7]) {
    mk::nettest::common::Nettest::on_failure_report_close(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureReportCloseEvent **)&jarg0) = new mk::nettest::events::FailureReportCloseEvent((const mk::nettest::events::FailureReportCloseEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[324], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TelegramNettest::on_failure_report_close ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTelegram::on_failure_resolver_lookup(mk::nettest::events::FailureResolverLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[8]) {
    mk::nettest::common::Nettest::on_failure_resolver_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureResolverLookupEvent **)&jarg0) = new mk::nettest::events::FailureResolverLookupEvent((const mk::nettest::events::FailureResolverLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[325], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TelegramNettest::on_failure_resolver_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTelegram::on_failure_startup(mk::nettest::events::FailureStartupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[9]) {
    mk::nettest::common::Nettest::on_failure_startup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureStartupEvent **)&jarg0) = new mk::nettest::events::FailureStartupEvent((const mk::nettest::events::FailureStartupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[326], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TelegramNettest::on_failure_startup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTelegram::on_log(mk::nettest::events::LogEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[10]) {
    mk::nettest::common::Nettest::on_log(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::LogEvent **)&jarg0) = new mk::nettest::events::LogEvent((const mk::nettest::events::LogEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[327], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TelegramNettest::on_log ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTelegram::on_measurement(mk::nettest::events::MeasurementEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[11]) {
    mk::nettest::common::Nettest::on_measurement(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::MeasurementEvent **)&jarg0) = new mk::nettest::events::MeasurementEvent((const mk::nettest::events::MeasurementEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[328], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TelegramNettest::on_measurement ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTelegram::on_status_end(mk::nettest::events::StatusEndEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[12]) {
    mk::nettest::common::Nettest::on_status_end(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusEndEvent **)&jarg0) = new mk::nettest::events::StatusEndEvent((const mk::nettest::events::StatusEndEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[329], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TelegramNettest::on_status_end ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTelegram::on_status_geoip_lookup(mk::nettest::events::StatusGeoipLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[13]) {
    mk::nettest::common::Nettest::on_status_geoip_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusGeoipLookupEvent **)&jarg0) = new mk::nettest::events::StatusGeoipLookupEvent((const mk::nettest::events::StatusGeoipLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[330], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TelegramNettest::on_status_geoip_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTelegram::on_status_progress(mk::nettest::events::StatusProgressEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[14]) {
    mk::nettest::common::Nettest::on_status_progress(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusProgressEvent **)&jarg0) = new mk::nettest::events::StatusProgressEvent((const mk::nettest::events::StatusProgressEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[331], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TelegramNettest::on_status_progress ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTelegram::on_status_queued(mk::nettest::events::StatusQueuedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[15]) {
    mk::nettest::common::Nettest::on_status_queued(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusQueuedEvent **)&jarg0) = new mk::nettest::events::StatusQueuedEvent((const mk::nettest::events::StatusQueuedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[332], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TelegramNettest::on_status_queued ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTelegram::on_status_measurement_start(mk::nettest::events::StatusMeasurementStartEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[16]) {
    mk::nettest::common::Nettest::on_status_measurement_start(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementStartEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementStartEvent((const mk::nettest::events::StatusMeasurementStartEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[333], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TelegramNettest::on_status_measurement_start ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTelegram::on_status_measurement_submission(mk::nettest::events::StatusMeasurementSubmissionEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[17]) {
    mk::nettest::common::Nettest::on_status_measurement_submission(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementSubmissionEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementSubmissionEvent((const mk::nettest::events::StatusMeasurementSubmissionEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[334], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TelegramNettest::on_status_measurement_submission ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTelegram::on_status_measurement_done(mk::nettest::events::StatusMeasurementDoneEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[18]) {
    mk::nettest::common::Nettest::on_status_measurement_done(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementDoneEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementDoneEvent((const mk::nettest::events::StatusMeasurementDoneEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[335], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TelegramNettest::on_status_measurement_done ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTelegram::on_status_report_close(mk::nettest::events::StatusReportCloseEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[19]) {
    mk::nettest::common::Nettest::on_status_report_close(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusReportCloseEvent **)&jarg0) = new mk::nettest::events::StatusReportCloseEvent((const mk::nettest::events::StatusReportCloseEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[336], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TelegramNettest::on_status_report_close ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTelegram::on_status_report_create(mk::nettest::events::StatusReportCreateEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[20]) {
    mk::nettest::common::Nettest::on_status_report_create(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusReportCreateEvent **)&jarg0) = new mk::nettest::events::StatusReportCreateEvent((const mk::nettest::events::StatusReportCreateEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[337], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TelegramNettest::on_status_report_create ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTelegram::on_status_resolver_lookup(mk::nettest::events::StatusResolverLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[21]) {
    mk::nettest::common::Nettest::on_status_resolver_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusResolverLookupEvent **)&jarg0) = new mk::nettest::events::StatusResolverLookupEvent((const mk::nettest::events::StatusResolverLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[338], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TelegramNettest::on_status_resolver_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTelegram::on_status_started(mk::nettest::events::StatusStartedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[22]) {
    mk::nettest::common::Nettest::on_status_started(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusStartedEvent **)&jarg0) = new mk::nettest::events::StatusStartedEvent((const mk::nettest::events::StatusStartedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[339], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TelegramNettest::on_status_started ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestTelegram::on_task_terminated(mk::nettest::events::TaskTerminatedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[23]) {
    mk::nettest::common::Nettest::on_task_terminated(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::TaskTerminatedEvent **)&jarg0) = new mk::nettest::events::TaskTerminatedEvent((const mk::nettest::events::TaskTerminatedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[340], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::TelegramNettest::on_task_terminated ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_NettestTelegram::dispatch_event(nlohmann::json doc) {
  return mk::nettest::common::Nettest::dispatch_event(doc);
}

void SwigDirector_NettestTelegram::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "run", "()Z", NULL 
    },
    {
      "onFailureAsnLookup", "(Lio/ooni/mk/nettest/swig/EventFailureAsnLookup;)V", NULL 
    },
    {
      "onFailureCcLookup", "(Lio/ooni/mk/nettest/swig/EventFailureCcLookup;)V", NULL 
    },
    {
      "onFailureIpLookup", "(Lio/ooni/mk/nettest/swig/EventFailureIpLookup;)V", NULL 
    },
    {
      "onFailureMeasurement", "(Lio/ooni/mk/nettest/swig/EventFailureMeasurement;)V", NULL 
    },
    {
      "onFailureMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/EventFailureMeasurementSubmission;)V", NULL 
    },
    {
      "onFailureReportCreate", "(Lio/ooni/mk/nettest/swig/EventFailureReportCreate;)V", NULL 
    },
    {
      "onFailureReportClose", "(Lio/ooni/mk/nettest/swig/EventFailureReportClose;)V", NULL 
    },
    {
      "onFailureResolverLookup", "(Lio/ooni/mk/nettest/swig/EventFailureResolverLookup;)V", NULL 
    },
    {
      "onFailureStartup", "(Lio/ooni/mk/nettest/swig/EventFailureStartup;)V", NULL 
    },
    {
      "onLog", "(Lio/ooni/mk/nettest/swig/EventLog;)V", NULL 
    },
    {
      "onMeasurement", "(Lio/ooni/mk/nettest/swig/EventMeasurement;)V", NULL 
    },
    {
      "onStatusEnd", "(Lio/ooni/mk/nettest/swig/EventStatusEnd;)V", NULL 
    },
    {
      "onStatusGeoipLookup", "(Lio/ooni/mk/nettest/swig/EventStatusGeoipLookup;)V", NULL 
    },
    {
      "onStatusProgress", "(Lio/ooni/mk/nettest/swig/EventStatusProgress;)V", NULL 
    },
    {
      "onStatusQueued", "(Lio/ooni/mk/nettest/swig/EventStatusQueued;)V", NULL 
    },
    {
      "onStatusMeasurementStart", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementStart;)V", NULL 
    },
    {
      "onStatusMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementSubmission;)V", NULL 
    },
    {
      "onStatusMeasurementDone", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementDone;)V", NULL 
    },
    {
      "onStatusReportClose", "(Lio/ooni/mk/nettest/swig/EventStatusReportClose;)V", NULL 
    },
    {
      "onStatusReportCreate", "(Lio/ooni/mk/nettest/swig/EventStatusReportCreate;)V", NULL 
    },
    {
      "onStatusResolverLookup", "(Lio/ooni/mk/nettest/swig/EventStatusResolverLookup;)V", NULL 
    },
    {
      "onStatusStarted", "(Lio/ooni/mk/nettest/swig/EventStatusStarted;)V", NULL 
    },
    {
      "onTaskTerminated", "(Lio/ooni/mk/nettest/swig/EventTaskTerminated;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("io/ooni/mk/nettest/swig/NettestTelegram");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 24; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_NettestWebConnectivity::SwigDirector_NettestWebConnectivity(JNIEnv *jenv, mk::nettest::WebConnectivitySettings arg0) : mk::nettest::WebConnectivityNettest(arg0), Swig::Director(jenv) {
}

SwigDirector_NettestWebConnectivity::~SwigDirector_NettestWebConnectivity() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_NettestWebConnectivity::run() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return mk::nettest::WebConnectivityNettest::run();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[341], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WebConnectivityNettest::run ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_NettestWebConnectivity::on_failure_asn_lookup(mk::nettest::events::FailureAsnLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[1]) {
    mk::nettest::common::Nettest::on_failure_asn_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureAsnLookupEvent **)&jarg0) = new mk::nettest::events::FailureAsnLookupEvent((const mk::nettest::events::FailureAsnLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[342], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WebConnectivityNettest::on_failure_asn_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWebConnectivity::on_failure_cc_lookup(mk::nettest::events::FailureCcLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[2]) {
    mk::nettest::common::Nettest::on_failure_cc_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureCcLookupEvent **)&jarg0) = new mk::nettest::events::FailureCcLookupEvent((const mk::nettest::events::FailureCcLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[343], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WebConnectivityNettest::on_failure_cc_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWebConnectivity::on_failure_ip_lookup(mk::nettest::events::FailureIpLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[3]) {
    mk::nettest::common::Nettest::on_failure_ip_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureIpLookupEvent **)&jarg0) = new mk::nettest::events::FailureIpLookupEvent((const mk::nettest::events::FailureIpLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[344], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WebConnectivityNettest::on_failure_ip_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWebConnectivity::on_failure_measurement(mk::nettest::events::FailureMeasurementEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[4]) {
    mk::nettest::common::Nettest::on_failure_measurement(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureMeasurementEvent **)&jarg0) = new mk::nettest::events::FailureMeasurementEvent((const mk::nettest::events::FailureMeasurementEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[345], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WebConnectivityNettest::on_failure_measurement ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWebConnectivity::on_failure_measurement_submission(mk::nettest::events::FailureMeasurementSubmissionEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[5]) {
    mk::nettest::common::Nettest::on_failure_measurement_submission(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureMeasurementSubmissionEvent **)&jarg0) = new mk::nettest::events::FailureMeasurementSubmissionEvent((const mk::nettest::events::FailureMeasurementSubmissionEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[346], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WebConnectivityNettest::on_failure_measurement_submission ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWebConnectivity::on_failure_report_create(mk::nettest::events::FailureReportCreateEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[6]) {
    mk::nettest::common::Nettest::on_failure_report_create(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureReportCreateEvent **)&jarg0) = new mk::nettest::events::FailureReportCreateEvent((const mk::nettest::events::FailureReportCreateEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[347], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WebConnectivityNettest::on_failure_report_create ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWebConnectivity::on_failure_report_close(mk::nettest::events::FailureReportCloseEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[7]) {
    mk::nettest::common::Nettest::on_failure_report_close(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureReportCloseEvent **)&jarg0) = new mk::nettest::events::FailureReportCloseEvent((const mk::nettest::events::FailureReportCloseEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[348], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WebConnectivityNettest::on_failure_report_close ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWebConnectivity::on_failure_resolver_lookup(mk::nettest::events::FailureResolverLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[8]) {
    mk::nettest::common::Nettest::on_failure_resolver_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureResolverLookupEvent **)&jarg0) = new mk::nettest::events::FailureResolverLookupEvent((const mk::nettest::events::FailureResolverLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[349], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WebConnectivityNettest::on_failure_resolver_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWebConnectivity::on_failure_startup(mk::nettest::events::FailureStartupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[9]) {
    mk::nettest::common::Nettest::on_failure_startup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureStartupEvent **)&jarg0) = new mk::nettest::events::FailureStartupEvent((const mk::nettest::events::FailureStartupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[350], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WebConnectivityNettest::on_failure_startup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWebConnectivity::on_log(mk::nettest::events::LogEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[10]) {
    mk::nettest::common::Nettest::on_log(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::LogEvent **)&jarg0) = new mk::nettest::events::LogEvent((const mk::nettest::events::LogEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[351], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WebConnectivityNettest::on_log ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWebConnectivity::on_measurement(mk::nettest::events::MeasurementEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[11]) {
    mk::nettest::common::Nettest::on_measurement(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::MeasurementEvent **)&jarg0) = new mk::nettest::events::MeasurementEvent((const mk::nettest::events::MeasurementEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[352], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WebConnectivityNettest::on_measurement ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWebConnectivity::on_status_end(mk::nettest::events::StatusEndEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[12]) {
    mk::nettest::common::Nettest::on_status_end(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusEndEvent **)&jarg0) = new mk::nettest::events::StatusEndEvent((const mk::nettest::events::StatusEndEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[353], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WebConnectivityNettest::on_status_end ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWebConnectivity::on_status_geoip_lookup(mk::nettest::events::StatusGeoipLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[13]) {
    mk::nettest::common::Nettest::on_status_geoip_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusGeoipLookupEvent **)&jarg0) = new mk::nettest::events::StatusGeoipLookupEvent((const mk::nettest::events::StatusGeoipLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[354], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WebConnectivityNettest::on_status_geoip_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWebConnectivity::on_status_progress(mk::nettest::events::StatusProgressEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[14]) {
    mk::nettest::common::Nettest::on_status_progress(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusProgressEvent **)&jarg0) = new mk::nettest::events::StatusProgressEvent((const mk::nettest::events::StatusProgressEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[355], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WebConnectivityNettest::on_status_progress ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWebConnectivity::on_status_queued(mk::nettest::events::StatusQueuedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[15]) {
    mk::nettest::common::Nettest::on_status_queued(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusQueuedEvent **)&jarg0) = new mk::nettest::events::StatusQueuedEvent((const mk::nettest::events::StatusQueuedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[356], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WebConnectivityNettest::on_status_queued ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWebConnectivity::on_status_measurement_start(mk::nettest::events::StatusMeasurementStartEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[16]) {
    mk::nettest::common::Nettest::on_status_measurement_start(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementStartEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementStartEvent((const mk::nettest::events::StatusMeasurementStartEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[357], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WebConnectivityNettest::on_status_measurement_start ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWebConnectivity::on_status_measurement_submission(mk::nettest::events::StatusMeasurementSubmissionEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[17]) {
    mk::nettest::common::Nettest::on_status_measurement_submission(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementSubmissionEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementSubmissionEvent((const mk::nettest::events::StatusMeasurementSubmissionEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[358], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WebConnectivityNettest::on_status_measurement_submission ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWebConnectivity::on_status_measurement_done(mk::nettest::events::StatusMeasurementDoneEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[18]) {
    mk::nettest::common::Nettest::on_status_measurement_done(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementDoneEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementDoneEvent((const mk::nettest::events::StatusMeasurementDoneEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[359], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WebConnectivityNettest::on_status_measurement_done ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWebConnectivity::on_status_report_close(mk::nettest::events::StatusReportCloseEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[19]) {
    mk::nettest::common::Nettest::on_status_report_close(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusReportCloseEvent **)&jarg0) = new mk::nettest::events::StatusReportCloseEvent((const mk::nettest::events::StatusReportCloseEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[360], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WebConnectivityNettest::on_status_report_close ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWebConnectivity::on_status_report_create(mk::nettest::events::StatusReportCreateEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[20]) {
    mk::nettest::common::Nettest::on_status_report_create(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusReportCreateEvent **)&jarg0) = new mk::nettest::events::StatusReportCreateEvent((const mk::nettest::events::StatusReportCreateEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[361], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WebConnectivityNettest::on_status_report_create ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWebConnectivity::on_status_resolver_lookup(mk::nettest::events::StatusResolverLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[21]) {
    mk::nettest::common::Nettest::on_status_resolver_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusResolverLookupEvent **)&jarg0) = new mk::nettest::events::StatusResolverLookupEvent((const mk::nettest::events::StatusResolverLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[362], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WebConnectivityNettest::on_status_resolver_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWebConnectivity::on_status_started(mk::nettest::events::StatusStartedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[22]) {
    mk::nettest::common::Nettest::on_status_started(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusStartedEvent **)&jarg0) = new mk::nettest::events::StatusStartedEvent((const mk::nettest::events::StatusStartedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[363], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WebConnectivityNettest::on_status_started ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWebConnectivity::on_task_terminated(mk::nettest::events::TaskTerminatedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[23]) {
    mk::nettest::common::Nettest::on_task_terminated(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::TaskTerminatedEvent **)&jarg0) = new mk::nettest::events::TaskTerminatedEvent((const mk::nettest::events::TaskTerminatedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[364], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WebConnectivityNettest::on_task_terminated ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_NettestWebConnectivity::dispatch_event(nlohmann::json doc) {
  return mk::nettest::common::WebsitesNettest::dispatch_event(doc);
}

void SwigDirector_NettestWebConnectivity::on_status_update_websites(mk::nettest::events::StatusUpdateWebsitesEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[24]) {
    mk::nettest::common::WebsitesNettest::on_status_update_websites(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusUpdateWebsitesEvent **)&jarg0) = new mk::nettest::events::StatusUpdateWebsitesEvent((const mk::nettest::events::StatusUpdateWebsitesEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[365], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WebConnectivityNettest::on_status_update_websites ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWebConnectivity::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "run", "()Z", NULL 
    },
    {
      "onFailureAsnLookup", "(Lio/ooni/mk/nettest/swig/EventFailureAsnLookup;)V", NULL 
    },
    {
      "onFailureCcLookup", "(Lio/ooni/mk/nettest/swig/EventFailureCcLookup;)V", NULL 
    },
    {
      "onFailureIpLookup", "(Lio/ooni/mk/nettest/swig/EventFailureIpLookup;)V", NULL 
    },
    {
      "onFailureMeasurement", "(Lio/ooni/mk/nettest/swig/EventFailureMeasurement;)V", NULL 
    },
    {
      "onFailureMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/EventFailureMeasurementSubmission;)V", NULL 
    },
    {
      "onFailureReportCreate", "(Lio/ooni/mk/nettest/swig/EventFailureReportCreate;)V", NULL 
    },
    {
      "onFailureReportClose", "(Lio/ooni/mk/nettest/swig/EventFailureReportClose;)V", NULL 
    },
    {
      "onFailureResolverLookup", "(Lio/ooni/mk/nettest/swig/EventFailureResolverLookup;)V", NULL 
    },
    {
      "onFailureStartup", "(Lio/ooni/mk/nettest/swig/EventFailureStartup;)V", NULL 
    },
    {
      "onLog", "(Lio/ooni/mk/nettest/swig/EventLog;)V", NULL 
    },
    {
      "onMeasurement", "(Lio/ooni/mk/nettest/swig/EventMeasurement;)V", NULL 
    },
    {
      "onStatusEnd", "(Lio/ooni/mk/nettest/swig/EventStatusEnd;)V", NULL 
    },
    {
      "onStatusGeoipLookup", "(Lio/ooni/mk/nettest/swig/EventStatusGeoipLookup;)V", NULL 
    },
    {
      "onStatusProgress", "(Lio/ooni/mk/nettest/swig/EventStatusProgress;)V", NULL 
    },
    {
      "onStatusQueued", "(Lio/ooni/mk/nettest/swig/EventStatusQueued;)V", NULL 
    },
    {
      "onStatusMeasurementStart", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementStart;)V", NULL 
    },
    {
      "onStatusMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementSubmission;)V", NULL 
    },
    {
      "onStatusMeasurementDone", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementDone;)V", NULL 
    },
    {
      "onStatusReportClose", "(Lio/ooni/mk/nettest/swig/EventStatusReportClose;)V", NULL 
    },
    {
      "onStatusReportCreate", "(Lio/ooni/mk/nettest/swig/EventStatusReportCreate;)V", NULL 
    },
    {
      "onStatusResolverLookup", "(Lio/ooni/mk/nettest/swig/EventStatusResolverLookup;)V", NULL 
    },
    {
      "onStatusStarted", "(Lio/ooni/mk/nettest/swig/EventStatusStarted;)V", NULL 
    },
    {
      "onTaskTerminated", "(Lio/ooni/mk/nettest/swig/EventTaskTerminated;)V", NULL 
    },
    {
      "onStatusUpdateWebsites", "(Lio/ooni/mk/nettest/swig/EventStatusUpdateWebsites;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("io/ooni/mk/nettest/swig/NettestWebConnectivity");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 25; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_NettestWhatsapp::SwigDirector_NettestWhatsapp(JNIEnv *jenv, mk::nettest::WhatsappSettings arg0) : mk::nettest::WhatsappNettest(arg0), Swig::Director(jenv) {
}

SwigDirector_NettestWhatsapp::~SwigDirector_NettestWhatsapp() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_NettestWhatsapp::run() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return mk::nettest::WhatsappNettest::run();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[366], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WhatsappNettest::run ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_NettestWhatsapp::on_failure_asn_lookup(mk::nettest::events::FailureAsnLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[1]) {
    mk::nettest::common::Nettest::on_failure_asn_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureAsnLookupEvent **)&jarg0) = new mk::nettest::events::FailureAsnLookupEvent((const mk::nettest::events::FailureAsnLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[367], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WhatsappNettest::on_failure_asn_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWhatsapp::on_failure_cc_lookup(mk::nettest::events::FailureCcLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[2]) {
    mk::nettest::common::Nettest::on_failure_cc_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureCcLookupEvent **)&jarg0) = new mk::nettest::events::FailureCcLookupEvent((const mk::nettest::events::FailureCcLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[368], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WhatsappNettest::on_failure_cc_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWhatsapp::on_failure_ip_lookup(mk::nettest::events::FailureIpLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[3]) {
    mk::nettest::common::Nettest::on_failure_ip_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureIpLookupEvent **)&jarg0) = new mk::nettest::events::FailureIpLookupEvent((const mk::nettest::events::FailureIpLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[369], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WhatsappNettest::on_failure_ip_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWhatsapp::on_failure_measurement(mk::nettest::events::FailureMeasurementEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[4]) {
    mk::nettest::common::Nettest::on_failure_measurement(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureMeasurementEvent **)&jarg0) = new mk::nettest::events::FailureMeasurementEvent((const mk::nettest::events::FailureMeasurementEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[370], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WhatsappNettest::on_failure_measurement ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWhatsapp::on_failure_measurement_submission(mk::nettest::events::FailureMeasurementSubmissionEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[5]) {
    mk::nettest::common::Nettest::on_failure_measurement_submission(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureMeasurementSubmissionEvent **)&jarg0) = new mk::nettest::events::FailureMeasurementSubmissionEvent((const mk::nettest::events::FailureMeasurementSubmissionEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[371], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WhatsappNettest::on_failure_measurement_submission ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWhatsapp::on_failure_report_create(mk::nettest::events::FailureReportCreateEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[6]) {
    mk::nettest::common::Nettest::on_failure_report_create(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureReportCreateEvent **)&jarg0) = new mk::nettest::events::FailureReportCreateEvent((const mk::nettest::events::FailureReportCreateEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[372], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WhatsappNettest::on_failure_report_create ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWhatsapp::on_failure_report_close(mk::nettest::events::FailureReportCloseEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[7]) {
    mk::nettest::common::Nettest::on_failure_report_close(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureReportCloseEvent **)&jarg0) = new mk::nettest::events::FailureReportCloseEvent((const mk::nettest::events::FailureReportCloseEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[373], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WhatsappNettest::on_failure_report_close ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWhatsapp::on_failure_resolver_lookup(mk::nettest::events::FailureResolverLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[8]) {
    mk::nettest::common::Nettest::on_failure_resolver_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureResolverLookupEvent **)&jarg0) = new mk::nettest::events::FailureResolverLookupEvent((const mk::nettest::events::FailureResolverLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[374], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WhatsappNettest::on_failure_resolver_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWhatsapp::on_failure_startup(mk::nettest::events::FailureStartupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[9]) {
    mk::nettest::common::Nettest::on_failure_startup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::FailureStartupEvent **)&jarg0) = new mk::nettest::events::FailureStartupEvent((const mk::nettest::events::FailureStartupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[375], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WhatsappNettest::on_failure_startup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWhatsapp::on_log(mk::nettest::events::LogEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[10]) {
    mk::nettest::common::Nettest::on_log(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::LogEvent **)&jarg0) = new mk::nettest::events::LogEvent((const mk::nettest::events::LogEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[376], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WhatsappNettest::on_log ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWhatsapp::on_measurement(mk::nettest::events::MeasurementEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[11]) {
    mk::nettest::common::Nettest::on_measurement(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::MeasurementEvent **)&jarg0) = new mk::nettest::events::MeasurementEvent((const mk::nettest::events::MeasurementEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[377], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WhatsappNettest::on_measurement ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWhatsapp::on_status_end(mk::nettest::events::StatusEndEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[12]) {
    mk::nettest::common::Nettest::on_status_end(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusEndEvent **)&jarg0) = new mk::nettest::events::StatusEndEvent((const mk::nettest::events::StatusEndEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[378], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WhatsappNettest::on_status_end ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWhatsapp::on_status_geoip_lookup(mk::nettest::events::StatusGeoipLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[13]) {
    mk::nettest::common::Nettest::on_status_geoip_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusGeoipLookupEvent **)&jarg0) = new mk::nettest::events::StatusGeoipLookupEvent((const mk::nettest::events::StatusGeoipLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[379], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WhatsappNettest::on_status_geoip_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWhatsapp::on_status_progress(mk::nettest::events::StatusProgressEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[14]) {
    mk::nettest::common::Nettest::on_status_progress(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusProgressEvent **)&jarg0) = new mk::nettest::events::StatusProgressEvent((const mk::nettest::events::StatusProgressEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[380], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WhatsappNettest::on_status_progress ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWhatsapp::on_status_queued(mk::nettest::events::StatusQueuedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[15]) {
    mk::nettest::common::Nettest::on_status_queued(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusQueuedEvent **)&jarg0) = new mk::nettest::events::StatusQueuedEvent((const mk::nettest::events::StatusQueuedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[381], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WhatsappNettest::on_status_queued ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWhatsapp::on_status_measurement_start(mk::nettest::events::StatusMeasurementStartEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[16]) {
    mk::nettest::common::Nettest::on_status_measurement_start(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementStartEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementStartEvent((const mk::nettest::events::StatusMeasurementStartEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[382], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WhatsappNettest::on_status_measurement_start ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWhatsapp::on_status_measurement_submission(mk::nettest::events::StatusMeasurementSubmissionEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[17]) {
    mk::nettest::common::Nettest::on_status_measurement_submission(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementSubmissionEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementSubmissionEvent((const mk::nettest::events::StatusMeasurementSubmissionEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[383], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WhatsappNettest::on_status_measurement_submission ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWhatsapp::on_status_measurement_done(mk::nettest::events::StatusMeasurementDoneEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[18]) {
    mk::nettest::common::Nettest::on_status_measurement_done(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusMeasurementDoneEvent **)&jarg0) = new mk::nettest::events::StatusMeasurementDoneEvent((const mk::nettest::events::StatusMeasurementDoneEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[384], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WhatsappNettest::on_status_measurement_done ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWhatsapp::on_status_report_close(mk::nettest::events::StatusReportCloseEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[19]) {
    mk::nettest::common::Nettest::on_status_report_close(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusReportCloseEvent **)&jarg0) = new mk::nettest::events::StatusReportCloseEvent((const mk::nettest::events::StatusReportCloseEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[385], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WhatsappNettest::on_status_report_close ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWhatsapp::on_status_report_create(mk::nettest::events::StatusReportCreateEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[20]) {
    mk::nettest::common::Nettest::on_status_report_create(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusReportCreateEvent **)&jarg0) = new mk::nettest::events::StatusReportCreateEvent((const mk::nettest::events::StatusReportCreateEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[386], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WhatsappNettest::on_status_report_create ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWhatsapp::on_status_resolver_lookup(mk::nettest::events::StatusResolverLookupEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[21]) {
    mk::nettest::common::Nettest::on_status_resolver_lookup(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusResolverLookupEvent **)&jarg0) = new mk::nettest::events::StatusResolverLookupEvent((const mk::nettest::events::StatusResolverLookupEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[387], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WhatsappNettest::on_status_resolver_lookup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWhatsapp::on_status_started(mk::nettest::events::StatusStartedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[22]) {
    mk::nettest::common::Nettest::on_status_started(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::StatusStartedEvent **)&jarg0) = new mk::nettest::events::StatusStartedEvent((const mk::nettest::events::StatusStartedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[388], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WhatsappNettest::on_status_started ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_NettestWhatsapp::on_task_terminated(mk::nettest::events::TaskTerminatedEvent arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0  ;
  
  if (!swig_override[23]) {
    mk::nettest::common::Nettest::on_task_terminated(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = 0;
    *((mk::nettest::events::TaskTerminatedEvent **)&jarg0) = new mk::nettest::events::TaskTerminatedEvent((const mk::nettest::events::TaskTerminatedEvent &)arg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_ApiJNI, Swig::director_method_ids[389], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mk::nettest::WhatsappNettest::on_task_terminated ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_NettestWhatsapp::dispatch_event(nlohmann::json doc) {
  return mk::nettest::common::Nettest::dispatch_event(doc);
}

void SwigDirector_NettestWhatsapp::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "run", "()Z", NULL 
    },
    {
      "onFailureAsnLookup", "(Lio/ooni/mk/nettest/swig/EventFailureAsnLookup;)V", NULL 
    },
    {
      "onFailureCcLookup", "(Lio/ooni/mk/nettest/swig/EventFailureCcLookup;)V", NULL 
    },
    {
      "onFailureIpLookup", "(Lio/ooni/mk/nettest/swig/EventFailureIpLookup;)V", NULL 
    },
    {
      "onFailureMeasurement", "(Lio/ooni/mk/nettest/swig/EventFailureMeasurement;)V", NULL 
    },
    {
      "onFailureMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/EventFailureMeasurementSubmission;)V", NULL 
    },
    {
      "onFailureReportCreate", "(Lio/ooni/mk/nettest/swig/EventFailureReportCreate;)V", NULL 
    },
    {
      "onFailureReportClose", "(Lio/ooni/mk/nettest/swig/EventFailureReportClose;)V", NULL 
    },
    {
      "onFailureResolverLookup", "(Lio/ooni/mk/nettest/swig/EventFailureResolverLookup;)V", NULL 
    },
    {
      "onFailureStartup", "(Lio/ooni/mk/nettest/swig/EventFailureStartup;)V", NULL 
    },
    {
      "onLog", "(Lio/ooni/mk/nettest/swig/EventLog;)V", NULL 
    },
    {
      "onMeasurement", "(Lio/ooni/mk/nettest/swig/EventMeasurement;)V", NULL 
    },
    {
      "onStatusEnd", "(Lio/ooni/mk/nettest/swig/EventStatusEnd;)V", NULL 
    },
    {
      "onStatusGeoipLookup", "(Lio/ooni/mk/nettest/swig/EventStatusGeoipLookup;)V", NULL 
    },
    {
      "onStatusProgress", "(Lio/ooni/mk/nettest/swig/EventStatusProgress;)V", NULL 
    },
    {
      "onStatusQueued", "(Lio/ooni/mk/nettest/swig/EventStatusQueued;)V", NULL 
    },
    {
      "onStatusMeasurementStart", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementStart;)V", NULL 
    },
    {
      "onStatusMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementSubmission;)V", NULL 
    },
    {
      "onStatusMeasurementDone", "(Lio/ooni/mk/nettest/swig/EventStatusMeasurementDone;)V", NULL 
    },
    {
      "onStatusReportClose", "(Lio/ooni/mk/nettest/swig/EventStatusReportClose;)V", NULL 
    },
    {
      "onStatusReportCreate", "(Lio/ooni/mk/nettest/swig/EventStatusReportCreate;)V", NULL 
    },
    {
      "onStatusResolverLookup", "(Lio/ooni/mk/nettest/swig/EventStatusResolverLookup;)V", NULL 
    },
    {
      "onStatusStarted", "(Lio/ooni/mk/nettest/swig/EventStatusStarted;)V", NULL 
    },
    {
      "onTaskTerminated", "(Lio/ooni/mk/nettest/swig/EventTaskTerminated;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("io/ooni/mk/nettest/swig/NettestWhatsapp");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 24; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_logLevelErr_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)mk::nettest::log_level_err;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_logLevelWarning_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)mk::nettest::log_level_warning;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_logLevelInfo_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)mk::nettest::log_level_info;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_logLevelDebug_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)mk::nettest::log_level_debug;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_logLevelDebug2_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)mk::nettest::log_level_debug2;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventFailureAsnLookup_1key_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)mk::nettest::events::FailureAsnLookupEvent::key;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventFailureAsnLookup_1failure_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mk::nettest::events::FailureAsnLookupEvent *arg1 = (mk::nettest::events::FailureAsnLookupEvent *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::FailureAsnLookupEvent **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->failure = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventFailureAsnLookup_1failure_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mk::nettest::events::FailureAsnLookupEvent *arg1 = (mk::nettest::events::FailureAsnLookupEvent *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::FailureAsnLookupEvent **)&jarg1; 
  result = (std::string *) & ((arg1)->failure);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1EventFailureAsnLookup(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mk::nettest::events::FailureAsnLookupEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mk::nettest::events::FailureAsnLookupEvent *)new mk::nettest::events::FailureAsnLookupEvent();
  *(mk::nettest::events::FailureAsnLookupEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1EventFailureAsnLookup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::events::FailureAsnLookupEvent *arg1 = (mk::nettest::events::FailureAsnLookupEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::events::FailureAsnLookupEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventFailureCcLookup_1key_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)mk::nettest::events::FailureCcLookupEvent::key;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventFailureCcLookup_1failure_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mk::nettest::events::FailureCcLookupEvent *arg1 = (mk::nettest::events::FailureCcLookupEvent *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::FailureCcLookupEvent **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->failure = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventFailureCcLookup_1failure_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mk::nettest::events::FailureCcLookupEvent *arg1 = (mk::nettest::events::FailureCcLookupEvent *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::FailureCcLookupEvent **)&jarg1; 
  result = (std::string *) & ((arg1)->failure);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1EventFailureCcLookup(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mk::nettest::events::FailureCcLookupEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mk::nettest::events::FailureCcLookupEvent *)new mk::nettest::events::FailureCcLookupEvent();
  *(mk::nettest::events::FailureCcLookupEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1EventFailureCcLookup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::events::FailureCcLookupEvent *arg1 = (mk::nettest::events::FailureCcLookupEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::events::FailureCcLookupEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventFailureIpLookup_1key_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)mk::nettest::events::FailureIpLookupEvent::key;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventFailureIpLookup_1failure_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mk::nettest::events::FailureIpLookupEvent *arg1 = (mk::nettest::events::FailureIpLookupEvent *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::FailureIpLookupEvent **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->failure = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventFailureIpLookup_1failure_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mk::nettest::events::FailureIpLookupEvent *arg1 = (mk::nettest::events::FailureIpLookupEvent *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::FailureIpLookupEvent **)&jarg1; 
  result = (std::string *) & ((arg1)->failure);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1EventFailureIpLookup(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mk::nettest::events::FailureIpLookupEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mk::nettest::events::FailureIpLookupEvent *)new mk::nettest::events::FailureIpLookupEvent();
  *(mk::nettest::events::FailureIpLookupEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1EventFailureIpLookup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::events::FailureIpLookupEvent *arg1 = (mk::nettest::events::FailureIpLookupEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::events::FailureIpLookupEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventFailureMeasurement_1key_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)mk::nettest::events::FailureMeasurementEvent::key;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventFailureMeasurement_1failure_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mk::nettest::events::FailureMeasurementEvent *arg1 = (mk::nettest::events::FailureMeasurementEvent *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::FailureMeasurementEvent **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->failure = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventFailureMeasurement_1failure_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mk::nettest::events::FailureMeasurementEvent *arg1 = (mk::nettest::events::FailureMeasurementEvent *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::FailureMeasurementEvent **)&jarg1; 
  result = (std::string *) & ((arg1)->failure);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1EventFailureMeasurement(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mk::nettest::events::FailureMeasurementEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mk::nettest::events::FailureMeasurementEvent *)new mk::nettest::events::FailureMeasurementEvent();
  *(mk::nettest::events::FailureMeasurementEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1EventFailureMeasurement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::events::FailureMeasurementEvent *arg1 = (mk::nettest::events::FailureMeasurementEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::events::FailureMeasurementEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventFailureMeasurementSubmission_1key_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)mk::nettest::events::FailureMeasurementSubmissionEvent::key;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventFailureMeasurementSubmission_1failure_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mk::nettest::events::FailureMeasurementSubmissionEvent *arg1 = (mk::nettest::events::FailureMeasurementSubmissionEvent *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::FailureMeasurementSubmissionEvent **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->failure = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventFailureMeasurementSubmission_1failure_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mk::nettest::events::FailureMeasurementSubmissionEvent *arg1 = (mk::nettest::events::FailureMeasurementSubmissionEvent *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::FailureMeasurementSubmissionEvent **)&jarg1; 
  result = (std::string *) & ((arg1)->failure);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventFailureMeasurementSubmission_1idx_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mk::nettest::events::FailureMeasurementSubmissionEvent *arg1 = (mk::nettest::events::FailureMeasurementSubmissionEvent *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::FailureMeasurementSubmissionEvent **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->idx = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventFailureMeasurementSubmission_1idx_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mk::nettest::events::FailureMeasurementSubmissionEvent *arg1 = (mk::nettest::events::FailureMeasurementSubmissionEvent *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::FailureMeasurementSubmissionEvent **)&jarg1; 
  result = (int64_t) ((arg1)->idx);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventFailureMeasurementSubmission_1jsonStr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mk::nettest::events::FailureMeasurementSubmissionEvent *arg1 = (mk::nettest::events::FailureMeasurementSubmissionEvent *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::FailureMeasurementSubmissionEvent **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->json_str = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventFailureMeasurementSubmission_1jsonStr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mk::nettest::events::FailureMeasurementSubmissionEvent *arg1 = (mk::nettest::events::FailureMeasurementSubmissionEvent *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::FailureMeasurementSubmissionEvent **)&jarg1; 
  result = (std::string *) & ((arg1)->json_str);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1EventFailureMeasurementSubmission(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mk::nettest::events::FailureMeasurementSubmissionEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mk::nettest::events::FailureMeasurementSubmissionEvent *)new mk::nettest::events::FailureMeasurementSubmissionEvent();
  *(mk::nettest::events::FailureMeasurementSubmissionEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1EventFailureMeasurementSubmission(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::events::FailureMeasurementSubmissionEvent *arg1 = (mk::nettest::events::FailureMeasurementSubmissionEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::events::FailureMeasurementSubmissionEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventFailureReportCreate_1key_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)mk::nettest::events::FailureReportCreateEvent::key;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventFailureReportCreate_1failure_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mk::nettest::events::FailureReportCreateEvent *arg1 = (mk::nettest::events::FailureReportCreateEvent *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::FailureReportCreateEvent **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->failure = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventFailureReportCreate_1failure_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mk::nettest::events::FailureReportCreateEvent *arg1 = (mk::nettest::events::FailureReportCreateEvent *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::FailureReportCreateEvent **)&jarg1; 
  result = (std::string *) & ((arg1)->failure);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1EventFailureReportCreate(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mk::nettest::events::FailureReportCreateEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mk::nettest::events::FailureReportCreateEvent *)new mk::nettest::events::FailureReportCreateEvent();
  *(mk::nettest::events::FailureReportCreateEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1EventFailureReportCreate(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::events::FailureReportCreateEvent *arg1 = (mk::nettest::events::FailureReportCreateEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::events::FailureReportCreateEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventFailureReportClose_1key_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)mk::nettest::events::FailureReportCloseEvent::key;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventFailureReportClose_1failure_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mk::nettest::events::FailureReportCloseEvent *arg1 = (mk::nettest::events::FailureReportCloseEvent *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::FailureReportCloseEvent **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->failure = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventFailureReportClose_1failure_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mk::nettest::events::FailureReportCloseEvent *arg1 = (mk::nettest::events::FailureReportCloseEvent *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::FailureReportCloseEvent **)&jarg1; 
  result = (std::string *) & ((arg1)->failure);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1EventFailureReportClose(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mk::nettest::events::FailureReportCloseEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mk::nettest::events::FailureReportCloseEvent *)new mk::nettest::events::FailureReportCloseEvent();
  *(mk::nettest::events::FailureReportCloseEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1EventFailureReportClose(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::events::FailureReportCloseEvent *arg1 = (mk::nettest::events::FailureReportCloseEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::events::FailureReportCloseEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventFailureResolverLookup_1key_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)mk::nettest::events::FailureResolverLookupEvent::key;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventFailureResolverLookup_1failure_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mk::nettest::events::FailureResolverLookupEvent *arg1 = (mk::nettest::events::FailureResolverLookupEvent *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::FailureResolverLookupEvent **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->failure = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventFailureResolverLookup_1failure_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mk::nettest::events::FailureResolverLookupEvent *arg1 = (mk::nettest::events::FailureResolverLookupEvent *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::FailureResolverLookupEvent **)&jarg1; 
  result = (std::string *) & ((arg1)->failure);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1EventFailureResolverLookup(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mk::nettest::events::FailureResolverLookupEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mk::nettest::events::FailureResolverLookupEvent *)new mk::nettest::events::FailureResolverLookupEvent();
  *(mk::nettest::events::FailureResolverLookupEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1EventFailureResolverLookup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::events::FailureResolverLookupEvent *arg1 = (mk::nettest::events::FailureResolverLookupEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::events::FailureResolverLookupEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventFailureStartup_1key_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)mk::nettest::events::FailureStartupEvent::key;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventFailureStartup_1failure_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mk::nettest::events::FailureStartupEvent *arg1 = (mk::nettest::events::FailureStartupEvent *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::FailureStartupEvent **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->failure = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventFailureStartup_1failure_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mk::nettest::events::FailureStartupEvent *arg1 = (mk::nettest::events::FailureStartupEvent *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::FailureStartupEvent **)&jarg1; 
  result = (std::string *) & ((arg1)->failure);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1EventFailureStartup(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mk::nettest::events::FailureStartupEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mk::nettest::events::FailureStartupEvent *)new mk::nettest::events::FailureStartupEvent();
  *(mk::nettest::events::FailureStartupEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1EventFailureStartup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::events::FailureStartupEvent *arg1 = (mk::nettest::events::FailureStartupEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::events::FailureStartupEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventLog_1key_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)mk::nettest::events::LogEvent::key;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventLog_1logLevel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mk::nettest::events::LogEvent *arg1 = (mk::nettest::events::LogEvent *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::LogEvent **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->log_level = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventLog_1logLevel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mk::nettest::events::LogEvent *arg1 = (mk::nettest::events::LogEvent *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::LogEvent **)&jarg1; 
  result = (std::string *) & ((arg1)->log_level);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventLog_1message_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mk::nettest::events::LogEvent *arg1 = (mk::nettest::events::LogEvent *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::LogEvent **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->message = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventLog_1message_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mk::nettest::events::LogEvent *arg1 = (mk::nettest::events::LogEvent *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::LogEvent **)&jarg1; 
  result = (std::string *) & ((arg1)->message);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1EventLog(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mk::nettest::events::LogEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mk::nettest::events::LogEvent *)new mk::nettest::events::LogEvent();
  *(mk::nettest::events::LogEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1EventLog(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::events::LogEvent *arg1 = (mk::nettest::events::LogEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::events::LogEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventMeasurement_1key_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)mk::nettest::events::MeasurementEvent::key;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventMeasurement_1idx_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mk::nettest::events::MeasurementEvent *arg1 = (mk::nettest::events::MeasurementEvent *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::MeasurementEvent **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->idx = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventMeasurement_1idx_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mk::nettest::events::MeasurementEvent *arg1 = (mk::nettest::events::MeasurementEvent *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::MeasurementEvent **)&jarg1; 
  result = (int64_t) ((arg1)->idx);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventMeasurement_1jsonStr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mk::nettest::events::MeasurementEvent *arg1 = (mk::nettest::events::MeasurementEvent *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::MeasurementEvent **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->json_str = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventMeasurement_1jsonStr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mk::nettest::events::MeasurementEvent *arg1 = (mk::nettest::events::MeasurementEvent *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::MeasurementEvent **)&jarg1; 
  result = (std::string *) & ((arg1)->json_str);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1EventMeasurement(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mk::nettest::events::MeasurementEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mk::nettest::events::MeasurementEvent *)new mk::nettest::events::MeasurementEvent();
  *(mk::nettest::events::MeasurementEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1EventMeasurement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::events::MeasurementEvent *arg1 = (mk::nettest::events::MeasurementEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::events::MeasurementEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusEnd_1key_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)mk::nettest::events::StatusEndEvent::key;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusEnd_1downloadedKb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mk::nettest::events::StatusEndEvent *arg1 = (mk::nettest::events::StatusEndEvent *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusEndEvent **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->downloaded_kb = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusEnd_1downloadedKb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mk::nettest::events::StatusEndEvent *arg1 = (mk::nettest::events::StatusEndEvent *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusEndEvent **)&jarg1; 
  result = (double) ((arg1)->downloaded_kb);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusEnd_1uploadedKb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mk::nettest::events::StatusEndEvent *arg1 = (mk::nettest::events::StatusEndEvent *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusEndEvent **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->uploaded_kb = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusEnd_1uploadedKb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mk::nettest::events::StatusEndEvent *arg1 = (mk::nettest::events::StatusEndEvent *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusEndEvent **)&jarg1; 
  result = (double) ((arg1)->uploaded_kb);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusEnd_1failure_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mk::nettest::events::StatusEndEvent *arg1 = (mk::nettest::events::StatusEndEvent *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusEndEvent **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->failure = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusEnd_1failure_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mk::nettest::events::StatusEndEvent *arg1 = (mk::nettest::events::StatusEndEvent *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusEndEvent **)&jarg1; 
  result = (std::string *) & ((arg1)->failure);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1EventStatusEnd(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mk::nettest::events::StatusEndEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mk::nettest::events::StatusEndEvent *)new mk::nettest::events::StatusEndEvent();
  *(mk::nettest::events::StatusEndEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1EventStatusEnd(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::events::StatusEndEvent *arg1 = (mk::nettest::events::StatusEndEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::events::StatusEndEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusGeoipLookup_1key_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)mk::nettest::events::StatusGeoipLookupEvent::key;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusGeoipLookup_1probeIp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mk::nettest::events::StatusGeoipLookupEvent *arg1 = (mk::nettest::events::StatusGeoipLookupEvent *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusGeoipLookupEvent **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->probe_ip = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusGeoipLookup_1probeIp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mk::nettest::events::StatusGeoipLookupEvent *arg1 = (mk::nettest::events::StatusGeoipLookupEvent *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusGeoipLookupEvent **)&jarg1; 
  result = (std::string *) & ((arg1)->probe_ip);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusGeoipLookup_1probeAsn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mk::nettest::events::StatusGeoipLookupEvent *arg1 = (mk::nettest::events::StatusGeoipLookupEvent *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusGeoipLookupEvent **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->probe_asn = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusGeoipLookup_1probeAsn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mk::nettest::events::StatusGeoipLookupEvent *arg1 = (mk::nettest::events::StatusGeoipLookupEvent *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusGeoipLookupEvent **)&jarg1; 
  result = (std::string *) & ((arg1)->probe_asn);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusGeoipLookup_1probeCc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mk::nettest::events::StatusGeoipLookupEvent *arg1 = (mk::nettest::events::StatusGeoipLookupEvent *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusGeoipLookupEvent **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->probe_cc = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusGeoipLookup_1probeCc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mk::nettest::events::StatusGeoipLookupEvent *arg1 = (mk::nettest::events::StatusGeoipLookupEvent *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusGeoipLookupEvent **)&jarg1; 
  result = (std::string *) & ((arg1)->probe_cc);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusGeoipLookup_1probeNetworkName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mk::nettest::events::StatusGeoipLookupEvent *arg1 = (mk::nettest::events::StatusGeoipLookupEvent *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusGeoipLookupEvent **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->probe_network_name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusGeoipLookup_1probeNetworkName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mk::nettest::events::StatusGeoipLookupEvent *arg1 = (mk::nettest::events::StatusGeoipLookupEvent *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusGeoipLookupEvent **)&jarg1; 
  result = (std::string *) & ((arg1)->probe_network_name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1EventStatusGeoipLookup(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mk::nettest::events::StatusGeoipLookupEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mk::nettest::events::StatusGeoipLookupEvent *)new mk::nettest::events::StatusGeoipLookupEvent();
  *(mk::nettest::events::StatusGeoipLookupEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1EventStatusGeoipLookup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::events::StatusGeoipLookupEvent *arg1 = (mk::nettest::events::StatusGeoipLookupEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::events::StatusGeoipLookupEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusProgress_1key_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)mk::nettest::events::StatusProgressEvent::key;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusProgress_1percentage_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mk::nettest::events::StatusProgressEvent *arg1 = (mk::nettest::events::StatusProgressEvent *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusProgressEvent **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->percentage = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusProgress_1percentage_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mk::nettest::events::StatusProgressEvent *arg1 = (mk::nettest::events::StatusProgressEvent *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusProgressEvent **)&jarg1; 
  result = (double) ((arg1)->percentage);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusProgress_1message_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mk::nettest::events::StatusProgressEvent *arg1 = (mk::nettest::events::StatusProgressEvent *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusProgressEvent **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->message = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusProgress_1message_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mk::nettest::events::StatusProgressEvent *arg1 = (mk::nettest::events::StatusProgressEvent *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusProgressEvent **)&jarg1; 
  result = (std::string *) & ((arg1)->message);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1EventStatusProgress(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mk::nettest::events::StatusProgressEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mk::nettest::events::StatusProgressEvent *)new mk::nettest::events::StatusProgressEvent();
  *(mk::nettest::events::StatusProgressEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1EventStatusProgress(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::events::StatusProgressEvent *arg1 = (mk::nettest::events::StatusProgressEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::events::StatusProgressEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusQueued_1key_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)mk::nettest::events::StatusQueuedEvent::key;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1EventStatusQueued(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mk::nettest::events::StatusQueuedEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mk::nettest::events::StatusQueuedEvent *)new mk::nettest::events::StatusQueuedEvent();
  *(mk::nettest::events::StatusQueuedEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1EventStatusQueued(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::events::StatusQueuedEvent *arg1 = (mk::nettest::events::StatusQueuedEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::events::StatusQueuedEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusMeasurementStart_1key_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)mk::nettest::events::StatusMeasurementStartEvent::key;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusMeasurementStart_1idx_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mk::nettest::events::StatusMeasurementStartEvent *arg1 = (mk::nettest::events::StatusMeasurementStartEvent *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusMeasurementStartEvent **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->idx = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusMeasurementStart_1idx_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mk::nettest::events::StatusMeasurementStartEvent *arg1 = (mk::nettest::events::StatusMeasurementStartEvent *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusMeasurementStartEvent **)&jarg1; 
  result = (int64_t) ((arg1)->idx);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusMeasurementStart_1input_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mk::nettest::events::StatusMeasurementStartEvent *arg1 = (mk::nettest::events::StatusMeasurementStartEvent *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusMeasurementStartEvent **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->input = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusMeasurementStart_1input_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mk::nettest::events::StatusMeasurementStartEvent *arg1 = (mk::nettest::events::StatusMeasurementStartEvent *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusMeasurementStartEvent **)&jarg1; 
  result = (std::string *) & ((arg1)->input);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1EventStatusMeasurementStart(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mk::nettest::events::StatusMeasurementStartEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mk::nettest::events::StatusMeasurementStartEvent *)new mk::nettest::events::StatusMeasurementStartEvent();
  *(mk::nettest::events::StatusMeasurementStartEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1EventStatusMeasurementStart(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::events::StatusMeasurementStartEvent *arg1 = (mk::nettest::events::StatusMeasurementStartEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::events::StatusMeasurementStartEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusMeasurementSubmission_1key_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)mk::nettest::events::StatusMeasurementSubmissionEvent::key;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusMeasurementSubmission_1idx_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mk::nettest::events::StatusMeasurementSubmissionEvent *arg1 = (mk::nettest::events::StatusMeasurementSubmissionEvent *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusMeasurementSubmissionEvent **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->idx = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusMeasurementSubmission_1idx_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mk::nettest::events::StatusMeasurementSubmissionEvent *arg1 = (mk::nettest::events::StatusMeasurementSubmissionEvent *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusMeasurementSubmissionEvent **)&jarg1; 
  result = (int64_t) ((arg1)->idx);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1EventStatusMeasurementSubmission(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mk::nettest::events::StatusMeasurementSubmissionEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mk::nettest::events::StatusMeasurementSubmissionEvent *)new mk::nettest::events::StatusMeasurementSubmissionEvent();
  *(mk::nettest::events::StatusMeasurementSubmissionEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1EventStatusMeasurementSubmission(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::events::StatusMeasurementSubmissionEvent *arg1 = (mk::nettest::events::StatusMeasurementSubmissionEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::events::StatusMeasurementSubmissionEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusMeasurementDone_1key_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)mk::nettest::events::StatusMeasurementDoneEvent::key;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusMeasurementDone_1idx_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mk::nettest::events::StatusMeasurementDoneEvent *arg1 = (mk::nettest::events::StatusMeasurementDoneEvent *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusMeasurementDoneEvent **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->idx = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusMeasurementDone_1idx_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mk::nettest::events::StatusMeasurementDoneEvent *arg1 = (mk::nettest::events::StatusMeasurementDoneEvent *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusMeasurementDoneEvent **)&jarg1; 
  result = (int64_t) ((arg1)->idx);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1EventStatusMeasurementDone(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mk::nettest::events::StatusMeasurementDoneEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mk::nettest::events::StatusMeasurementDoneEvent *)new mk::nettest::events::StatusMeasurementDoneEvent();
  *(mk::nettest::events::StatusMeasurementDoneEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1EventStatusMeasurementDone(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::events::StatusMeasurementDoneEvent *arg1 = (mk::nettest::events::StatusMeasurementDoneEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::events::StatusMeasurementDoneEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusReportClose_1key_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)mk::nettest::events::StatusReportCloseEvent::key;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusReportClose_1reportId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mk::nettest::events::StatusReportCloseEvent *arg1 = (mk::nettest::events::StatusReportCloseEvent *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusReportCloseEvent **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->report_id = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusReportClose_1reportId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mk::nettest::events::StatusReportCloseEvent *arg1 = (mk::nettest::events::StatusReportCloseEvent *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusReportCloseEvent **)&jarg1; 
  result = (std::string *) & ((arg1)->report_id);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1EventStatusReportClose(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mk::nettest::events::StatusReportCloseEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mk::nettest::events::StatusReportCloseEvent *)new mk::nettest::events::StatusReportCloseEvent();
  *(mk::nettest::events::StatusReportCloseEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1EventStatusReportClose(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::events::StatusReportCloseEvent *arg1 = (mk::nettest::events::StatusReportCloseEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::events::StatusReportCloseEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusReportCreate_1key_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)mk::nettest::events::StatusReportCreateEvent::key;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusReportCreate_1reportId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mk::nettest::events::StatusReportCreateEvent *arg1 = (mk::nettest::events::StatusReportCreateEvent *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusReportCreateEvent **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->report_id = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusReportCreate_1reportId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mk::nettest::events::StatusReportCreateEvent *arg1 = (mk::nettest::events::StatusReportCreateEvent *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusReportCreateEvent **)&jarg1; 
  result = (std::string *) & ((arg1)->report_id);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1EventStatusReportCreate(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mk::nettest::events::StatusReportCreateEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mk::nettest::events::StatusReportCreateEvent *)new mk::nettest::events::StatusReportCreateEvent();
  *(mk::nettest::events::StatusReportCreateEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1EventStatusReportCreate(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::events::StatusReportCreateEvent *arg1 = (mk::nettest::events::StatusReportCreateEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::events::StatusReportCreateEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusResolverLookup_1key_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)mk::nettest::events::StatusResolverLookupEvent::key;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusResolverLookup_1ipAddress_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mk::nettest::events::StatusResolverLookupEvent *arg1 = (mk::nettest::events::StatusResolverLookupEvent *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusResolverLookupEvent **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->ip_address = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusResolverLookup_1ipAddress_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mk::nettest::events::StatusResolverLookupEvent *arg1 = (mk::nettest::events::StatusResolverLookupEvent *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusResolverLookupEvent **)&jarg1; 
  result = (std::string *) & ((arg1)->ip_address);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1EventStatusResolverLookup(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mk::nettest::events::StatusResolverLookupEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mk::nettest::events::StatusResolverLookupEvent *)new mk::nettest::events::StatusResolverLookupEvent();
  *(mk::nettest::events::StatusResolverLookupEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1EventStatusResolverLookup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::events::StatusResolverLookupEvent *arg1 = (mk::nettest::events::StatusResolverLookupEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::events::StatusResolverLookupEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusStarted_1key_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)mk::nettest::events::StatusStartedEvent::key;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1EventStatusStarted(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mk::nettest::events::StatusStartedEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mk::nettest::events::StatusStartedEvent *)new mk::nettest::events::StatusStartedEvent();
  *(mk::nettest::events::StatusStartedEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1EventStatusStarted(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::events::StatusStartedEvent *arg1 = (mk::nettest::events::StatusStartedEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::events::StatusStartedEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusUpdatePerformance_1key_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)mk::nettest::events::StatusUpdatePerformanceEvent::key;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusUpdatePerformance_1direction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mk::nettest::events::StatusUpdatePerformanceEvent *arg1 = (mk::nettest::events::StatusUpdatePerformanceEvent *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusUpdatePerformanceEvent **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->direction = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusUpdatePerformance_1direction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mk::nettest::events::StatusUpdatePerformanceEvent *arg1 = (mk::nettest::events::StatusUpdatePerformanceEvent *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusUpdatePerformanceEvent **)&jarg1; 
  result = (std::string *) & ((arg1)->direction);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusUpdatePerformance_1elapsed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mk::nettest::events::StatusUpdatePerformanceEvent *arg1 = (mk::nettest::events::StatusUpdatePerformanceEvent *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusUpdatePerformanceEvent **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->elapsed = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusUpdatePerformance_1elapsed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mk::nettest::events::StatusUpdatePerformanceEvent *arg1 = (mk::nettest::events::StatusUpdatePerformanceEvent *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusUpdatePerformanceEvent **)&jarg1; 
  result = (double) ((arg1)->elapsed);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusUpdatePerformance_1numStreams_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mk::nettest::events::StatusUpdatePerformanceEvent *arg1 = (mk::nettest::events::StatusUpdatePerformanceEvent *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusUpdatePerformanceEvent **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->num_streams = arg2;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusUpdatePerformance_1numStreams_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mk::nettest::events::StatusUpdatePerformanceEvent *arg1 = (mk::nettest::events::StatusUpdatePerformanceEvent *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusUpdatePerformanceEvent **)&jarg1; 
  result = (int64_t) ((arg1)->num_streams);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusUpdatePerformance_1speedKbps_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mk::nettest::events::StatusUpdatePerformanceEvent *arg1 = (mk::nettest::events::StatusUpdatePerformanceEvent *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusUpdatePerformanceEvent **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->speed_kbps = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusUpdatePerformance_1speedKbps_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mk::nettest::events::StatusUpdatePerformanceEvent *arg1 = (mk::nettest::events::StatusUpdatePerformanceEvent *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusUpdatePerformanceEvent **)&jarg1; 
  result = (double) ((arg1)->speed_kbps);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1EventStatusUpdatePerformance(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mk::nettest::events::StatusUpdatePerformanceEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mk::nettest::events::StatusUpdatePerformanceEvent *)new mk::nettest::events::StatusUpdatePerformanceEvent();
  *(mk::nettest::events::StatusUpdatePerformanceEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1EventStatusUpdatePerformance(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::events::StatusUpdatePerformanceEvent *arg1 = (mk::nettest::events::StatusUpdatePerformanceEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::events::StatusUpdatePerformanceEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusUpdateWebsites_1key_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)mk::nettest::events::StatusUpdateWebsitesEvent::key;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusUpdateWebsites_1url_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mk::nettest::events::StatusUpdateWebsitesEvent *arg1 = (mk::nettest::events::StatusUpdateWebsitesEvent *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusUpdateWebsitesEvent **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->url = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusUpdateWebsites_1url_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mk::nettest::events::StatusUpdateWebsitesEvent *arg1 = (mk::nettest::events::StatusUpdateWebsitesEvent *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusUpdateWebsitesEvent **)&jarg1; 
  result = (std::string *) & ((arg1)->url);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusUpdateWebsites_1status_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mk::nettest::events::StatusUpdateWebsitesEvent *arg1 = (mk::nettest::events::StatusUpdateWebsitesEvent *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusUpdateWebsitesEvent **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->status = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventStatusUpdateWebsites_1status_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mk::nettest::events::StatusUpdateWebsitesEvent *arg1 = (mk::nettest::events::StatusUpdateWebsitesEvent *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::events::StatusUpdateWebsitesEvent **)&jarg1; 
  result = (std::string *) & ((arg1)->status);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1EventStatusUpdateWebsites(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mk::nettest::events::StatusUpdateWebsitesEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mk::nettest::events::StatusUpdateWebsitesEvent *)new mk::nettest::events::StatusUpdateWebsitesEvent();
  *(mk::nettest::events::StatusUpdateWebsitesEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1EventStatusUpdateWebsites(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::events::StatusUpdateWebsitesEvent *arg1 = (mk::nettest::events::StatusUpdateWebsitesEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::events::StatusUpdateWebsitesEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_EventTaskTerminated_1key_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)mk::nettest::events::TaskTerminatedEvent::key;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1EventTaskTerminated(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mk::nettest::events::TaskTerminatedEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mk::nettest::events::TaskTerminatedEvent *)new mk::nettest::events::TaskTerminatedEvent();
  *(mk::nettest::events::TaskTerminatedEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1EventTaskTerminated(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::events::TaskTerminatedEvent *arg1 = (mk::nettest::events::TaskTerminatedEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::events::TaskTerminatedEvent **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1logFilepath_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->log_filepath = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1logFilepath_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  result = (std::string *) & ((arg1)->log_filepath);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1logLevel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->log_level = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1logLevel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  result = (std::string *) & ((arg1)->log_level);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1outputFilepath_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->output_filepath = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1outputFilepath_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  result = (std::string *) & ((arg1)->output_filepath);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1bouncerBaseUrl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->bouncer_base_url = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1bouncerBaseUrl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  result = (std::string *) & ((arg1)->bouncer_base_url);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1collectorBaseUrl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->collector_base_url = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1collectorBaseUrl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  result = (std::string *) & ((arg1)->collector_base_url);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1dnsNameserver_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->dns_nameserver = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1dnsNameserver_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  result = (std::string *) & ((arg1)->dns_nameserver);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1dnsEngine_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->dns_engine = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1dnsEngine_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  result = (std::string *) & ((arg1)->dns_engine);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1geoipAsnPath_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->geoip_asn_path = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1geoipAsnPath_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  result = (std::string *) & ((arg1)->geoip_asn_path);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1geoipCountryPath_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->geoip_country_path = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1geoipCountryPath_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  result = (std::string *) & ((arg1)->geoip_country_path);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1ignoreBouncerError_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ignore_bouncer_error = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1ignoreBouncerError_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  result = (bool) ((arg1)->ignore_bouncer_error);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1ignoreOpenReportError_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ignore_open_report_error = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1ignoreOpenReportError_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  result = (bool) ((arg1)->ignore_open_report_error);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1maxRuntime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->max_runtime = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1maxRuntime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  result = (double) ((arg1)->max_runtime);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1netCaBundlePath_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->net_ca_bundle_path = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1netCaBundlePath_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  result = (std::string *) & ((arg1)->net_ca_bundle_path);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1netTimeout_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->net_timeout = arg2;
}


SWIGEXPORT jdouble JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1netTimeout_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  result = (double) ((arg1)->net_timeout);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1noBouncer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->no_bouncer = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1noBouncer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  result = (bool) ((arg1)->no_bouncer);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1noCollector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->no_collector = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1noCollector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  result = (bool) ((arg1)->no_collector);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1noAsnLookup_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->no_asn_lookup = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1noAsnLookup_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  result = (bool) ((arg1)->no_asn_lookup);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1noCcLookup_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->no_cc_lookup = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1noCcLookup_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  result = (bool) ((arg1)->no_cc_lookup);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1noIpLookup_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->no_ip_lookup = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1noIpLookup_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  result = (bool) ((arg1)->no_ip_lookup);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1noFileReport_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->no_file_report = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1noFileReport_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  result = (bool) ((arg1)->no_file_report);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1noResolverLookup_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->no_resolver_lookup = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1noResolverLookup_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  result = (bool) ((arg1)->no_resolver_lookup);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1probeAsn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->probe_asn = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1probeAsn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  result = (std::string *) & ((arg1)->probe_asn);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1probeCc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->probe_cc = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1probeCc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  result = (std::string *) & ((arg1)->probe_cc);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1probeIp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->probe_ip = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1probeIp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  result = (std::string *) & ((arg1)->probe_ip);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1randomizeInput_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->randomize_input = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1randomizeInput_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  result = (bool) ((arg1)->randomize_input);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1saveRealProbeAsn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->save_real_probe_asn = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1saveRealProbeAsn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  result = (bool) ((arg1)->save_real_probe_asn);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1saveRealProbeCc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->save_real_probe_cc = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1saveRealProbeCc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  result = (bool) ((arg1)->save_real_probe_cc);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1saveRealProbeIp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->save_real_probe_ip = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1saveRealProbeIp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  result = (bool) ((arg1)->save_real_probe_ip);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1saveRealResolverIp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->save_real_resolver_ip = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1saveRealResolverIp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  result = (bool) ((arg1)->save_real_resolver_ip);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1softwareName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->software_name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1softwareName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  result = (std::string *) & ((arg1)->software_name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1softwareVersion_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->software_version = *arg2;
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1softwareVersion_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  result = (std::string *) & ((arg1)->software_version);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBase_1addAnnotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  mk_nettest_common_Settings_addAnnotation(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1SettingsBase(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mk::nettest::common::Settings *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mk::nettest::common::Settings *)new mk::nettest::common::Settings();
  *(mk::nettest::common::Settings **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1SettingsBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::common::Settings *arg1 = (mk::nettest::common::Settings *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::common::Settings **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBaseNeedsInput_1addInput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mk::nettest::common::NeedsInputSettings *arg1 = (mk::nettest::common::NeedsInputSettings *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::NeedsInputSettings **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  mk_nettest_common_NeedsInputSettings_addInput(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBaseNeedsInput_1addInputFilepath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mk::nettest::common::NeedsInputSettings *arg1 = (mk::nettest::common::NeedsInputSettings *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::NeedsInputSettings **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  mk_nettest_common_NeedsInputSettings_addInputFilepath(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1SettingsBaseNeedsInput(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mk::nettest::common::NeedsInputSettings *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mk::nettest::common::NeedsInputSettings *)new mk::nettest::common::NeedsInputSettings();
  *(mk::nettest::common::NeedsInputSettings **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1SettingsBaseNeedsInput(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::common::NeedsInputSettings *arg1 = (mk::nettest::common::NeedsInputSettings *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::common::NeedsInputSettings **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1NettestBase(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mk::nettest::common::Nettest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mk::nettest::common::Nettest *)new SwigDirector_NettestBase(jenv);
  *(mk::nettest::common::Nettest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1NettestBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  result = (bool)(arg1)->run();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1runSwigExplicitNettestBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  result = (bool)(arg1)->mk::nettest::common::Nettest::run();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1interrupt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  (arg1)->interrupt();
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onFailureAsnLookup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::FailureAsnLookupEvent arg2 ;
  mk::nettest::events::FailureAsnLookupEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::FailureAsnLookupEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::FailureAsnLookupEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->on_failure_asn_lookup(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onFailureAsnLookupSwigExplicitNettestBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::FailureAsnLookupEvent arg2 ;
  mk::nettest::events::FailureAsnLookupEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::FailureAsnLookupEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::FailureAsnLookupEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->mk::nettest::common::Nettest::on_failure_asn_lookup(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onFailureCcLookup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::FailureCcLookupEvent arg2 ;
  mk::nettest::events::FailureCcLookupEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::FailureCcLookupEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::FailureCcLookupEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->on_failure_cc_lookup(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onFailureCcLookupSwigExplicitNettestBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::FailureCcLookupEvent arg2 ;
  mk::nettest::events::FailureCcLookupEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::FailureCcLookupEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::FailureCcLookupEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->mk::nettest::common::Nettest::on_failure_cc_lookup(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onFailureIpLookup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::FailureIpLookupEvent arg2 ;
  mk::nettest::events::FailureIpLookupEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::FailureIpLookupEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::FailureIpLookupEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->on_failure_ip_lookup(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onFailureIpLookupSwigExplicitNettestBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::FailureIpLookupEvent arg2 ;
  mk::nettest::events::FailureIpLookupEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::FailureIpLookupEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::FailureIpLookupEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->mk::nettest::common::Nettest::on_failure_ip_lookup(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onFailureMeasurement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::FailureMeasurementEvent arg2 ;
  mk::nettest::events::FailureMeasurementEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::FailureMeasurementEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::FailureMeasurementEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->on_failure_measurement(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onFailureMeasurementSwigExplicitNettestBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::FailureMeasurementEvent arg2 ;
  mk::nettest::events::FailureMeasurementEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::FailureMeasurementEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::FailureMeasurementEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->mk::nettest::common::Nettest::on_failure_measurement(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onFailureMeasurementSubmission(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::FailureMeasurementSubmissionEvent arg2 ;
  mk::nettest::events::FailureMeasurementSubmissionEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::FailureMeasurementSubmissionEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::FailureMeasurementSubmissionEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->on_failure_measurement_submission(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onFailureMeasurementSubmissionSwigExplicitNettestBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::FailureMeasurementSubmissionEvent arg2 ;
  mk::nettest::events::FailureMeasurementSubmissionEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::FailureMeasurementSubmissionEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::FailureMeasurementSubmissionEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->mk::nettest::common::Nettest::on_failure_measurement_submission(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onFailureReportCreate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::FailureReportCreateEvent arg2 ;
  mk::nettest::events::FailureReportCreateEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::FailureReportCreateEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::FailureReportCreateEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->on_failure_report_create(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onFailureReportCreateSwigExplicitNettestBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::FailureReportCreateEvent arg2 ;
  mk::nettest::events::FailureReportCreateEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::FailureReportCreateEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::FailureReportCreateEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->mk::nettest::common::Nettest::on_failure_report_create(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onFailureReportClose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::FailureReportCloseEvent arg2 ;
  mk::nettest::events::FailureReportCloseEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::FailureReportCloseEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::FailureReportCloseEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->on_failure_report_close(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onFailureReportCloseSwigExplicitNettestBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::FailureReportCloseEvent arg2 ;
  mk::nettest::events::FailureReportCloseEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::FailureReportCloseEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::FailureReportCloseEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->mk::nettest::common::Nettest::on_failure_report_close(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onFailureResolverLookup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::FailureResolverLookupEvent arg2 ;
  mk::nettest::events::FailureResolverLookupEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::FailureResolverLookupEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::FailureResolverLookupEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->on_failure_resolver_lookup(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onFailureResolverLookupSwigExplicitNettestBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::FailureResolverLookupEvent arg2 ;
  mk::nettest::events::FailureResolverLookupEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::FailureResolverLookupEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::FailureResolverLookupEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->mk::nettest::common::Nettest::on_failure_resolver_lookup(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onFailureStartup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::FailureStartupEvent arg2 ;
  mk::nettest::events::FailureStartupEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::FailureStartupEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::FailureStartupEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->on_failure_startup(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onFailureStartupSwigExplicitNettestBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::FailureStartupEvent arg2 ;
  mk::nettest::events::FailureStartupEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::FailureStartupEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::FailureStartupEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->mk::nettest::common::Nettest::on_failure_startup(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onLog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::LogEvent arg2 ;
  mk::nettest::events::LogEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::LogEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::LogEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->on_log(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onLogSwigExplicitNettestBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::LogEvent arg2 ;
  mk::nettest::events::LogEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::LogEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::LogEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->mk::nettest::common::Nettest::on_log(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onMeasurement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::MeasurementEvent arg2 ;
  mk::nettest::events::MeasurementEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::MeasurementEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::MeasurementEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->on_measurement(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onMeasurementSwigExplicitNettestBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::MeasurementEvent arg2 ;
  mk::nettest::events::MeasurementEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::MeasurementEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::MeasurementEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->mk::nettest::common::Nettest::on_measurement(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onStatusEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::StatusEndEvent arg2 ;
  mk::nettest::events::StatusEndEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::StatusEndEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::StatusEndEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->on_status_end(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onStatusEndSwigExplicitNettestBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::StatusEndEvent arg2 ;
  mk::nettest::events::StatusEndEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::StatusEndEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::StatusEndEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->mk::nettest::common::Nettest::on_status_end(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onStatusGeoipLookup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::StatusGeoipLookupEvent arg2 ;
  mk::nettest::events::StatusGeoipLookupEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::StatusGeoipLookupEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::StatusGeoipLookupEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->on_status_geoip_lookup(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onStatusGeoipLookupSwigExplicitNettestBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::StatusGeoipLookupEvent arg2 ;
  mk::nettest::events::StatusGeoipLookupEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::StatusGeoipLookupEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::StatusGeoipLookupEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->mk::nettest::common::Nettest::on_status_geoip_lookup(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onStatusProgress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::StatusProgressEvent arg2 ;
  mk::nettest::events::StatusProgressEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::StatusProgressEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::StatusProgressEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->on_status_progress(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onStatusProgressSwigExplicitNettestBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::StatusProgressEvent arg2 ;
  mk::nettest::events::StatusProgressEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::StatusProgressEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::StatusProgressEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->mk::nettest::common::Nettest::on_status_progress(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onStatusQueued(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::StatusQueuedEvent arg2 ;
  mk::nettest::events::StatusQueuedEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::StatusQueuedEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::StatusQueuedEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->on_status_queued(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onStatusQueuedSwigExplicitNettestBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::StatusQueuedEvent arg2 ;
  mk::nettest::events::StatusQueuedEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::StatusQueuedEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::StatusQueuedEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->mk::nettest::common::Nettest::on_status_queued(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onStatusMeasurementStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::StatusMeasurementStartEvent arg2 ;
  mk::nettest::events::StatusMeasurementStartEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::StatusMeasurementStartEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::StatusMeasurementStartEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->on_status_measurement_start(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onStatusMeasurementStartSwigExplicitNettestBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::StatusMeasurementStartEvent arg2 ;
  mk::nettest::events::StatusMeasurementStartEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::StatusMeasurementStartEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::StatusMeasurementStartEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->mk::nettest::common::Nettest::on_status_measurement_start(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onStatusMeasurementSubmission(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::StatusMeasurementSubmissionEvent arg2 ;
  mk::nettest::events::StatusMeasurementSubmissionEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::StatusMeasurementSubmissionEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::StatusMeasurementSubmissionEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->on_status_measurement_submission(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onStatusMeasurementSubmissionSwigExplicitNettestBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::StatusMeasurementSubmissionEvent arg2 ;
  mk::nettest::events::StatusMeasurementSubmissionEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::StatusMeasurementSubmissionEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::StatusMeasurementSubmissionEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->mk::nettest::common::Nettest::on_status_measurement_submission(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onStatusMeasurementDone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::StatusMeasurementDoneEvent arg2 ;
  mk::nettest::events::StatusMeasurementDoneEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::StatusMeasurementDoneEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::StatusMeasurementDoneEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->on_status_measurement_done(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onStatusMeasurementDoneSwigExplicitNettestBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::StatusMeasurementDoneEvent arg2 ;
  mk::nettest::events::StatusMeasurementDoneEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::StatusMeasurementDoneEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::StatusMeasurementDoneEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->mk::nettest::common::Nettest::on_status_measurement_done(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onStatusReportClose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::StatusReportCloseEvent arg2 ;
  mk::nettest::events::StatusReportCloseEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::StatusReportCloseEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::StatusReportCloseEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->on_status_report_close(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onStatusReportCloseSwigExplicitNettestBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::StatusReportCloseEvent arg2 ;
  mk::nettest::events::StatusReportCloseEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::StatusReportCloseEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::StatusReportCloseEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->mk::nettest::common::Nettest::on_status_report_close(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onStatusReportCreate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::StatusReportCreateEvent arg2 ;
  mk::nettest::events::StatusReportCreateEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::StatusReportCreateEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::StatusReportCreateEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->on_status_report_create(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onStatusReportCreateSwigExplicitNettestBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::StatusReportCreateEvent arg2 ;
  mk::nettest::events::StatusReportCreateEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::StatusReportCreateEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::StatusReportCreateEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->mk::nettest::common::Nettest::on_status_report_create(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onStatusResolverLookup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::StatusResolverLookupEvent arg2 ;
  mk::nettest::events::StatusResolverLookupEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::StatusResolverLookupEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::StatusResolverLookupEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->on_status_resolver_lookup(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onStatusResolverLookupSwigExplicitNettestBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::StatusResolverLookupEvent arg2 ;
  mk::nettest::events::StatusResolverLookupEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::StatusResolverLookupEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::StatusResolverLookupEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->mk::nettest::common::Nettest::on_status_resolver_lookup(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onStatusStarted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::StatusStartedEvent arg2 ;
  mk::nettest::events::StatusStartedEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::StatusStartedEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::StatusStartedEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->on_status_started(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onStatusStartedSwigExplicitNettestBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::StatusStartedEvent arg2 ;
  mk::nettest::events::StatusStartedEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::StatusStartedEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::StatusStartedEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->mk::nettest::common::Nettest::on_status_started(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onTaskTerminated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::TaskTerminatedEvent arg2 ;
  mk::nettest::events::TaskTerminatedEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::TaskTerminatedEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::TaskTerminatedEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->on_task_terminated(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1onTaskTerminatedSwigExplicitNettestBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::Nettest *arg1 = (mk::nettest::common::Nettest *) 0 ;
  mk::nettest::events::TaskTerminatedEvent arg2 ;
  mk::nettest::events::TaskTerminatedEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::Nettest **)&jarg1; 
  argp2 = *(mk::nettest::events::TaskTerminatedEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::TaskTerminatedEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->mk::nettest::common::Nettest::on_task_terminated(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  mk::nettest::common::Nettest *obj = *((mk::nettest::common::Nettest **)&objarg);
  (void)jcls;
  SwigDirector_NettestBase *director = dynamic_cast<SwigDirector_NettestBase *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBase_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mk::nettest::common::Nettest *obj = *((mk::nettest::common::Nettest **)&objarg);
  SwigDirector_NettestBase *director = dynamic_cast<SwigDirector_NettestBase *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1NettestBasePerformance(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::common::PerformanceNettest *arg1 = (mk::nettest::common::PerformanceNettest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::common::PerformanceNettest **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBasePerformance_1onStatusUpdatePerformance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::PerformanceNettest *arg1 = (mk::nettest::common::PerformanceNettest *) 0 ;
  mk::nettest::events::StatusUpdatePerformanceEvent arg2 ;
  mk::nettest::events::StatusUpdatePerformanceEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::PerformanceNettest **)&jarg1; 
  argp2 = *(mk::nettest::events::StatusUpdatePerformanceEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::StatusUpdatePerformanceEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->on_status_update_performance(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBasePerformance_1onStatusUpdatePerformanceSwigExplicitNettestBasePerformance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::PerformanceNettest *arg1 = (mk::nettest::common::PerformanceNettest *) 0 ;
  mk::nettest::events::StatusUpdatePerformanceEvent arg2 ;
  mk::nettest::events::StatusUpdatePerformanceEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::PerformanceNettest **)&jarg1; 
  argp2 = *(mk::nettest::events::StatusUpdatePerformanceEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::StatusUpdatePerformanceEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->mk::nettest::common::PerformanceNettest::on_status_update_performance(arg2);
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1NettestBasePerformance(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mk::nettest::common::PerformanceNettest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mk::nettest::common::PerformanceNettest *)new SwigDirector_NettestBasePerformance(jenv);
  *(mk::nettest::common::PerformanceNettest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBasePerformance_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  mk::nettest::common::PerformanceNettest *obj = *((mk::nettest::common::PerformanceNettest **)&objarg);
  (void)jcls;
  SwigDirector_NettestBasePerformance *director = dynamic_cast<SwigDirector_NettestBasePerformance *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBasePerformance_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mk::nettest::common::PerformanceNettest *obj = *((mk::nettest::common::PerformanceNettest **)&objarg);
  SwigDirector_NettestBasePerformance *director = dynamic_cast<SwigDirector_NettestBasePerformance *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1NettestBaseWebsites(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::common::WebsitesNettest *arg1 = (mk::nettest::common::WebsitesNettest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::common::WebsitesNettest **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBaseWebsites_1onStatusUpdateWebsites(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::WebsitesNettest *arg1 = (mk::nettest::common::WebsitesNettest *) 0 ;
  mk::nettest::events::StatusUpdateWebsitesEvent arg2 ;
  mk::nettest::events::StatusUpdateWebsitesEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::WebsitesNettest **)&jarg1; 
  argp2 = *(mk::nettest::events::StatusUpdateWebsitesEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::StatusUpdateWebsitesEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->on_status_update_websites(arg2);
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBaseWebsites_1onStatusUpdateWebsitesSwigExplicitNettestBaseWebsites(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mk::nettest::common::WebsitesNettest *arg1 = (mk::nettest::common::WebsitesNettest *) 0 ;
  mk::nettest::events::StatusUpdateWebsitesEvent arg2 ;
  mk::nettest::events::StatusUpdateWebsitesEvent *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mk::nettest::common::WebsitesNettest **)&jarg1; 
  argp2 = *(mk::nettest::events::StatusUpdateWebsitesEvent **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::events::StatusUpdateWebsitesEvent");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->mk::nettest::common::WebsitesNettest::on_status_update_websites(arg2);
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1NettestBaseWebsites(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mk::nettest::common::WebsitesNettest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mk::nettest::common::WebsitesNettest *)new SwigDirector_NettestBaseWebsites(jenv);
  *(mk::nettest::common::WebsitesNettest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBaseWebsites_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  mk::nettest::common::WebsitesNettest *obj = *((mk::nettest::common::WebsitesNettest **)&objarg);
  (void)jcls;
  SwigDirector_NettestBaseWebsites *director = dynamic_cast<SwigDirector_NettestBaseWebsites *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBaseWebsites_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mk::nettest::common::WebsitesNettest *obj = *((mk::nettest::common::WebsitesNettest **)&objarg);
  SwigDirector_NettestBaseWebsites *director = dynamic_cast<SwigDirector_NettestBaseWebsites *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsCaptivePortal_1name_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)mk::nettest::CaptivePortalSettings::name;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1SettingsCaptivePortal(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mk::nettest::CaptivePortalSettings *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mk::nettest::CaptivePortalSettings *)new mk::nettest::CaptivePortalSettings();
  *(mk::nettest::CaptivePortalSettings **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1SettingsCaptivePortal(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::CaptivePortalSettings *arg1 = (mk::nettest::CaptivePortalSettings *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::CaptivePortalSettings **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1NettestCaptivePortal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mk::nettest::CaptivePortalSettings arg1 ;
  mk::nettest::CaptivePortalSettings *argp1 ;
  mk::nettest::CaptivePortalNettest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(mk::nettest::CaptivePortalSettings **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::CaptivePortalSettings");
    return 0;
  }
  arg1 = *argp1; 
  result = (mk::nettest::CaptivePortalNettest *)new SwigDirector_NettestCaptivePortal(jenv,arg1);
  *(mk::nettest::CaptivePortalNettest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1NettestCaptivePortal(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::CaptivePortalNettest *arg1 = (mk::nettest::CaptivePortalNettest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::CaptivePortalNettest **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestCaptivePortal_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mk::nettest::CaptivePortalNettest *arg1 = (mk::nettest::CaptivePortalNettest *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::CaptivePortalNettest **)&jarg1; 
  result = (bool)(arg1)->run();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestCaptivePortal_1runSwigExplicitNettestCaptivePortal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mk::nettest::CaptivePortalNettest *arg1 = (mk::nettest::CaptivePortalNettest *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::CaptivePortalNettest **)&jarg1; 
  result = (bool)(arg1)->mk::nettest::CaptivePortalNettest::run();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestCaptivePortal_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  mk::nettest::CaptivePortalNettest *obj = *((mk::nettest::CaptivePortalNettest **)&objarg);
  (void)jcls;
  SwigDirector_NettestCaptivePortal *director = dynamic_cast<SwigDirector_NettestCaptivePortal *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestCaptivePortal_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mk::nettest::CaptivePortalNettest *obj = *((mk::nettest::CaptivePortalNettest **)&objarg);
  SwigDirector_NettestCaptivePortal *director = dynamic_cast<SwigDirector_NettestCaptivePortal *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsDash_1name_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)mk::nettest::DashSettings::name;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1SettingsDash(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mk::nettest::DashSettings *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mk::nettest::DashSettings *)new mk::nettest::DashSettings();
  *(mk::nettest::DashSettings **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1SettingsDash(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::DashSettings *arg1 = (mk::nettest::DashSettings *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::DashSettings **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1NettestDash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mk::nettest::DashSettings arg1 ;
  mk::nettest::DashSettings *argp1 ;
  mk::nettest::DashNettest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(mk::nettest::DashSettings **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::DashSettings");
    return 0;
  }
  arg1 = *argp1; 
  result = (mk::nettest::DashNettest *)new SwigDirector_NettestDash(jenv,arg1);
  *(mk::nettest::DashNettest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1NettestDash(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::DashNettest *arg1 = (mk::nettest::DashNettest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::DashNettest **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestDash_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mk::nettest::DashNettest *arg1 = (mk::nettest::DashNettest *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::DashNettest **)&jarg1; 
  result = (bool)(arg1)->run();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestDash_1runSwigExplicitNettestDash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mk::nettest::DashNettest *arg1 = (mk::nettest::DashNettest *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::DashNettest **)&jarg1; 
  result = (bool)(arg1)->mk::nettest::DashNettest::run();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestDash_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  mk::nettest::DashNettest *obj = *((mk::nettest::DashNettest **)&objarg);
  (void)jcls;
  SwigDirector_NettestDash *director = dynamic_cast<SwigDirector_NettestDash *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestDash_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mk::nettest::DashNettest *obj = *((mk::nettest::DashNettest **)&objarg);
  SwigDirector_NettestDash *director = dynamic_cast<SwigDirector_NettestDash *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsDnsInjection_1name_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)mk::nettest::DnsInjectionSettings::name;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1SettingsDnsInjection(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mk::nettest::DnsInjectionSettings *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mk::nettest::DnsInjectionSettings *)new mk::nettest::DnsInjectionSettings();
  *(mk::nettest::DnsInjectionSettings **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1SettingsDnsInjection(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::DnsInjectionSettings *arg1 = (mk::nettest::DnsInjectionSettings *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::DnsInjectionSettings **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1NettestDnsInjection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mk::nettest::DnsInjectionSettings arg1 ;
  mk::nettest::DnsInjectionSettings *argp1 ;
  mk::nettest::DnsInjectionNettest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(mk::nettest::DnsInjectionSettings **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::DnsInjectionSettings");
    return 0;
  }
  arg1 = *argp1; 
  result = (mk::nettest::DnsInjectionNettest *)new SwigDirector_NettestDnsInjection(jenv,arg1);
  *(mk::nettest::DnsInjectionNettest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1NettestDnsInjection(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::DnsInjectionNettest *arg1 = (mk::nettest::DnsInjectionNettest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::DnsInjectionNettest **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestDnsInjection_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mk::nettest::DnsInjectionNettest *arg1 = (mk::nettest::DnsInjectionNettest *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::DnsInjectionNettest **)&jarg1; 
  result = (bool)(arg1)->run();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestDnsInjection_1runSwigExplicitNettestDnsInjection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mk::nettest::DnsInjectionNettest *arg1 = (mk::nettest::DnsInjectionNettest *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::DnsInjectionNettest **)&jarg1; 
  result = (bool)(arg1)->mk::nettest::DnsInjectionNettest::run();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestDnsInjection_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  mk::nettest::DnsInjectionNettest *obj = *((mk::nettest::DnsInjectionNettest **)&objarg);
  (void)jcls;
  SwigDirector_NettestDnsInjection *director = dynamic_cast<SwigDirector_NettestDnsInjection *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestDnsInjection_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mk::nettest::DnsInjectionNettest *obj = *((mk::nettest::DnsInjectionNettest **)&objarg);
  SwigDirector_NettestDnsInjection *director = dynamic_cast<SwigDirector_NettestDnsInjection *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsFacebookMessenger_1name_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)mk::nettest::FacebookMessengerSettings::name;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1SettingsFacebookMessenger(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mk::nettest::FacebookMessengerSettings *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mk::nettest::FacebookMessengerSettings *)new mk::nettest::FacebookMessengerSettings();
  *(mk::nettest::FacebookMessengerSettings **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1SettingsFacebookMessenger(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::FacebookMessengerSettings *arg1 = (mk::nettest::FacebookMessengerSettings *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::FacebookMessengerSettings **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1NettestFacebookMessenger(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mk::nettest::FacebookMessengerSettings arg1 ;
  mk::nettest::FacebookMessengerSettings *argp1 ;
  mk::nettest::FacebookMessengerNettest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(mk::nettest::FacebookMessengerSettings **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::FacebookMessengerSettings");
    return 0;
  }
  arg1 = *argp1; 
  result = (mk::nettest::FacebookMessengerNettest *)new SwigDirector_NettestFacebookMessenger(jenv,arg1);
  *(mk::nettest::FacebookMessengerNettest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1NettestFacebookMessenger(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::FacebookMessengerNettest *arg1 = (mk::nettest::FacebookMessengerNettest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::FacebookMessengerNettest **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestFacebookMessenger_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mk::nettest::FacebookMessengerNettest *arg1 = (mk::nettest::FacebookMessengerNettest *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::FacebookMessengerNettest **)&jarg1; 
  result = (bool)(arg1)->run();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestFacebookMessenger_1runSwigExplicitNettestFacebookMessenger(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mk::nettest::FacebookMessengerNettest *arg1 = (mk::nettest::FacebookMessengerNettest *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::FacebookMessengerNettest **)&jarg1; 
  result = (bool)(arg1)->mk::nettest::FacebookMessengerNettest::run();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestFacebookMessenger_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  mk::nettest::FacebookMessengerNettest *obj = *((mk::nettest::FacebookMessengerNettest **)&objarg);
  (void)jcls;
  SwigDirector_NettestFacebookMessenger *director = dynamic_cast<SwigDirector_NettestFacebookMessenger *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestFacebookMessenger_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mk::nettest::FacebookMessengerNettest *obj = *((mk::nettest::FacebookMessengerNettest **)&objarg);
  SwigDirector_NettestFacebookMessenger *director = dynamic_cast<SwigDirector_NettestFacebookMessenger *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsHttpHeaderFieldManipulation_1name_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)mk::nettest::HttpHeaderFieldManipulationSettings::name;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1SettingsHttpHeaderFieldManipulation(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mk::nettest::HttpHeaderFieldManipulationSettings *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mk::nettest::HttpHeaderFieldManipulationSettings *)new mk::nettest::HttpHeaderFieldManipulationSettings();
  *(mk::nettest::HttpHeaderFieldManipulationSettings **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1SettingsHttpHeaderFieldManipulation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::HttpHeaderFieldManipulationSettings *arg1 = (mk::nettest::HttpHeaderFieldManipulationSettings *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::HttpHeaderFieldManipulationSettings **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1NettestHttpHeaderFieldManipulation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mk::nettest::HttpHeaderFieldManipulationSettings arg1 ;
  mk::nettest::HttpHeaderFieldManipulationSettings *argp1 ;
  mk::nettest::HttpHeaderFieldManipulationNettest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(mk::nettest::HttpHeaderFieldManipulationSettings **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::HttpHeaderFieldManipulationSettings");
    return 0;
  }
  arg1 = *argp1; 
  result = (mk::nettest::HttpHeaderFieldManipulationNettest *)new SwigDirector_NettestHttpHeaderFieldManipulation(jenv,arg1);
  *(mk::nettest::HttpHeaderFieldManipulationNettest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1NettestHttpHeaderFieldManipulation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::HttpHeaderFieldManipulationNettest *arg1 = (mk::nettest::HttpHeaderFieldManipulationNettest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::HttpHeaderFieldManipulationNettest **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestHttpHeaderFieldManipulation_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mk::nettest::HttpHeaderFieldManipulationNettest *arg1 = (mk::nettest::HttpHeaderFieldManipulationNettest *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::HttpHeaderFieldManipulationNettest **)&jarg1; 
  result = (bool)(arg1)->run();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestHttpHeaderFieldManipulation_1runSwigExplicitNettestHttpHeaderFieldManipulation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mk::nettest::HttpHeaderFieldManipulationNettest *arg1 = (mk::nettest::HttpHeaderFieldManipulationNettest *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::HttpHeaderFieldManipulationNettest **)&jarg1; 
  result = (bool)(arg1)->mk::nettest::HttpHeaderFieldManipulationNettest::run();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestHttpHeaderFieldManipulation_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  mk::nettest::HttpHeaderFieldManipulationNettest *obj = *((mk::nettest::HttpHeaderFieldManipulationNettest **)&objarg);
  (void)jcls;
  SwigDirector_NettestHttpHeaderFieldManipulation *director = dynamic_cast<SwigDirector_NettestHttpHeaderFieldManipulation *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestHttpHeaderFieldManipulation_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mk::nettest::HttpHeaderFieldManipulationNettest *obj = *((mk::nettest::HttpHeaderFieldManipulationNettest **)&objarg);
  SwigDirector_NettestHttpHeaderFieldManipulation *director = dynamic_cast<SwigDirector_NettestHttpHeaderFieldManipulation *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsHttpInvalidRequestLine_1name_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)mk::nettest::HttpInvalidRequestLineSettings::name;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1SettingsHttpInvalidRequestLine(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mk::nettest::HttpInvalidRequestLineSettings *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mk::nettest::HttpInvalidRequestLineSettings *)new mk::nettest::HttpInvalidRequestLineSettings();
  *(mk::nettest::HttpInvalidRequestLineSettings **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1SettingsHttpInvalidRequestLine(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::HttpInvalidRequestLineSettings *arg1 = (mk::nettest::HttpInvalidRequestLineSettings *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::HttpInvalidRequestLineSettings **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1NettestHttpInvalidRequestLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mk::nettest::HttpInvalidRequestLineSettings arg1 ;
  mk::nettest::HttpInvalidRequestLineSettings *argp1 ;
  mk::nettest::HttpInvalidRequestLineNettest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(mk::nettest::HttpInvalidRequestLineSettings **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::HttpInvalidRequestLineSettings");
    return 0;
  }
  arg1 = *argp1; 
  result = (mk::nettest::HttpInvalidRequestLineNettest *)new SwigDirector_NettestHttpInvalidRequestLine(jenv,arg1);
  *(mk::nettest::HttpInvalidRequestLineNettest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1NettestHttpInvalidRequestLine(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::HttpInvalidRequestLineNettest *arg1 = (mk::nettest::HttpInvalidRequestLineNettest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::HttpInvalidRequestLineNettest **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestHttpInvalidRequestLine_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mk::nettest::HttpInvalidRequestLineNettest *arg1 = (mk::nettest::HttpInvalidRequestLineNettest *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::HttpInvalidRequestLineNettest **)&jarg1; 
  result = (bool)(arg1)->run();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestHttpInvalidRequestLine_1runSwigExplicitNettestHttpInvalidRequestLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mk::nettest::HttpInvalidRequestLineNettest *arg1 = (mk::nettest::HttpInvalidRequestLineNettest *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::HttpInvalidRequestLineNettest **)&jarg1; 
  result = (bool)(arg1)->mk::nettest::HttpInvalidRequestLineNettest::run();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestHttpInvalidRequestLine_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  mk::nettest::HttpInvalidRequestLineNettest *obj = *((mk::nettest::HttpInvalidRequestLineNettest **)&objarg);
  (void)jcls;
  SwigDirector_NettestHttpInvalidRequestLine *director = dynamic_cast<SwigDirector_NettestHttpInvalidRequestLine *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestHttpInvalidRequestLine_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mk::nettest::HttpInvalidRequestLineNettest *obj = *((mk::nettest::HttpInvalidRequestLineNettest **)&objarg);
  SwigDirector_NettestHttpInvalidRequestLine *director = dynamic_cast<SwigDirector_NettestHttpInvalidRequestLine *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsMeekFrontedRequests_1name_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)mk::nettest::MeekFrontedRequestsSettings::name;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1SettingsMeekFrontedRequests(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mk::nettest::MeekFrontedRequestsSettings *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mk::nettest::MeekFrontedRequestsSettings *)new mk::nettest::MeekFrontedRequestsSettings();
  *(mk::nettest::MeekFrontedRequestsSettings **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1SettingsMeekFrontedRequests(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::MeekFrontedRequestsSettings *arg1 = (mk::nettest::MeekFrontedRequestsSettings *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::MeekFrontedRequestsSettings **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1NettestMeekFrontedRequests(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mk::nettest::MeekFrontedRequestsSettings arg1 ;
  mk::nettest::MeekFrontedRequestsSettings *argp1 ;
  mk::nettest::MeekFrontedRequestsNettest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(mk::nettest::MeekFrontedRequestsSettings **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::MeekFrontedRequestsSettings");
    return 0;
  }
  arg1 = *argp1; 
  result = (mk::nettest::MeekFrontedRequestsNettest *)new SwigDirector_NettestMeekFrontedRequests(jenv,arg1);
  *(mk::nettest::MeekFrontedRequestsNettest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1NettestMeekFrontedRequests(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::MeekFrontedRequestsNettest *arg1 = (mk::nettest::MeekFrontedRequestsNettest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::MeekFrontedRequestsNettest **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestMeekFrontedRequests_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mk::nettest::MeekFrontedRequestsNettest *arg1 = (mk::nettest::MeekFrontedRequestsNettest *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::MeekFrontedRequestsNettest **)&jarg1; 
  result = (bool)(arg1)->run();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestMeekFrontedRequests_1runSwigExplicitNettestMeekFrontedRequests(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mk::nettest::MeekFrontedRequestsNettest *arg1 = (mk::nettest::MeekFrontedRequestsNettest *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::MeekFrontedRequestsNettest **)&jarg1; 
  result = (bool)(arg1)->mk::nettest::MeekFrontedRequestsNettest::run();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestMeekFrontedRequests_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  mk::nettest::MeekFrontedRequestsNettest *obj = *((mk::nettest::MeekFrontedRequestsNettest **)&objarg);
  (void)jcls;
  SwigDirector_NettestMeekFrontedRequests *director = dynamic_cast<SwigDirector_NettestMeekFrontedRequests *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestMeekFrontedRequests_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mk::nettest::MeekFrontedRequestsNettest *obj = *((mk::nettest::MeekFrontedRequestsNettest **)&objarg);
  SwigDirector_NettestMeekFrontedRequests *director = dynamic_cast<SwigDirector_NettestMeekFrontedRequests *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsMultiNdt_1name_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)mk::nettest::MultiNdtSettings::name;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1SettingsMultiNdt(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mk::nettest::MultiNdtSettings *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mk::nettest::MultiNdtSettings *)new mk::nettest::MultiNdtSettings();
  *(mk::nettest::MultiNdtSettings **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1SettingsMultiNdt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::MultiNdtSettings *arg1 = (mk::nettest::MultiNdtSettings *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::MultiNdtSettings **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1NettestMultiNdt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mk::nettest::MultiNdtSettings arg1 ;
  mk::nettest::MultiNdtSettings *argp1 ;
  mk::nettest::MultiNdtNettest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(mk::nettest::MultiNdtSettings **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::MultiNdtSettings");
    return 0;
  }
  arg1 = *argp1; 
  result = (mk::nettest::MultiNdtNettest *)new SwigDirector_NettestMultiNdt(jenv,arg1);
  *(mk::nettest::MultiNdtNettest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1NettestMultiNdt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::MultiNdtNettest *arg1 = (mk::nettest::MultiNdtNettest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::MultiNdtNettest **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestMultiNdt_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mk::nettest::MultiNdtNettest *arg1 = (mk::nettest::MultiNdtNettest *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::MultiNdtNettest **)&jarg1; 
  result = (bool)(arg1)->run();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestMultiNdt_1runSwigExplicitNettestMultiNdt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mk::nettest::MultiNdtNettest *arg1 = (mk::nettest::MultiNdtNettest *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::MultiNdtNettest **)&jarg1; 
  result = (bool)(arg1)->mk::nettest::MultiNdtNettest::run();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestMultiNdt_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  mk::nettest::MultiNdtNettest *obj = *((mk::nettest::MultiNdtNettest **)&objarg);
  (void)jcls;
  SwigDirector_NettestMultiNdt *director = dynamic_cast<SwigDirector_NettestMultiNdt *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestMultiNdt_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mk::nettest::MultiNdtNettest *obj = *((mk::nettest::MultiNdtNettest **)&objarg);
  SwigDirector_NettestMultiNdt *director = dynamic_cast<SwigDirector_NettestMultiNdt *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsNdt_1name_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)mk::nettest::NdtSettings::name;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1SettingsNdt(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mk::nettest::NdtSettings *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mk::nettest::NdtSettings *)new mk::nettest::NdtSettings();
  *(mk::nettest::NdtSettings **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1SettingsNdt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::NdtSettings *arg1 = (mk::nettest::NdtSettings *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::NdtSettings **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1NettestNdt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mk::nettest::NdtSettings arg1 ;
  mk::nettest::NdtSettings *argp1 ;
  mk::nettest::NdtNettest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(mk::nettest::NdtSettings **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::NdtSettings");
    return 0;
  }
  arg1 = *argp1; 
  result = (mk::nettest::NdtNettest *)new SwigDirector_NettestNdt(jenv,arg1);
  *(mk::nettest::NdtNettest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1NettestNdt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::NdtNettest *arg1 = (mk::nettest::NdtNettest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::NdtNettest **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestNdt_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mk::nettest::NdtNettest *arg1 = (mk::nettest::NdtNettest *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::NdtNettest **)&jarg1; 
  result = (bool)(arg1)->run();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestNdt_1runSwigExplicitNettestNdt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mk::nettest::NdtNettest *arg1 = (mk::nettest::NdtNettest *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::NdtNettest **)&jarg1; 
  result = (bool)(arg1)->mk::nettest::NdtNettest::run();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestNdt_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  mk::nettest::NdtNettest *obj = *((mk::nettest::NdtNettest **)&objarg);
  (void)jcls;
  SwigDirector_NettestNdt *director = dynamic_cast<SwigDirector_NettestNdt *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestNdt_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mk::nettest::NdtNettest *obj = *((mk::nettest::NdtNettest **)&objarg);
  SwigDirector_NettestNdt *director = dynamic_cast<SwigDirector_NettestNdt *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsTcpConnect_1name_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)mk::nettest::TcpConnectSettings::name;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1SettingsTcpConnect(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mk::nettest::TcpConnectSettings *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mk::nettest::TcpConnectSettings *)new mk::nettest::TcpConnectSettings();
  *(mk::nettest::TcpConnectSettings **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1SettingsTcpConnect(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::TcpConnectSettings *arg1 = (mk::nettest::TcpConnectSettings *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::TcpConnectSettings **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1NettestTcpConnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mk::nettest::TcpConnectSettings arg1 ;
  mk::nettest::TcpConnectSettings *argp1 ;
  mk::nettest::TcpConnectNettest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(mk::nettest::TcpConnectSettings **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::TcpConnectSettings");
    return 0;
  }
  arg1 = *argp1; 
  result = (mk::nettest::TcpConnectNettest *)new SwigDirector_NettestTcpConnect(jenv,arg1);
  *(mk::nettest::TcpConnectNettest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1NettestTcpConnect(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::TcpConnectNettest *arg1 = (mk::nettest::TcpConnectNettest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::TcpConnectNettest **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestTcpConnect_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mk::nettest::TcpConnectNettest *arg1 = (mk::nettest::TcpConnectNettest *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::TcpConnectNettest **)&jarg1; 
  result = (bool)(arg1)->run();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestTcpConnect_1runSwigExplicitNettestTcpConnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mk::nettest::TcpConnectNettest *arg1 = (mk::nettest::TcpConnectNettest *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::TcpConnectNettest **)&jarg1; 
  result = (bool)(arg1)->mk::nettest::TcpConnectNettest::run();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestTcpConnect_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  mk::nettest::TcpConnectNettest *obj = *((mk::nettest::TcpConnectNettest **)&objarg);
  (void)jcls;
  SwigDirector_NettestTcpConnect *director = dynamic_cast<SwigDirector_NettestTcpConnect *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestTcpConnect_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mk::nettest::TcpConnectNettest *obj = *((mk::nettest::TcpConnectNettest **)&objarg);
  SwigDirector_NettestTcpConnect *director = dynamic_cast<SwigDirector_NettestTcpConnect *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsTelegram_1name_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)mk::nettest::TelegramSettings::name;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1SettingsTelegram(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mk::nettest::TelegramSettings *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mk::nettest::TelegramSettings *)new mk::nettest::TelegramSettings();
  *(mk::nettest::TelegramSettings **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1SettingsTelegram(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::TelegramSettings *arg1 = (mk::nettest::TelegramSettings *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::TelegramSettings **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1NettestTelegram(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mk::nettest::TelegramSettings arg1 ;
  mk::nettest::TelegramSettings *argp1 ;
  mk::nettest::TelegramNettest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(mk::nettest::TelegramSettings **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::TelegramSettings");
    return 0;
  }
  arg1 = *argp1; 
  result = (mk::nettest::TelegramNettest *)new SwigDirector_NettestTelegram(jenv,arg1);
  *(mk::nettest::TelegramNettest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1NettestTelegram(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::TelegramNettest *arg1 = (mk::nettest::TelegramNettest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::TelegramNettest **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestTelegram_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mk::nettest::TelegramNettest *arg1 = (mk::nettest::TelegramNettest *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::TelegramNettest **)&jarg1; 
  result = (bool)(arg1)->run();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestTelegram_1runSwigExplicitNettestTelegram(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mk::nettest::TelegramNettest *arg1 = (mk::nettest::TelegramNettest *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::TelegramNettest **)&jarg1; 
  result = (bool)(arg1)->mk::nettest::TelegramNettest::run();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestTelegram_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  mk::nettest::TelegramNettest *obj = *((mk::nettest::TelegramNettest **)&objarg);
  (void)jcls;
  SwigDirector_NettestTelegram *director = dynamic_cast<SwigDirector_NettestTelegram *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestTelegram_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mk::nettest::TelegramNettest *obj = *((mk::nettest::TelegramNettest **)&objarg);
  SwigDirector_NettestTelegram *director = dynamic_cast<SwigDirector_NettestTelegram *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsWebConnectivity_1name_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)mk::nettest::WebConnectivitySettings::name;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1SettingsWebConnectivity(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mk::nettest::WebConnectivitySettings *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mk::nettest::WebConnectivitySettings *)new mk::nettest::WebConnectivitySettings();
  *(mk::nettest::WebConnectivitySettings **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1SettingsWebConnectivity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::WebConnectivitySettings *arg1 = (mk::nettest::WebConnectivitySettings *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::WebConnectivitySettings **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1NettestWebConnectivity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mk::nettest::WebConnectivitySettings arg1 ;
  mk::nettest::WebConnectivitySettings *argp1 ;
  mk::nettest::WebConnectivityNettest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(mk::nettest::WebConnectivitySettings **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::WebConnectivitySettings");
    return 0;
  }
  arg1 = *argp1; 
  result = (mk::nettest::WebConnectivityNettest *)new SwigDirector_NettestWebConnectivity(jenv,arg1);
  *(mk::nettest::WebConnectivityNettest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1NettestWebConnectivity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::WebConnectivityNettest *arg1 = (mk::nettest::WebConnectivityNettest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::WebConnectivityNettest **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestWebConnectivity_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mk::nettest::WebConnectivityNettest *arg1 = (mk::nettest::WebConnectivityNettest *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::WebConnectivityNettest **)&jarg1; 
  result = (bool)(arg1)->run();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestWebConnectivity_1runSwigExplicitNettestWebConnectivity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mk::nettest::WebConnectivityNettest *arg1 = (mk::nettest::WebConnectivityNettest *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::WebConnectivityNettest **)&jarg1; 
  result = (bool)(arg1)->mk::nettest::WebConnectivityNettest::run();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestWebConnectivity_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  mk::nettest::WebConnectivityNettest *obj = *((mk::nettest::WebConnectivityNettest **)&objarg);
  (void)jcls;
  SwigDirector_NettestWebConnectivity *director = dynamic_cast<SwigDirector_NettestWebConnectivity *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestWebConnectivity_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mk::nettest::WebConnectivityNettest *obj = *((mk::nettest::WebConnectivityNettest **)&objarg);
  SwigDirector_NettestWebConnectivity *director = dynamic_cast<SwigDirector_NettestWebConnectivity *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jstring JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsWhatsapp_1name_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)mk::nettest::WhatsappSettings::name;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsWhatsapp_1allEndpoints_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  mk::nettest::WhatsappSettings *arg1 = (mk::nettest::WhatsappSettings *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::WhatsappSettings **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->all_endpoints = arg2;
}


SWIGEXPORT jboolean JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsWhatsapp_1allEndpoints_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mk::nettest::WhatsappSettings *arg1 = (mk::nettest::WhatsappSettings *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::WhatsappSettings **)&jarg1; 
  result = (bool) ((arg1)->all_endpoints);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1SettingsWhatsapp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mk::nettest::WhatsappSettings *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mk::nettest::WhatsappSettings *)new mk::nettest::WhatsappSettings();
  *(mk::nettest::WhatsappSettings **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1SettingsWhatsapp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::WhatsappSettings *arg1 = (mk::nettest::WhatsappSettings *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::WhatsappSettings **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_new_1NettestWhatsapp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mk::nettest::WhatsappSettings arg1 ;
  mk::nettest::WhatsappSettings *argp1 ;
  mk::nettest::WhatsappNettest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(mk::nettest::WhatsappSettings **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mk::nettest::WhatsappSettings");
    return 0;
  }
  arg1 = *argp1; 
  result = (mk::nettest::WhatsappNettest *)new SwigDirector_NettestWhatsapp(jenv,arg1);
  *(mk::nettest::WhatsappNettest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_delete_1NettestWhatsapp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mk::nettest::WhatsappNettest *arg1 = (mk::nettest::WhatsappNettest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mk::nettest::WhatsappNettest **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestWhatsapp_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mk::nettest::WhatsappNettest *arg1 = (mk::nettest::WhatsappNettest *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::WhatsappNettest **)&jarg1; 
  result = (bool)(arg1)->run();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestWhatsapp_1runSwigExplicitNettestWhatsapp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mk::nettest::WhatsappNettest *arg1 = (mk::nettest::WhatsappNettest *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mk::nettest::WhatsappNettest **)&jarg1; 
  result = (bool)(arg1)->mk::nettest::WhatsappNettest::run();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestWhatsapp_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  mk::nettest::WhatsappNettest *obj = *((mk::nettest::WhatsappNettest **)&objarg);
  (void)jcls;
  SwigDirector_NettestWhatsapp *director = dynamic_cast<SwigDirector_NettestWhatsapp *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestWhatsapp_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mk::nettest::WhatsappNettest *obj = *((mk::nettest::WhatsappNettest **)&objarg);
  SwigDirector_NettestWhatsapp *director = dynamic_cast<SwigDirector_NettestWhatsapp *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsBaseNeedsInput_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(mk::nettest::common::Settings **)&baseptr = *(mk::nettest::common::NeedsInputSettings **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBasePerformance_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(mk::nettest::common::Nettest **)&baseptr = *(mk::nettest::common::PerformanceNettest **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestBaseWebsites_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(mk::nettest::common::Nettest **)&baseptr = *(mk::nettest::common::WebsitesNettest **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsCaptivePortal_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(mk::nettest::common::Settings **)&baseptr = *(mk::nettest::CaptivePortalSettings **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestCaptivePortal_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(mk::nettest::common::Nettest **)&baseptr = *(mk::nettest::CaptivePortalNettest **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsDash_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(mk::nettest::common::Settings **)&baseptr = *(mk::nettest::DashSettings **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestDash_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(mk::nettest::common::PerformanceNettest **)&baseptr = *(mk::nettest::DashNettest **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsDnsInjection_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(mk::nettest::common::NeedsInputSettings **)&baseptr = *(mk::nettest::DnsInjectionSettings **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestDnsInjection_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(mk::nettest::common::Nettest **)&baseptr = *(mk::nettest::DnsInjectionNettest **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsFacebookMessenger_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(mk::nettest::common::Settings **)&baseptr = *(mk::nettest::FacebookMessengerSettings **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestFacebookMessenger_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(mk::nettest::common::Nettest **)&baseptr = *(mk::nettest::FacebookMessengerNettest **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsHttpHeaderFieldManipulation_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(mk::nettest::common::Settings **)&baseptr = *(mk::nettest::HttpHeaderFieldManipulationSettings **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestHttpHeaderFieldManipulation_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(mk::nettest::common::Nettest **)&baseptr = *(mk::nettest::HttpHeaderFieldManipulationNettest **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsHttpInvalidRequestLine_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(mk::nettest::common::Settings **)&baseptr = *(mk::nettest::HttpInvalidRequestLineSettings **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestHttpInvalidRequestLine_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(mk::nettest::common::Nettest **)&baseptr = *(mk::nettest::HttpInvalidRequestLineNettest **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsMeekFrontedRequests_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(mk::nettest::common::NeedsInputSettings **)&baseptr = *(mk::nettest::MeekFrontedRequestsSettings **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestMeekFrontedRequests_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(mk::nettest::common::Nettest **)&baseptr = *(mk::nettest::MeekFrontedRequestsNettest **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsMultiNdt_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(mk::nettest::common::Settings **)&baseptr = *(mk::nettest::MultiNdtSettings **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestMultiNdt_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(mk::nettest::common::PerformanceNettest **)&baseptr = *(mk::nettest::MultiNdtNettest **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsNdt_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(mk::nettest::common::Settings **)&baseptr = *(mk::nettest::NdtSettings **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestNdt_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(mk::nettest::common::PerformanceNettest **)&baseptr = *(mk::nettest::NdtNettest **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsTcpConnect_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(mk::nettest::common::NeedsInputSettings **)&baseptr = *(mk::nettest::TcpConnectSettings **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestTcpConnect_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(mk::nettest::common::Nettest **)&baseptr = *(mk::nettest::TcpConnectNettest **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsTelegram_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(mk::nettest::common::Settings **)&baseptr = *(mk::nettest::TelegramSettings **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestTelegram_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(mk::nettest::common::Nettest **)&baseptr = *(mk::nettest::TelegramNettest **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsWebConnectivity_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(mk::nettest::common::NeedsInputSettings **)&baseptr = *(mk::nettest::WebConnectivitySettings **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestWebConnectivity_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(mk::nettest::common::WebsitesNettest **)&baseptr = *(mk::nettest::WebConnectivityNettest **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_SettingsWhatsapp_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(mk::nettest::common::Settings **)&baseptr = *(mk::nettest::WhatsappSettings **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_NettestWhatsapp_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(mk::nettest::common::Nettest **)&baseptr = *(mk::nettest::WhatsappNettest **)&jarg1;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_io_ooni_mk_nettest_swig_ApiJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[390] = {
    {
      "SwigDirector_NettestBase_run", "(Lio/ooni/mk/nettest/swig/NettestBase;)Z" 
    },
    {
      "SwigDirector_NettestBase_onFailureAsnLookup", "(Lio/ooni/mk/nettest/swig/NettestBase;J)V" 
    },
    {
      "SwigDirector_NettestBase_onFailureCcLookup", "(Lio/ooni/mk/nettest/swig/NettestBase;J)V" 
    },
    {
      "SwigDirector_NettestBase_onFailureIpLookup", "(Lio/ooni/mk/nettest/swig/NettestBase;J)V" 
    },
    {
      "SwigDirector_NettestBase_onFailureMeasurement", "(Lio/ooni/mk/nettest/swig/NettestBase;J)V" 
    },
    {
      "SwigDirector_NettestBase_onFailureMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/NettestBase;J)V" 
    },
    {
      "SwigDirector_NettestBase_onFailureReportCreate", "(Lio/ooni/mk/nettest/swig/NettestBase;J)V" 
    },
    {
      "SwigDirector_NettestBase_onFailureReportClose", "(Lio/ooni/mk/nettest/swig/NettestBase;J)V" 
    },
    {
      "SwigDirector_NettestBase_onFailureResolverLookup", "(Lio/ooni/mk/nettest/swig/NettestBase;J)V" 
    },
    {
      "SwigDirector_NettestBase_onFailureStartup", "(Lio/ooni/mk/nettest/swig/NettestBase;J)V" 
    },
    {
      "SwigDirector_NettestBase_onLog", "(Lio/ooni/mk/nettest/swig/NettestBase;J)V" 
    },
    {
      "SwigDirector_NettestBase_onMeasurement", "(Lio/ooni/mk/nettest/swig/NettestBase;J)V" 
    },
    {
      "SwigDirector_NettestBase_onStatusEnd", "(Lio/ooni/mk/nettest/swig/NettestBase;J)V" 
    },
    {
      "SwigDirector_NettestBase_onStatusGeoipLookup", "(Lio/ooni/mk/nettest/swig/NettestBase;J)V" 
    },
    {
      "SwigDirector_NettestBase_onStatusProgress", "(Lio/ooni/mk/nettest/swig/NettestBase;J)V" 
    },
    {
      "SwigDirector_NettestBase_onStatusQueued", "(Lio/ooni/mk/nettest/swig/NettestBase;J)V" 
    },
    {
      "SwigDirector_NettestBase_onStatusMeasurementStart", "(Lio/ooni/mk/nettest/swig/NettestBase;J)V" 
    },
    {
      "SwigDirector_NettestBase_onStatusMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/NettestBase;J)V" 
    },
    {
      "SwigDirector_NettestBase_onStatusMeasurementDone", "(Lio/ooni/mk/nettest/swig/NettestBase;J)V" 
    },
    {
      "SwigDirector_NettestBase_onStatusReportClose", "(Lio/ooni/mk/nettest/swig/NettestBase;J)V" 
    },
    {
      "SwigDirector_NettestBase_onStatusReportCreate", "(Lio/ooni/mk/nettest/swig/NettestBase;J)V" 
    },
    {
      "SwigDirector_NettestBase_onStatusResolverLookup", "(Lio/ooni/mk/nettest/swig/NettestBase;J)V" 
    },
    {
      "SwigDirector_NettestBase_onStatusStarted", "(Lio/ooni/mk/nettest/swig/NettestBase;J)V" 
    },
    {
      "SwigDirector_NettestBase_onTaskTerminated", "(Lio/ooni/mk/nettest/swig/NettestBase;J)V" 
    },
    {
      "SwigDirector_NettestBasePerformance_run", "(Lio/ooni/mk/nettest/swig/NettestBasePerformance;)Z" 
    },
    {
      "SwigDirector_NettestBasePerformance_onFailureAsnLookup", "(Lio/ooni/mk/nettest/swig/NettestBasePerformance;J)V" 
    },
    {
      "SwigDirector_NettestBasePerformance_onFailureCcLookup", "(Lio/ooni/mk/nettest/swig/NettestBasePerformance;J)V" 
    },
    {
      "SwigDirector_NettestBasePerformance_onFailureIpLookup", "(Lio/ooni/mk/nettest/swig/NettestBasePerformance;J)V" 
    },
    {
      "SwigDirector_NettestBasePerformance_onFailureMeasurement", "(Lio/ooni/mk/nettest/swig/NettestBasePerformance;J)V" 
    },
    {
      "SwigDirector_NettestBasePerformance_onFailureMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/NettestBasePerformance;J)V" 
    },
    {
      "SwigDirector_NettestBasePerformance_onFailureReportCreate", "(Lio/ooni/mk/nettest/swig/NettestBasePerformance;J)V" 
    },
    {
      "SwigDirector_NettestBasePerformance_onFailureReportClose", "(Lio/ooni/mk/nettest/swig/NettestBasePerformance;J)V" 
    },
    {
      "SwigDirector_NettestBasePerformance_onFailureResolverLookup", "(Lio/ooni/mk/nettest/swig/NettestBasePerformance;J)V" 
    },
    {
      "SwigDirector_NettestBasePerformance_onFailureStartup", "(Lio/ooni/mk/nettest/swig/NettestBasePerformance;J)V" 
    },
    {
      "SwigDirector_NettestBasePerformance_onLog", "(Lio/ooni/mk/nettest/swig/NettestBasePerformance;J)V" 
    },
    {
      "SwigDirector_NettestBasePerformance_onMeasurement", "(Lio/ooni/mk/nettest/swig/NettestBasePerformance;J)V" 
    },
    {
      "SwigDirector_NettestBasePerformance_onStatusEnd", "(Lio/ooni/mk/nettest/swig/NettestBasePerformance;J)V" 
    },
    {
      "SwigDirector_NettestBasePerformance_onStatusGeoipLookup", "(Lio/ooni/mk/nettest/swig/NettestBasePerformance;J)V" 
    },
    {
      "SwigDirector_NettestBasePerformance_onStatusProgress", "(Lio/ooni/mk/nettest/swig/NettestBasePerformance;J)V" 
    },
    {
      "SwigDirector_NettestBasePerformance_onStatusQueued", "(Lio/ooni/mk/nettest/swig/NettestBasePerformance;J)V" 
    },
    {
      "SwigDirector_NettestBasePerformance_onStatusMeasurementStart", "(Lio/ooni/mk/nettest/swig/NettestBasePerformance;J)V" 
    },
    {
      "SwigDirector_NettestBasePerformance_onStatusMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/NettestBasePerformance;J)V" 
    },
    {
      "SwigDirector_NettestBasePerformance_onStatusMeasurementDone", "(Lio/ooni/mk/nettest/swig/NettestBasePerformance;J)V" 
    },
    {
      "SwigDirector_NettestBasePerformance_onStatusReportClose", "(Lio/ooni/mk/nettest/swig/NettestBasePerformance;J)V" 
    },
    {
      "SwigDirector_NettestBasePerformance_onStatusReportCreate", "(Lio/ooni/mk/nettest/swig/NettestBasePerformance;J)V" 
    },
    {
      "SwigDirector_NettestBasePerformance_onStatusResolverLookup", "(Lio/ooni/mk/nettest/swig/NettestBasePerformance;J)V" 
    },
    {
      "SwigDirector_NettestBasePerformance_onStatusStarted", "(Lio/ooni/mk/nettest/swig/NettestBasePerformance;J)V" 
    },
    {
      "SwigDirector_NettestBasePerformance_onTaskTerminated", "(Lio/ooni/mk/nettest/swig/NettestBasePerformance;J)V" 
    },
    {
      "SwigDirector_NettestBasePerformance_onStatusUpdatePerformance", "(Lio/ooni/mk/nettest/swig/NettestBasePerformance;J)V" 
    },
    {
      "SwigDirector_NettestBaseWebsites_run", "(Lio/ooni/mk/nettest/swig/NettestBaseWebsites;)Z" 
    },
    {
      "SwigDirector_NettestBaseWebsites_onFailureAsnLookup", "(Lio/ooni/mk/nettest/swig/NettestBaseWebsites;J)V" 
    },
    {
      "SwigDirector_NettestBaseWebsites_onFailureCcLookup", "(Lio/ooni/mk/nettest/swig/NettestBaseWebsites;J)V" 
    },
    {
      "SwigDirector_NettestBaseWebsites_onFailureIpLookup", "(Lio/ooni/mk/nettest/swig/NettestBaseWebsites;J)V" 
    },
    {
      "SwigDirector_NettestBaseWebsites_onFailureMeasurement", "(Lio/ooni/mk/nettest/swig/NettestBaseWebsites;J)V" 
    },
    {
      "SwigDirector_NettestBaseWebsites_onFailureMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/NettestBaseWebsites;J)V" 
    },
    {
      "SwigDirector_NettestBaseWebsites_onFailureReportCreate", "(Lio/ooni/mk/nettest/swig/NettestBaseWebsites;J)V" 
    },
    {
      "SwigDirector_NettestBaseWebsites_onFailureReportClose", "(Lio/ooni/mk/nettest/swig/NettestBaseWebsites;J)V" 
    },
    {
      "SwigDirector_NettestBaseWebsites_onFailureResolverLookup", "(Lio/ooni/mk/nettest/swig/NettestBaseWebsites;J)V" 
    },
    {
      "SwigDirector_NettestBaseWebsites_onFailureStartup", "(Lio/ooni/mk/nettest/swig/NettestBaseWebsites;J)V" 
    },
    {
      "SwigDirector_NettestBaseWebsites_onLog", "(Lio/ooni/mk/nettest/swig/NettestBaseWebsites;J)V" 
    },
    {
      "SwigDirector_NettestBaseWebsites_onMeasurement", "(Lio/ooni/mk/nettest/swig/NettestBaseWebsites;J)V" 
    },
    {
      "SwigDirector_NettestBaseWebsites_onStatusEnd", "(Lio/ooni/mk/nettest/swig/NettestBaseWebsites;J)V" 
    },
    {
      "SwigDirector_NettestBaseWebsites_onStatusGeoipLookup", "(Lio/ooni/mk/nettest/swig/NettestBaseWebsites;J)V" 
    },
    {
      "SwigDirector_NettestBaseWebsites_onStatusProgress", "(Lio/ooni/mk/nettest/swig/NettestBaseWebsites;J)V" 
    },
    {
      "SwigDirector_NettestBaseWebsites_onStatusQueued", "(Lio/ooni/mk/nettest/swig/NettestBaseWebsites;J)V" 
    },
    {
      "SwigDirector_NettestBaseWebsites_onStatusMeasurementStart", "(Lio/ooni/mk/nettest/swig/NettestBaseWebsites;J)V" 
    },
    {
      "SwigDirector_NettestBaseWebsites_onStatusMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/NettestBaseWebsites;J)V" 
    },
    {
      "SwigDirector_NettestBaseWebsites_onStatusMeasurementDone", "(Lio/ooni/mk/nettest/swig/NettestBaseWebsites;J)V" 
    },
    {
      "SwigDirector_NettestBaseWebsites_onStatusReportClose", "(Lio/ooni/mk/nettest/swig/NettestBaseWebsites;J)V" 
    },
    {
      "SwigDirector_NettestBaseWebsites_onStatusReportCreate", "(Lio/ooni/mk/nettest/swig/NettestBaseWebsites;J)V" 
    },
    {
      "SwigDirector_NettestBaseWebsites_onStatusResolverLookup", "(Lio/ooni/mk/nettest/swig/NettestBaseWebsites;J)V" 
    },
    {
      "SwigDirector_NettestBaseWebsites_onStatusStarted", "(Lio/ooni/mk/nettest/swig/NettestBaseWebsites;J)V" 
    },
    {
      "SwigDirector_NettestBaseWebsites_onTaskTerminated", "(Lio/ooni/mk/nettest/swig/NettestBaseWebsites;J)V" 
    },
    {
      "SwigDirector_NettestBaseWebsites_onStatusUpdateWebsites", "(Lio/ooni/mk/nettest/swig/NettestBaseWebsites;J)V" 
    },
    {
      "SwigDirector_NettestCaptivePortal_run", "(Lio/ooni/mk/nettest/swig/NettestCaptivePortal;)Z" 
    },
    {
      "SwigDirector_NettestCaptivePortal_onFailureAsnLookup", "(Lio/ooni/mk/nettest/swig/NettestCaptivePortal;J)V" 
    },
    {
      "SwigDirector_NettestCaptivePortal_onFailureCcLookup", "(Lio/ooni/mk/nettest/swig/NettestCaptivePortal;J)V" 
    },
    {
      "SwigDirector_NettestCaptivePortal_onFailureIpLookup", "(Lio/ooni/mk/nettest/swig/NettestCaptivePortal;J)V" 
    },
    {
      "SwigDirector_NettestCaptivePortal_onFailureMeasurement", "(Lio/ooni/mk/nettest/swig/NettestCaptivePortal;J)V" 
    },
    {
      "SwigDirector_NettestCaptivePortal_onFailureMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/NettestCaptivePortal;J)V" 
    },
    {
      "SwigDirector_NettestCaptivePortal_onFailureReportCreate", "(Lio/ooni/mk/nettest/swig/NettestCaptivePortal;J)V" 
    },
    {
      "SwigDirector_NettestCaptivePortal_onFailureReportClose", "(Lio/ooni/mk/nettest/swig/NettestCaptivePortal;J)V" 
    },
    {
      "SwigDirector_NettestCaptivePortal_onFailureResolverLookup", "(Lio/ooni/mk/nettest/swig/NettestCaptivePortal;J)V" 
    },
    {
      "SwigDirector_NettestCaptivePortal_onFailureStartup", "(Lio/ooni/mk/nettest/swig/NettestCaptivePortal;J)V" 
    },
    {
      "SwigDirector_NettestCaptivePortal_onLog", "(Lio/ooni/mk/nettest/swig/NettestCaptivePortal;J)V" 
    },
    {
      "SwigDirector_NettestCaptivePortal_onMeasurement", "(Lio/ooni/mk/nettest/swig/NettestCaptivePortal;J)V" 
    },
    {
      "SwigDirector_NettestCaptivePortal_onStatusEnd", "(Lio/ooni/mk/nettest/swig/NettestCaptivePortal;J)V" 
    },
    {
      "SwigDirector_NettestCaptivePortal_onStatusGeoipLookup", "(Lio/ooni/mk/nettest/swig/NettestCaptivePortal;J)V" 
    },
    {
      "SwigDirector_NettestCaptivePortal_onStatusProgress", "(Lio/ooni/mk/nettest/swig/NettestCaptivePortal;J)V" 
    },
    {
      "SwigDirector_NettestCaptivePortal_onStatusQueued", "(Lio/ooni/mk/nettest/swig/NettestCaptivePortal;J)V" 
    },
    {
      "SwigDirector_NettestCaptivePortal_onStatusMeasurementStart", "(Lio/ooni/mk/nettest/swig/NettestCaptivePortal;J)V" 
    },
    {
      "SwigDirector_NettestCaptivePortal_onStatusMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/NettestCaptivePortal;J)V" 
    },
    {
      "SwigDirector_NettestCaptivePortal_onStatusMeasurementDone", "(Lio/ooni/mk/nettest/swig/NettestCaptivePortal;J)V" 
    },
    {
      "SwigDirector_NettestCaptivePortal_onStatusReportClose", "(Lio/ooni/mk/nettest/swig/NettestCaptivePortal;J)V" 
    },
    {
      "SwigDirector_NettestCaptivePortal_onStatusReportCreate", "(Lio/ooni/mk/nettest/swig/NettestCaptivePortal;J)V" 
    },
    {
      "SwigDirector_NettestCaptivePortal_onStatusResolverLookup", "(Lio/ooni/mk/nettest/swig/NettestCaptivePortal;J)V" 
    },
    {
      "SwigDirector_NettestCaptivePortal_onStatusStarted", "(Lio/ooni/mk/nettest/swig/NettestCaptivePortal;J)V" 
    },
    {
      "SwigDirector_NettestCaptivePortal_onTaskTerminated", "(Lio/ooni/mk/nettest/swig/NettestCaptivePortal;J)V" 
    },
    {
      "SwigDirector_NettestDash_run", "(Lio/ooni/mk/nettest/swig/NettestDash;)Z" 
    },
    {
      "SwigDirector_NettestDash_onFailureAsnLookup", "(Lio/ooni/mk/nettest/swig/NettestDash;J)V" 
    },
    {
      "SwigDirector_NettestDash_onFailureCcLookup", "(Lio/ooni/mk/nettest/swig/NettestDash;J)V" 
    },
    {
      "SwigDirector_NettestDash_onFailureIpLookup", "(Lio/ooni/mk/nettest/swig/NettestDash;J)V" 
    },
    {
      "SwigDirector_NettestDash_onFailureMeasurement", "(Lio/ooni/mk/nettest/swig/NettestDash;J)V" 
    },
    {
      "SwigDirector_NettestDash_onFailureMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/NettestDash;J)V" 
    },
    {
      "SwigDirector_NettestDash_onFailureReportCreate", "(Lio/ooni/mk/nettest/swig/NettestDash;J)V" 
    },
    {
      "SwigDirector_NettestDash_onFailureReportClose", "(Lio/ooni/mk/nettest/swig/NettestDash;J)V" 
    },
    {
      "SwigDirector_NettestDash_onFailureResolverLookup", "(Lio/ooni/mk/nettest/swig/NettestDash;J)V" 
    },
    {
      "SwigDirector_NettestDash_onFailureStartup", "(Lio/ooni/mk/nettest/swig/NettestDash;J)V" 
    },
    {
      "SwigDirector_NettestDash_onLog", "(Lio/ooni/mk/nettest/swig/NettestDash;J)V" 
    },
    {
      "SwigDirector_NettestDash_onMeasurement", "(Lio/ooni/mk/nettest/swig/NettestDash;J)V" 
    },
    {
      "SwigDirector_NettestDash_onStatusEnd", "(Lio/ooni/mk/nettest/swig/NettestDash;J)V" 
    },
    {
      "SwigDirector_NettestDash_onStatusGeoipLookup", "(Lio/ooni/mk/nettest/swig/NettestDash;J)V" 
    },
    {
      "SwigDirector_NettestDash_onStatusProgress", "(Lio/ooni/mk/nettest/swig/NettestDash;J)V" 
    },
    {
      "SwigDirector_NettestDash_onStatusQueued", "(Lio/ooni/mk/nettest/swig/NettestDash;J)V" 
    },
    {
      "SwigDirector_NettestDash_onStatusMeasurementStart", "(Lio/ooni/mk/nettest/swig/NettestDash;J)V" 
    },
    {
      "SwigDirector_NettestDash_onStatusMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/NettestDash;J)V" 
    },
    {
      "SwigDirector_NettestDash_onStatusMeasurementDone", "(Lio/ooni/mk/nettest/swig/NettestDash;J)V" 
    },
    {
      "SwigDirector_NettestDash_onStatusReportClose", "(Lio/ooni/mk/nettest/swig/NettestDash;J)V" 
    },
    {
      "SwigDirector_NettestDash_onStatusReportCreate", "(Lio/ooni/mk/nettest/swig/NettestDash;J)V" 
    },
    {
      "SwigDirector_NettestDash_onStatusResolverLookup", "(Lio/ooni/mk/nettest/swig/NettestDash;J)V" 
    },
    {
      "SwigDirector_NettestDash_onStatusStarted", "(Lio/ooni/mk/nettest/swig/NettestDash;J)V" 
    },
    {
      "SwigDirector_NettestDash_onTaskTerminated", "(Lio/ooni/mk/nettest/swig/NettestDash;J)V" 
    },
    {
      "SwigDirector_NettestDash_onStatusUpdatePerformance", "(Lio/ooni/mk/nettest/swig/NettestDash;J)V" 
    },
    {
      "SwigDirector_NettestDnsInjection_run", "(Lio/ooni/mk/nettest/swig/NettestDnsInjection;)Z" 
    },
    {
      "SwigDirector_NettestDnsInjection_onFailureAsnLookup", "(Lio/ooni/mk/nettest/swig/NettestDnsInjection;J)V" 
    },
    {
      "SwigDirector_NettestDnsInjection_onFailureCcLookup", "(Lio/ooni/mk/nettest/swig/NettestDnsInjection;J)V" 
    },
    {
      "SwigDirector_NettestDnsInjection_onFailureIpLookup", "(Lio/ooni/mk/nettest/swig/NettestDnsInjection;J)V" 
    },
    {
      "SwigDirector_NettestDnsInjection_onFailureMeasurement", "(Lio/ooni/mk/nettest/swig/NettestDnsInjection;J)V" 
    },
    {
      "SwigDirector_NettestDnsInjection_onFailureMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/NettestDnsInjection;J)V" 
    },
    {
      "SwigDirector_NettestDnsInjection_onFailureReportCreate", "(Lio/ooni/mk/nettest/swig/NettestDnsInjection;J)V" 
    },
    {
      "SwigDirector_NettestDnsInjection_onFailureReportClose", "(Lio/ooni/mk/nettest/swig/NettestDnsInjection;J)V" 
    },
    {
      "SwigDirector_NettestDnsInjection_onFailureResolverLookup", "(Lio/ooni/mk/nettest/swig/NettestDnsInjection;J)V" 
    },
    {
      "SwigDirector_NettestDnsInjection_onFailureStartup", "(Lio/ooni/mk/nettest/swig/NettestDnsInjection;J)V" 
    },
    {
      "SwigDirector_NettestDnsInjection_onLog", "(Lio/ooni/mk/nettest/swig/NettestDnsInjection;J)V" 
    },
    {
      "SwigDirector_NettestDnsInjection_onMeasurement", "(Lio/ooni/mk/nettest/swig/NettestDnsInjection;J)V" 
    },
    {
      "SwigDirector_NettestDnsInjection_onStatusEnd", "(Lio/ooni/mk/nettest/swig/NettestDnsInjection;J)V" 
    },
    {
      "SwigDirector_NettestDnsInjection_onStatusGeoipLookup", "(Lio/ooni/mk/nettest/swig/NettestDnsInjection;J)V" 
    },
    {
      "SwigDirector_NettestDnsInjection_onStatusProgress", "(Lio/ooni/mk/nettest/swig/NettestDnsInjection;J)V" 
    },
    {
      "SwigDirector_NettestDnsInjection_onStatusQueued", "(Lio/ooni/mk/nettest/swig/NettestDnsInjection;J)V" 
    },
    {
      "SwigDirector_NettestDnsInjection_onStatusMeasurementStart", "(Lio/ooni/mk/nettest/swig/NettestDnsInjection;J)V" 
    },
    {
      "SwigDirector_NettestDnsInjection_onStatusMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/NettestDnsInjection;J)V" 
    },
    {
      "SwigDirector_NettestDnsInjection_onStatusMeasurementDone", "(Lio/ooni/mk/nettest/swig/NettestDnsInjection;J)V" 
    },
    {
      "SwigDirector_NettestDnsInjection_onStatusReportClose", "(Lio/ooni/mk/nettest/swig/NettestDnsInjection;J)V" 
    },
    {
      "SwigDirector_NettestDnsInjection_onStatusReportCreate", "(Lio/ooni/mk/nettest/swig/NettestDnsInjection;J)V" 
    },
    {
      "SwigDirector_NettestDnsInjection_onStatusResolverLookup", "(Lio/ooni/mk/nettest/swig/NettestDnsInjection;J)V" 
    },
    {
      "SwigDirector_NettestDnsInjection_onStatusStarted", "(Lio/ooni/mk/nettest/swig/NettestDnsInjection;J)V" 
    },
    {
      "SwigDirector_NettestDnsInjection_onTaskTerminated", "(Lio/ooni/mk/nettest/swig/NettestDnsInjection;J)V" 
    },
    {
      "SwigDirector_NettestFacebookMessenger_run", "(Lio/ooni/mk/nettest/swig/NettestFacebookMessenger;)Z" 
    },
    {
      "SwigDirector_NettestFacebookMessenger_onFailureAsnLookup", "(Lio/ooni/mk/nettest/swig/NettestFacebookMessenger;J)V" 
    },
    {
      "SwigDirector_NettestFacebookMessenger_onFailureCcLookup", "(Lio/ooni/mk/nettest/swig/NettestFacebookMessenger;J)V" 
    },
    {
      "SwigDirector_NettestFacebookMessenger_onFailureIpLookup", "(Lio/ooni/mk/nettest/swig/NettestFacebookMessenger;J)V" 
    },
    {
      "SwigDirector_NettestFacebookMessenger_onFailureMeasurement", "(Lio/ooni/mk/nettest/swig/NettestFacebookMessenger;J)V" 
    },
    {
      "SwigDirector_NettestFacebookMessenger_onFailureMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/NettestFacebookMessenger;J)V" 
    },
    {
      "SwigDirector_NettestFacebookMessenger_onFailureReportCreate", "(Lio/ooni/mk/nettest/swig/NettestFacebookMessenger;J)V" 
    },
    {
      "SwigDirector_NettestFacebookMessenger_onFailureReportClose", "(Lio/ooni/mk/nettest/swig/NettestFacebookMessenger;J)V" 
    },
    {
      "SwigDirector_NettestFacebookMessenger_onFailureResolverLookup", "(Lio/ooni/mk/nettest/swig/NettestFacebookMessenger;J)V" 
    },
    {
      "SwigDirector_NettestFacebookMessenger_onFailureStartup", "(Lio/ooni/mk/nettest/swig/NettestFacebookMessenger;J)V" 
    },
    {
      "SwigDirector_NettestFacebookMessenger_onLog", "(Lio/ooni/mk/nettest/swig/NettestFacebookMessenger;J)V" 
    },
    {
      "SwigDirector_NettestFacebookMessenger_onMeasurement", "(Lio/ooni/mk/nettest/swig/NettestFacebookMessenger;J)V" 
    },
    {
      "SwigDirector_NettestFacebookMessenger_onStatusEnd", "(Lio/ooni/mk/nettest/swig/NettestFacebookMessenger;J)V" 
    },
    {
      "SwigDirector_NettestFacebookMessenger_onStatusGeoipLookup", "(Lio/ooni/mk/nettest/swig/NettestFacebookMessenger;J)V" 
    },
    {
      "SwigDirector_NettestFacebookMessenger_onStatusProgress", "(Lio/ooni/mk/nettest/swig/NettestFacebookMessenger;J)V" 
    },
    {
      "SwigDirector_NettestFacebookMessenger_onStatusQueued", "(Lio/ooni/mk/nettest/swig/NettestFacebookMessenger;J)V" 
    },
    {
      "SwigDirector_NettestFacebookMessenger_onStatusMeasurementStart", "(Lio/ooni/mk/nettest/swig/NettestFacebookMessenger;J)V" 
    },
    {
      "SwigDirector_NettestFacebookMessenger_onStatusMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/NettestFacebookMessenger;J)V" 
    },
    {
      "SwigDirector_NettestFacebookMessenger_onStatusMeasurementDone", "(Lio/ooni/mk/nettest/swig/NettestFacebookMessenger;J)V" 
    },
    {
      "SwigDirector_NettestFacebookMessenger_onStatusReportClose", "(Lio/ooni/mk/nettest/swig/NettestFacebookMessenger;J)V" 
    },
    {
      "SwigDirector_NettestFacebookMessenger_onStatusReportCreate", "(Lio/ooni/mk/nettest/swig/NettestFacebookMessenger;J)V" 
    },
    {
      "SwigDirector_NettestFacebookMessenger_onStatusResolverLookup", "(Lio/ooni/mk/nettest/swig/NettestFacebookMessenger;J)V" 
    },
    {
      "SwigDirector_NettestFacebookMessenger_onStatusStarted", "(Lio/ooni/mk/nettest/swig/NettestFacebookMessenger;J)V" 
    },
    {
      "SwigDirector_NettestFacebookMessenger_onTaskTerminated", "(Lio/ooni/mk/nettest/swig/NettestFacebookMessenger;J)V" 
    },
    {
      "SwigDirector_NettestHttpHeaderFieldManipulation_run", "(Lio/ooni/mk/nettest/swig/NettestHttpHeaderFieldManipulation;)Z" 
    },
    {
      "SwigDirector_NettestHttpHeaderFieldManipulation_onFailureAsnLookup", "(Lio/ooni/mk/nettest/swig/NettestHttpHeaderFieldManipulation;J)V" 
    },
    {
      "SwigDirector_NettestHttpHeaderFieldManipulation_onFailureCcLookup", "(Lio/ooni/mk/nettest/swig/NettestHttpHeaderFieldManipulation;J)V" 
    },
    {
      "SwigDirector_NettestHttpHeaderFieldManipulation_onFailureIpLookup", "(Lio/ooni/mk/nettest/swig/NettestHttpHeaderFieldManipulation;J)V" 
    },
    {
      "SwigDirector_NettestHttpHeaderFieldManipulation_onFailureMeasurement", "(Lio/ooni/mk/nettest/swig/NettestHttpHeaderFieldManipulation;J)V" 
    },
    {
      "SwigDirector_NettestHttpHeaderFieldManipulation_onFailureMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/NettestHttpHeaderFieldManipulation;J)V" 
    },
    {
      "SwigDirector_NettestHttpHeaderFieldManipulation_onFailureReportCreate", "(Lio/ooni/mk/nettest/swig/NettestHttpHeaderFieldManipulation;J)V" 
    },
    {
      "SwigDirector_NettestHttpHeaderFieldManipulation_onFailureReportClose", "(Lio/ooni/mk/nettest/swig/NettestHttpHeaderFieldManipulation;J)V" 
    },
    {
      "SwigDirector_NettestHttpHeaderFieldManipulation_onFailureResolverLookup", "(Lio/ooni/mk/nettest/swig/NettestHttpHeaderFieldManipulation;J)V" 
    },
    {
      "SwigDirector_NettestHttpHeaderFieldManipulation_onFailureStartup", "(Lio/ooni/mk/nettest/swig/NettestHttpHeaderFieldManipulation;J)V" 
    },
    {
      "SwigDirector_NettestHttpHeaderFieldManipulation_onLog", "(Lio/ooni/mk/nettest/swig/NettestHttpHeaderFieldManipulation;J)V" 
    },
    {
      "SwigDirector_NettestHttpHeaderFieldManipulation_onMeasurement", "(Lio/ooni/mk/nettest/swig/NettestHttpHeaderFieldManipulation;J)V" 
    },
    {
      "SwigDirector_NettestHttpHeaderFieldManipulation_onStatusEnd", "(Lio/ooni/mk/nettest/swig/NettestHttpHeaderFieldManipulation;J)V" 
    },
    {
      "SwigDirector_NettestHttpHeaderFieldManipulation_onStatusGeoipLookup", "(Lio/ooni/mk/nettest/swig/NettestHttpHeaderFieldManipulation;J)V" 
    },
    {
      "SwigDirector_NettestHttpHeaderFieldManipulation_onStatusProgress", "(Lio/ooni/mk/nettest/swig/NettestHttpHeaderFieldManipulation;J)V" 
    },
    {
      "SwigDirector_NettestHttpHeaderFieldManipulation_onStatusQueued", "(Lio/ooni/mk/nettest/swig/NettestHttpHeaderFieldManipulation;J)V" 
    },
    {
      "SwigDirector_NettestHttpHeaderFieldManipulation_onStatusMeasurementStart", "(Lio/ooni/mk/nettest/swig/NettestHttpHeaderFieldManipulation;J)V" 
    },
    {
      "SwigDirector_NettestHttpHeaderFieldManipulation_onStatusMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/NettestHttpHeaderFieldManipulation;J)V" 
    },
    {
      "SwigDirector_NettestHttpHeaderFieldManipulation_onStatusMeasurementDone", "(Lio/ooni/mk/nettest/swig/NettestHttpHeaderFieldManipulation;J)V" 
    },
    {
      "SwigDirector_NettestHttpHeaderFieldManipulation_onStatusReportClose", "(Lio/ooni/mk/nettest/swig/NettestHttpHeaderFieldManipulation;J)V" 
    },
    {
      "SwigDirector_NettestHttpHeaderFieldManipulation_onStatusReportCreate", "(Lio/ooni/mk/nettest/swig/NettestHttpHeaderFieldManipulation;J)V" 
    },
    {
      "SwigDirector_NettestHttpHeaderFieldManipulation_onStatusResolverLookup", "(Lio/ooni/mk/nettest/swig/NettestHttpHeaderFieldManipulation;J)V" 
    },
    {
      "SwigDirector_NettestHttpHeaderFieldManipulation_onStatusStarted", "(Lio/ooni/mk/nettest/swig/NettestHttpHeaderFieldManipulation;J)V" 
    },
    {
      "SwigDirector_NettestHttpHeaderFieldManipulation_onTaskTerminated", "(Lio/ooni/mk/nettest/swig/NettestHttpHeaderFieldManipulation;J)V" 
    },
    {
      "SwigDirector_NettestHttpInvalidRequestLine_run", "(Lio/ooni/mk/nettest/swig/NettestHttpInvalidRequestLine;)Z" 
    },
    {
      "SwigDirector_NettestHttpInvalidRequestLine_onFailureAsnLookup", "(Lio/ooni/mk/nettest/swig/NettestHttpInvalidRequestLine;J)V" 
    },
    {
      "SwigDirector_NettestHttpInvalidRequestLine_onFailureCcLookup", "(Lio/ooni/mk/nettest/swig/NettestHttpInvalidRequestLine;J)V" 
    },
    {
      "SwigDirector_NettestHttpInvalidRequestLine_onFailureIpLookup", "(Lio/ooni/mk/nettest/swig/NettestHttpInvalidRequestLine;J)V" 
    },
    {
      "SwigDirector_NettestHttpInvalidRequestLine_onFailureMeasurement", "(Lio/ooni/mk/nettest/swig/NettestHttpInvalidRequestLine;J)V" 
    },
    {
      "SwigDirector_NettestHttpInvalidRequestLine_onFailureMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/NettestHttpInvalidRequestLine;J)V" 
    },
    {
      "SwigDirector_NettestHttpInvalidRequestLine_onFailureReportCreate", "(Lio/ooni/mk/nettest/swig/NettestHttpInvalidRequestLine;J)V" 
    },
    {
      "SwigDirector_NettestHttpInvalidRequestLine_onFailureReportClose", "(Lio/ooni/mk/nettest/swig/NettestHttpInvalidRequestLine;J)V" 
    },
    {
      "SwigDirector_NettestHttpInvalidRequestLine_onFailureResolverLookup", "(Lio/ooni/mk/nettest/swig/NettestHttpInvalidRequestLine;J)V" 
    },
    {
      "SwigDirector_NettestHttpInvalidRequestLine_onFailureStartup", "(Lio/ooni/mk/nettest/swig/NettestHttpInvalidRequestLine;J)V" 
    },
    {
      "SwigDirector_NettestHttpInvalidRequestLine_onLog", "(Lio/ooni/mk/nettest/swig/NettestHttpInvalidRequestLine;J)V" 
    },
    {
      "SwigDirector_NettestHttpInvalidRequestLine_onMeasurement", "(Lio/ooni/mk/nettest/swig/NettestHttpInvalidRequestLine;J)V" 
    },
    {
      "SwigDirector_NettestHttpInvalidRequestLine_onStatusEnd", "(Lio/ooni/mk/nettest/swig/NettestHttpInvalidRequestLine;J)V" 
    },
    {
      "SwigDirector_NettestHttpInvalidRequestLine_onStatusGeoipLookup", "(Lio/ooni/mk/nettest/swig/NettestHttpInvalidRequestLine;J)V" 
    },
    {
      "SwigDirector_NettestHttpInvalidRequestLine_onStatusProgress", "(Lio/ooni/mk/nettest/swig/NettestHttpInvalidRequestLine;J)V" 
    },
    {
      "SwigDirector_NettestHttpInvalidRequestLine_onStatusQueued", "(Lio/ooni/mk/nettest/swig/NettestHttpInvalidRequestLine;J)V" 
    },
    {
      "SwigDirector_NettestHttpInvalidRequestLine_onStatusMeasurementStart", "(Lio/ooni/mk/nettest/swig/NettestHttpInvalidRequestLine;J)V" 
    },
    {
      "SwigDirector_NettestHttpInvalidRequestLine_onStatusMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/NettestHttpInvalidRequestLine;J)V" 
    },
    {
      "SwigDirector_NettestHttpInvalidRequestLine_onStatusMeasurementDone", "(Lio/ooni/mk/nettest/swig/NettestHttpInvalidRequestLine;J)V" 
    },
    {
      "SwigDirector_NettestHttpInvalidRequestLine_onStatusReportClose", "(Lio/ooni/mk/nettest/swig/NettestHttpInvalidRequestLine;J)V" 
    },
    {
      "SwigDirector_NettestHttpInvalidRequestLine_onStatusReportCreate", "(Lio/ooni/mk/nettest/swig/NettestHttpInvalidRequestLine;J)V" 
    },
    {
      "SwigDirector_NettestHttpInvalidRequestLine_onStatusResolverLookup", "(Lio/ooni/mk/nettest/swig/NettestHttpInvalidRequestLine;J)V" 
    },
    {
      "SwigDirector_NettestHttpInvalidRequestLine_onStatusStarted", "(Lio/ooni/mk/nettest/swig/NettestHttpInvalidRequestLine;J)V" 
    },
    {
      "SwigDirector_NettestHttpInvalidRequestLine_onTaskTerminated", "(Lio/ooni/mk/nettest/swig/NettestHttpInvalidRequestLine;J)V" 
    },
    {
      "SwigDirector_NettestMeekFrontedRequests_run", "(Lio/ooni/mk/nettest/swig/NettestMeekFrontedRequests;)Z" 
    },
    {
      "SwigDirector_NettestMeekFrontedRequests_onFailureAsnLookup", "(Lio/ooni/mk/nettest/swig/NettestMeekFrontedRequests;J)V" 
    },
    {
      "SwigDirector_NettestMeekFrontedRequests_onFailureCcLookup", "(Lio/ooni/mk/nettest/swig/NettestMeekFrontedRequests;J)V" 
    },
    {
      "SwigDirector_NettestMeekFrontedRequests_onFailureIpLookup", "(Lio/ooni/mk/nettest/swig/NettestMeekFrontedRequests;J)V" 
    },
    {
      "SwigDirector_NettestMeekFrontedRequests_onFailureMeasurement", "(Lio/ooni/mk/nettest/swig/NettestMeekFrontedRequests;J)V" 
    },
    {
      "SwigDirector_NettestMeekFrontedRequests_onFailureMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/NettestMeekFrontedRequests;J)V" 
    },
    {
      "SwigDirector_NettestMeekFrontedRequests_onFailureReportCreate", "(Lio/ooni/mk/nettest/swig/NettestMeekFrontedRequests;J)V" 
    },
    {
      "SwigDirector_NettestMeekFrontedRequests_onFailureReportClose", "(Lio/ooni/mk/nettest/swig/NettestMeekFrontedRequests;J)V" 
    },
    {
      "SwigDirector_NettestMeekFrontedRequests_onFailureResolverLookup", "(Lio/ooni/mk/nettest/swig/NettestMeekFrontedRequests;J)V" 
    },
    {
      "SwigDirector_NettestMeekFrontedRequests_onFailureStartup", "(Lio/ooni/mk/nettest/swig/NettestMeekFrontedRequests;J)V" 
    },
    {
      "SwigDirector_NettestMeekFrontedRequests_onLog", "(Lio/ooni/mk/nettest/swig/NettestMeekFrontedRequests;J)V" 
    },
    {
      "SwigDirector_NettestMeekFrontedRequests_onMeasurement", "(Lio/ooni/mk/nettest/swig/NettestMeekFrontedRequests;J)V" 
    },
    {
      "SwigDirector_NettestMeekFrontedRequests_onStatusEnd", "(Lio/ooni/mk/nettest/swig/NettestMeekFrontedRequests;J)V" 
    },
    {
      "SwigDirector_NettestMeekFrontedRequests_onStatusGeoipLookup", "(Lio/ooni/mk/nettest/swig/NettestMeekFrontedRequests;J)V" 
    },
    {
      "SwigDirector_NettestMeekFrontedRequests_onStatusProgress", "(Lio/ooni/mk/nettest/swig/NettestMeekFrontedRequests;J)V" 
    },
    {
      "SwigDirector_NettestMeekFrontedRequests_onStatusQueued", "(Lio/ooni/mk/nettest/swig/NettestMeekFrontedRequests;J)V" 
    },
    {
      "SwigDirector_NettestMeekFrontedRequests_onStatusMeasurementStart", "(Lio/ooni/mk/nettest/swig/NettestMeekFrontedRequests;J)V" 
    },
    {
      "SwigDirector_NettestMeekFrontedRequests_onStatusMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/NettestMeekFrontedRequests;J)V" 
    },
    {
      "SwigDirector_NettestMeekFrontedRequests_onStatusMeasurementDone", "(Lio/ooni/mk/nettest/swig/NettestMeekFrontedRequests;J)V" 
    },
    {
      "SwigDirector_NettestMeekFrontedRequests_onStatusReportClose", "(Lio/ooni/mk/nettest/swig/NettestMeekFrontedRequests;J)V" 
    },
    {
      "SwigDirector_NettestMeekFrontedRequests_onStatusReportCreate", "(Lio/ooni/mk/nettest/swig/NettestMeekFrontedRequests;J)V" 
    },
    {
      "SwigDirector_NettestMeekFrontedRequests_onStatusResolverLookup", "(Lio/ooni/mk/nettest/swig/NettestMeekFrontedRequests;J)V" 
    },
    {
      "SwigDirector_NettestMeekFrontedRequests_onStatusStarted", "(Lio/ooni/mk/nettest/swig/NettestMeekFrontedRequests;J)V" 
    },
    {
      "SwigDirector_NettestMeekFrontedRequests_onTaskTerminated", "(Lio/ooni/mk/nettest/swig/NettestMeekFrontedRequests;J)V" 
    },
    {
      "SwigDirector_NettestMultiNdt_run", "(Lio/ooni/mk/nettest/swig/NettestMultiNdt;)Z" 
    },
    {
      "SwigDirector_NettestMultiNdt_onFailureAsnLookup", "(Lio/ooni/mk/nettest/swig/NettestMultiNdt;J)V" 
    },
    {
      "SwigDirector_NettestMultiNdt_onFailureCcLookup", "(Lio/ooni/mk/nettest/swig/NettestMultiNdt;J)V" 
    },
    {
      "SwigDirector_NettestMultiNdt_onFailureIpLookup", "(Lio/ooni/mk/nettest/swig/NettestMultiNdt;J)V" 
    },
    {
      "SwigDirector_NettestMultiNdt_onFailureMeasurement", "(Lio/ooni/mk/nettest/swig/NettestMultiNdt;J)V" 
    },
    {
      "SwigDirector_NettestMultiNdt_onFailureMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/NettestMultiNdt;J)V" 
    },
    {
      "SwigDirector_NettestMultiNdt_onFailureReportCreate", "(Lio/ooni/mk/nettest/swig/NettestMultiNdt;J)V" 
    },
    {
      "SwigDirector_NettestMultiNdt_onFailureReportClose", "(Lio/ooni/mk/nettest/swig/NettestMultiNdt;J)V" 
    },
    {
      "SwigDirector_NettestMultiNdt_onFailureResolverLookup", "(Lio/ooni/mk/nettest/swig/NettestMultiNdt;J)V" 
    },
    {
      "SwigDirector_NettestMultiNdt_onFailureStartup", "(Lio/ooni/mk/nettest/swig/NettestMultiNdt;J)V" 
    },
    {
      "SwigDirector_NettestMultiNdt_onLog", "(Lio/ooni/mk/nettest/swig/NettestMultiNdt;J)V" 
    },
    {
      "SwigDirector_NettestMultiNdt_onMeasurement", "(Lio/ooni/mk/nettest/swig/NettestMultiNdt;J)V" 
    },
    {
      "SwigDirector_NettestMultiNdt_onStatusEnd", "(Lio/ooni/mk/nettest/swig/NettestMultiNdt;J)V" 
    },
    {
      "SwigDirector_NettestMultiNdt_onStatusGeoipLookup", "(Lio/ooni/mk/nettest/swig/NettestMultiNdt;J)V" 
    },
    {
      "SwigDirector_NettestMultiNdt_onStatusProgress", "(Lio/ooni/mk/nettest/swig/NettestMultiNdt;J)V" 
    },
    {
      "SwigDirector_NettestMultiNdt_onStatusQueued", "(Lio/ooni/mk/nettest/swig/NettestMultiNdt;J)V" 
    },
    {
      "SwigDirector_NettestMultiNdt_onStatusMeasurementStart", "(Lio/ooni/mk/nettest/swig/NettestMultiNdt;J)V" 
    },
    {
      "SwigDirector_NettestMultiNdt_onStatusMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/NettestMultiNdt;J)V" 
    },
    {
      "SwigDirector_NettestMultiNdt_onStatusMeasurementDone", "(Lio/ooni/mk/nettest/swig/NettestMultiNdt;J)V" 
    },
    {
      "SwigDirector_NettestMultiNdt_onStatusReportClose", "(Lio/ooni/mk/nettest/swig/NettestMultiNdt;J)V" 
    },
    {
      "SwigDirector_NettestMultiNdt_onStatusReportCreate", "(Lio/ooni/mk/nettest/swig/NettestMultiNdt;J)V" 
    },
    {
      "SwigDirector_NettestMultiNdt_onStatusResolverLookup", "(Lio/ooni/mk/nettest/swig/NettestMultiNdt;J)V" 
    },
    {
      "SwigDirector_NettestMultiNdt_onStatusStarted", "(Lio/ooni/mk/nettest/swig/NettestMultiNdt;J)V" 
    },
    {
      "SwigDirector_NettestMultiNdt_onTaskTerminated", "(Lio/ooni/mk/nettest/swig/NettestMultiNdt;J)V" 
    },
    {
      "SwigDirector_NettestMultiNdt_onStatusUpdatePerformance", "(Lio/ooni/mk/nettest/swig/NettestMultiNdt;J)V" 
    },
    {
      "SwigDirector_NettestNdt_run", "(Lio/ooni/mk/nettest/swig/NettestNdt;)Z" 
    },
    {
      "SwigDirector_NettestNdt_onFailureAsnLookup", "(Lio/ooni/mk/nettest/swig/NettestNdt;J)V" 
    },
    {
      "SwigDirector_NettestNdt_onFailureCcLookup", "(Lio/ooni/mk/nettest/swig/NettestNdt;J)V" 
    },
    {
      "SwigDirector_NettestNdt_onFailureIpLookup", "(Lio/ooni/mk/nettest/swig/NettestNdt;J)V" 
    },
    {
      "SwigDirector_NettestNdt_onFailureMeasurement", "(Lio/ooni/mk/nettest/swig/NettestNdt;J)V" 
    },
    {
      "SwigDirector_NettestNdt_onFailureMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/NettestNdt;J)V" 
    },
    {
      "SwigDirector_NettestNdt_onFailureReportCreate", "(Lio/ooni/mk/nettest/swig/NettestNdt;J)V" 
    },
    {
      "SwigDirector_NettestNdt_onFailureReportClose", "(Lio/ooni/mk/nettest/swig/NettestNdt;J)V" 
    },
    {
      "SwigDirector_NettestNdt_onFailureResolverLookup", "(Lio/ooni/mk/nettest/swig/NettestNdt;J)V" 
    },
    {
      "SwigDirector_NettestNdt_onFailureStartup", "(Lio/ooni/mk/nettest/swig/NettestNdt;J)V" 
    },
    {
      "SwigDirector_NettestNdt_onLog", "(Lio/ooni/mk/nettest/swig/NettestNdt;J)V" 
    },
    {
      "SwigDirector_NettestNdt_onMeasurement", "(Lio/ooni/mk/nettest/swig/NettestNdt;J)V" 
    },
    {
      "SwigDirector_NettestNdt_onStatusEnd", "(Lio/ooni/mk/nettest/swig/NettestNdt;J)V" 
    },
    {
      "SwigDirector_NettestNdt_onStatusGeoipLookup", "(Lio/ooni/mk/nettest/swig/NettestNdt;J)V" 
    },
    {
      "SwigDirector_NettestNdt_onStatusProgress", "(Lio/ooni/mk/nettest/swig/NettestNdt;J)V" 
    },
    {
      "SwigDirector_NettestNdt_onStatusQueued", "(Lio/ooni/mk/nettest/swig/NettestNdt;J)V" 
    },
    {
      "SwigDirector_NettestNdt_onStatusMeasurementStart", "(Lio/ooni/mk/nettest/swig/NettestNdt;J)V" 
    },
    {
      "SwigDirector_NettestNdt_onStatusMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/NettestNdt;J)V" 
    },
    {
      "SwigDirector_NettestNdt_onStatusMeasurementDone", "(Lio/ooni/mk/nettest/swig/NettestNdt;J)V" 
    },
    {
      "SwigDirector_NettestNdt_onStatusReportClose", "(Lio/ooni/mk/nettest/swig/NettestNdt;J)V" 
    },
    {
      "SwigDirector_NettestNdt_onStatusReportCreate", "(Lio/ooni/mk/nettest/swig/NettestNdt;J)V" 
    },
    {
      "SwigDirector_NettestNdt_onStatusResolverLookup", "(Lio/ooni/mk/nettest/swig/NettestNdt;J)V" 
    },
    {
      "SwigDirector_NettestNdt_onStatusStarted", "(Lio/ooni/mk/nettest/swig/NettestNdt;J)V" 
    },
    {
      "SwigDirector_NettestNdt_onTaskTerminated", "(Lio/ooni/mk/nettest/swig/NettestNdt;J)V" 
    },
    {
      "SwigDirector_NettestNdt_onStatusUpdatePerformance", "(Lio/ooni/mk/nettest/swig/NettestNdt;J)V" 
    },
    {
      "SwigDirector_NettestTcpConnect_run", "(Lio/ooni/mk/nettest/swig/NettestTcpConnect;)Z" 
    },
    {
      "SwigDirector_NettestTcpConnect_onFailureAsnLookup", "(Lio/ooni/mk/nettest/swig/NettestTcpConnect;J)V" 
    },
    {
      "SwigDirector_NettestTcpConnect_onFailureCcLookup", "(Lio/ooni/mk/nettest/swig/NettestTcpConnect;J)V" 
    },
    {
      "SwigDirector_NettestTcpConnect_onFailureIpLookup", "(Lio/ooni/mk/nettest/swig/NettestTcpConnect;J)V" 
    },
    {
      "SwigDirector_NettestTcpConnect_onFailureMeasurement", "(Lio/ooni/mk/nettest/swig/NettestTcpConnect;J)V" 
    },
    {
      "SwigDirector_NettestTcpConnect_onFailureMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/NettestTcpConnect;J)V" 
    },
    {
      "SwigDirector_NettestTcpConnect_onFailureReportCreate", "(Lio/ooni/mk/nettest/swig/NettestTcpConnect;J)V" 
    },
    {
      "SwigDirector_NettestTcpConnect_onFailureReportClose", "(Lio/ooni/mk/nettest/swig/NettestTcpConnect;J)V" 
    },
    {
      "SwigDirector_NettestTcpConnect_onFailureResolverLookup", "(Lio/ooni/mk/nettest/swig/NettestTcpConnect;J)V" 
    },
    {
      "SwigDirector_NettestTcpConnect_onFailureStartup", "(Lio/ooni/mk/nettest/swig/NettestTcpConnect;J)V" 
    },
    {
      "SwigDirector_NettestTcpConnect_onLog", "(Lio/ooni/mk/nettest/swig/NettestTcpConnect;J)V" 
    },
    {
      "SwigDirector_NettestTcpConnect_onMeasurement", "(Lio/ooni/mk/nettest/swig/NettestTcpConnect;J)V" 
    },
    {
      "SwigDirector_NettestTcpConnect_onStatusEnd", "(Lio/ooni/mk/nettest/swig/NettestTcpConnect;J)V" 
    },
    {
      "SwigDirector_NettestTcpConnect_onStatusGeoipLookup", "(Lio/ooni/mk/nettest/swig/NettestTcpConnect;J)V" 
    },
    {
      "SwigDirector_NettestTcpConnect_onStatusProgress", "(Lio/ooni/mk/nettest/swig/NettestTcpConnect;J)V" 
    },
    {
      "SwigDirector_NettestTcpConnect_onStatusQueued", "(Lio/ooni/mk/nettest/swig/NettestTcpConnect;J)V" 
    },
    {
      "SwigDirector_NettestTcpConnect_onStatusMeasurementStart", "(Lio/ooni/mk/nettest/swig/NettestTcpConnect;J)V" 
    },
    {
      "SwigDirector_NettestTcpConnect_onStatusMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/NettestTcpConnect;J)V" 
    },
    {
      "SwigDirector_NettestTcpConnect_onStatusMeasurementDone", "(Lio/ooni/mk/nettest/swig/NettestTcpConnect;J)V" 
    },
    {
      "SwigDirector_NettestTcpConnect_onStatusReportClose", "(Lio/ooni/mk/nettest/swig/NettestTcpConnect;J)V" 
    },
    {
      "SwigDirector_NettestTcpConnect_onStatusReportCreate", "(Lio/ooni/mk/nettest/swig/NettestTcpConnect;J)V" 
    },
    {
      "SwigDirector_NettestTcpConnect_onStatusResolverLookup", "(Lio/ooni/mk/nettest/swig/NettestTcpConnect;J)V" 
    },
    {
      "SwigDirector_NettestTcpConnect_onStatusStarted", "(Lio/ooni/mk/nettest/swig/NettestTcpConnect;J)V" 
    },
    {
      "SwigDirector_NettestTcpConnect_onTaskTerminated", "(Lio/ooni/mk/nettest/swig/NettestTcpConnect;J)V" 
    },
    {
      "SwigDirector_NettestTelegram_run", "(Lio/ooni/mk/nettest/swig/NettestTelegram;)Z" 
    },
    {
      "SwigDirector_NettestTelegram_onFailureAsnLookup", "(Lio/ooni/mk/nettest/swig/NettestTelegram;J)V" 
    },
    {
      "SwigDirector_NettestTelegram_onFailureCcLookup", "(Lio/ooni/mk/nettest/swig/NettestTelegram;J)V" 
    },
    {
      "SwigDirector_NettestTelegram_onFailureIpLookup", "(Lio/ooni/mk/nettest/swig/NettestTelegram;J)V" 
    },
    {
      "SwigDirector_NettestTelegram_onFailureMeasurement", "(Lio/ooni/mk/nettest/swig/NettestTelegram;J)V" 
    },
    {
      "SwigDirector_NettestTelegram_onFailureMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/NettestTelegram;J)V" 
    },
    {
      "SwigDirector_NettestTelegram_onFailureReportCreate", "(Lio/ooni/mk/nettest/swig/NettestTelegram;J)V" 
    },
    {
      "SwigDirector_NettestTelegram_onFailureReportClose", "(Lio/ooni/mk/nettest/swig/NettestTelegram;J)V" 
    },
    {
      "SwigDirector_NettestTelegram_onFailureResolverLookup", "(Lio/ooni/mk/nettest/swig/NettestTelegram;J)V" 
    },
    {
      "SwigDirector_NettestTelegram_onFailureStartup", "(Lio/ooni/mk/nettest/swig/NettestTelegram;J)V" 
    },
    {
      "SwigDirector_NettestTelegram_onLog", "(Lio/ooni/mk/nettest/swig/NettestTelegram;J)V" 
    },
    {
      "SwigDirector_NettestTelegram_onMeasurement", "(Lio/ooni/mk/nettest/swig/NettestTelegram;J)V" 
    },
    {
      "SwigDirector_NettestTelegram_onStatusEnd", "(Lio/ooni/mk/nettest/swig/NettestTelegram;J)V" 
    },
    {
      "SwigDirector_NettestTelegram_onStatusGeoipLookup", "(Lio/ooni/mk/nettest/swig/NettestTelegram;J)V" 
    },
    {
      "SwigDirector_NettestTelegram_onStatusProgress", "(Lio/ooni/mk/nettest/swig/NettestTelegram;J)V" 
    },
    {
      "SwigDirector_NettestTelegram_onStatusQueued", "(Lio/ooni/mk/nettest/swig/NettestTelegram;J)V" 
    },
    {
      "SwigDirector_NettestTelegram_onStatusMeasurementStart", "(Lio/ooni/mk/nettest/swig/NettestTelegram;J)V" 
    },
    {
      "SwigDirector_NettestTelegram_onStatusMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/NettestTelegram;J)V" 
    },
    {
      "SwigDirector_NettestTelegram_onStatusMeasurementDone", "(Lio/ooni/mk/nettest/swig/NettestTelegram;J)V" 
    },
    {
      "SwigDirector_NettestTelegram_onStatusReportClose", "(Lio/ooni/mk/nettest/swig/NettestTelegram;J)V" 
    },
    {
      "SwigDirector_NettestTelegram_onStatusReportCreate", "(Lio/ooni/mk/nettest/swig/NettestTelegram;J)V" 
    },
    {
      "SwigDirector_NettestTelegram_onStatusResolverLookup", "(Lio/ooni/mk/nettest/swig/NettestTelegram;J)V" 
    },
    {
      "SwigDirector_NettestTelegram_onStatusStarted", "(Lio/ooni/mk/nettest/swig/NettestTelegram;J)V" 
    },
    {
      "SwigDirector_NettestTelegram_onTaskTerminated", "(Lio/ooni/mk/nettest/swig/NettestTelegram;J)V" 
    },
    {
      "SwigDirector_NettestWebConnectivity_run", "(Lio/ooni/mk/nettest/swig/NettestWebConnectivity;)Z" 
    },
    {
      "SwigDirector_NettestWebConnectivity_onFailureAsnLookup", "(Lio/ooni/mk/nettest/swig/NettestWebConnectivity;J)V" 
    },
    {
      "SwigDirector_NettestWebConnectivity_onFailureCcLookup", "(Lio/ooni/mk/nettest/swig/NettestWebConnectivity;J)V" 
    },
    {
      "SwigDirector_NettestWebConnectivity_onFailureIpLookup", "(Lio/ooni/mk/nettest/swig/NettestWebConnectivity;J)V" 
    },
    {
      "SwigDirector_NettestWebConnectivity_onFailureMeasurement", "(Lio/ooni/mk/nettest/swig/NettestWebConnectivity;J)V" 
    },
    {
      "SwigDirector_NettestWebConnectivity_onFailureMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/NettestWebConnectivity;J)V" 
    },
    {
      "SwigDirector_NettestWebConnectivity_onFailureReportCreate", "(Lio/ooni/mk/nettest/swig/NettestWebConnectivity;J)V" 
    },
    {
      "SwigDirector_NettestWebConnectivity_onFailureReportClose", "(Lio/ooni/mk/nettest/swig/NettestWebConnectivity;J)V" 
    },
    {
      "SwigDirector_NettestWebConnectivity_onFailureResolverLookup", "(Lio/ooni/mk/nettest/swig/NettestWebConnectivity;J)V" 
    },
    {
      "SwigDirector_NettestWebConnectivity_onFailureStartup", "(Lio/ooni/mk/nettest/swig/NettestWebConnectivity;J)V" 
    },
    {
      "SwigDirector_NettestWebConnectivity_onLog", "(Lio/ooni/mk/nettest/swig/NettestWebConnectivity;J)V" 
    },
    {
      "SwigDirector_NettestWebConnectivity_onMeasurement", "(Lio/ooni/mk/nettest/swig/NettestWebConnectivity;J)V" 
    },
    {
      "SwigDirector_NettestWebConnectivity_onStatusEnd", "(Lio/ooni/mk/nettest/swig/NettestWebConnectivity;J)V" 
    },
    {
      "SwigDirector_NettestWebConnectivity_onStatusGeoipLookup", "(Lio/ooni/mk/nettest/swig/NettestWebConnectivity;J)V" 
    },
    {
      "SwigDirector_NettestWebConnectivity_onStatusProgress", "(Lio/ooni/mk/nettest/swig/NettestWebConnectivity;J)V" 
    },
    {
      "SwigDirector_NettestWebConnectivity_onStatusQueued", "(Lio/ooni/mk/nettest/swig/NettestWebConnectivity;J)V" 
    },
    {
      "SwigDirector_NettestWebConnectivity_onStatusMeasurementStart", "(Lio/ooni/mk/nettest/swig/NettestWebConnectivity;J)V" 
    },
    {
      "SwigDirector_NettestWebConnectivity_onStatusMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/NettestWebConnectivity;J)V" 
    },
    {
      "SwigDirector_NettestWebConnectivity_onStatusMeasurementDone", "(Lio/ooni/mk/nettest/swig/NettestWebConnectivity;J)V" 
    },
    {
      "SwigDirector_NettestWebConnectivity_onStatusReportClose", "(Lio/ooni/mk/nettest/swig/NettestWebConnectivity;J)V" 
    },
    {
      "SwigDirector_NettestWebConnectivity_onStatusReportCreate", "(Lio/ooni/mk/nettest/swig/NettestWebConnectivity;J)V" 
    },
    {
      "SwigDirector_NettestWebConnectivity_onStatusResolverLookup", "(Lio/ooni/mk/nettest/swig/NettestWebConnectivity;J)V" 
    },
    {
      "SwigDirector_NettestWebConnectivity_onStatusStarted", "(Lio/ooni/mk/nettest/swig/NettestWebConnectivity;J)V" 
    },
    {
      "SwigDirector_NettestWebConnectivity_onTaskTerminated", "(Lio/ooni/mk/nettest/swig/NettestWebConnectivity;J)V" 
    },
    {
      "SwigDirector_NettestWebConnectivity_onStatusUpdateWebsites", "(Lio/ooni/mk/nettest/swig/NettestWebConnectivity;J)V" 
    },
    {
      "SwigDirector_NettestWhatsapp_run", "(Lio/ooni/mk/nettest/swig/NettestWhatsapp;)Z" 
    },
    {
      "SwigDirector_NettestWhatsapp_onFailureAsnLookup", "(Lio/ooni/mk/nettest/swig/NettestWhatsapp;J)V" 
    },
    {
      "SwigDirector_NettestWhatsapp_onFailureCcLookup", "(Lio/ooni/mk/nettest/swig/NettestWhatsapp;J)V" 
    },
    {
      "SwigDirector_NettestWhatsapp_onFailureIpLookup", "(Lio/ooni/mk/nettest/swig/NettestWhatsapp;J)V" 
    },
    {
      "SwigDirector_NettestWhatsapp_onFailureMeasurement", "(Lio/ooni/mk/nettest/swig/NettestWhatsapp;J)V" 
    },
    {
      "SwigDirector_NettestWhatsapp_onFailureMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/NettestWhatsapp;J)V" 
    },
    {
      "SwigDirector_NettestWhatsapp_onFailureReportCreate", "(Lio/ooni/mk/nettest/swig/NettestWhatsapp;J)V" 
    },
    {
      "SwigDirector_NettestWhatsapp_onFailureReportClose", "(Lio/ooni/mk/nettest/swig/NettestWhatsapp;J)V" 
    },
    {
      "SwigDirector_NettestWhatsapp_onFailureResolverLookup", "(Lio/ooni/mk/nettest/swig/NettestWhatsapp;J)V" 
    },
    {
      "SwigDirector_NettestWhatsapp_onFailureStartup", "(Lio/ooni/mk/nettest/swig/NettestWhatsapp;J)V" 
    },
    {
      "SwigDirector_NettestWhatsapp_onLog", "(Lio/ooni/mk/nettest/swig/NettestWhatsapp;J)V" 
    },
    {
      "SwigDirector_NettestWhatsapp_onMeasurement", "(Lio/ooni/mk/nettest/swig/NettestWhatsapp;J)V" 
    },
    {
      "SwigDirector_NettestWhatsapp_onStatusEnd", "(Lio/ooni/mk/nettest/swig/NettestWhatsapp;J)V" 
    },
    {
      "SwigDirector_NettestWhatsapp_onStatusGeoipLookup", "(Lio/ooni/mk/nettest/swig/NettestWhatsapp;J)V" 
    },
    {
      "SwigDirector_NettestWhatsapp_onStatusProgress", "(Lio/ooni/mk/nettest/swig/NettestWhatsapp;J)V" 
    },
    {
      "SwigDirector_NettestWhatsapp_onStatusQueued", "(Lio/ooni/mk/nettest/swig/NettestWhatsapp;J)V" 
    },
    {
      "SwigDirector_NettestWhatsapp_onStatusMeasurementStart", "(Lio/ooni/mk/nettest/swig/NettestWhatsapp;J)V" 
    },
    {
      "SwigDirector_NettestWhatsapp_onStatusMeasurementSubmission", "(Lio/ooni/mk/nettest/swig/NettestWhatsapp;J)V" 
    },
    {
      "SwigDirector_NettestWhatsapp_onStatusMeasurementDone", "(Lio/ooni/mk/nettest/swig/NettestWhatsapp;J)V" 
    },
    {
      "SwigDirector_NettestWhatsapp_onStatusReportClose", "(Lio/ooni/mk/nettest/swig/NettestWhatsapp;J)V" 
    },
    {
      "SwigDirector_NettestWhatsapp_onStatusReportCreate", "(Lio/ooni/mk/nettest/swig/NettestWhatsapp;J)V" 
    },
    {
      "SwigDirector_NettestWhatsapp_onStatusResolverLookup", "(Lio/ooni/mk/nettest/swig/NettestWhatsapp;J)V" 
    },
    {
      "SwigDirector_NettestWhatsapp_onStatusStarted", "(Lio/ooni/mk/nettest/swig/NettestWhatsapp;J)V" 
    },
    {
      "SwigDirector_NettestWhatsapp_onTaskTerminated", "(Lio/ooni/mk/nettest/swig/NettestWhatsapp;J)V" 
    }
  };
  Swig::jclass_ApiJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_ApiJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_method_ids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_method_ids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

