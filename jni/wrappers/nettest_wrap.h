/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_Api_WRAP_H_
#define SWIG_Api_WRAP_H_

class SwigDirector_NettestBase : public mk::nettest::common::Nettest, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_NettestBase(JNIEnv *jenv);
    virtual ~SwigDirector_NettestBase();
    virtual bool run();
    virtual void on_failure_asn_lookup(mk::nettest::events::FailureAsnLookupEvent arg0);
    virtual void on_failure_cc_lookup(mk::nettest::events::FailureCcLookupEvent arg0);
    virtual void on_failure_ip_lookup(mk::nettest::events::FailureIpLookupEvent arg0);
    virtual void on_failure_measurement(mk::nettest::events::FailureMeasurementEvent arg0);
    virtual void on_failure_measurement_submission(mk::nettest::events::FailureMeasurementSubmissionEvent arg0);
    virtual void on_failure_report_create(mk::nettest::events::FailureReportCreateEvent arg0);
    virtual void on_failure_report_close(mk::nettest::events::FailureReportCloseEvent arg0);
    virtual void on_failure_resolver_lookup(mk::nettest::events::FailureResolverLookupEvent arg0);
    virtual void on_failure_startup(mk::nettest::events::FailureStartupEvent arg0);
    virtual void on_log(mk::nettest::events::LogEvent arg0);
    virtual void on_measurement(mk::nettest::events::MeasurementEvent arg0);
    virtual void on_status_end(mk::nettest::events::StatusEndEvent arg0);
    virtual void on_status_geoip_lookup(mk::nettest::events::StatusGeoipLookupEvent arg0);
    virtual void on_status_progress(mk::nettest::events::StatusProgressEvent arg0);
    virtual void on_status_queued(mk::nettest::events::StatusQueuedEvent arg0);
    virtual void on_status_measurement_start(mk::nettest::events::StatusMeasurementStartEvent arg0);
    virtual void on_status_measurement_submission(mk::nettest::events::StatusMeasurementSubmissionEvent arg0);
    virtual void on_status_measurement_done(mk::nettest::events::StatusMeasurementDoneEvent arg0);
    virtual void on_status_report_close(mk::nettest::events::StatusReportCloseEvent arg0);
    virtual void on_status_report_create(mk::nettest::events::StatusReportCreateEvent arg0);
    virtual void on_status_resolver_lookup(mk::nettest::events::StatusResolverLookupEvent arg0);
    virtual void on_status_started(mk::nettest::events::StatusStartedEvent arg0);
    virtual void on_task_terminated(mk::nettest::events::TaskTerminatedEvent arg0);
    virtual bool dispatch_event(nlohmann::json doc);
    virtual bool dispatch_eventSwigPublic(nlohmann::json doc) {
      return mk::nettest::common::Nettest::dispatch_event(doc);
    }
public:
    bool swig_overrides(int n) {
      return (n < 24 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<24> swig_override;
};

class SwigDirector_NettestBasePerformance : public mk::nettest::common::PerformanceNettest, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_NettestBasePerformance(JNIEnv *jenv);
    virtual ~SwigDirector_NettestBasePerformance();
    virtual bool run();
    virtual void on_failure_asn_lookup(mk::nettest::events::FailureAsnLookupEvent arg0);
    virtual void on_failure_cc_lookup(mk::nettest::events::FailureCcLookupEvent arg0);
    virtual void on_failure_ip_lookup(mk::nettest::events::FailureIpLookupEvent arg0);
    virtual void on_failure_measurement(mk::nettest::events::FailureMeasurementEvent arg0);
    virtual void on_failure_measurement_submission(mk::nettest::events::FailureMeasurementSubmissionEvent arg0);
    virtual void on_failure_report_create(mk::nettest::events::FailureReportCreateEvent arg0);
    virtual void on_failure_report_close(mk::nettest::events::FailureReportCloseEvent arg0);
    virtual void on_failure_resolver_lookup(mk::nettest::events::FailureResolverLookupEvent arg0);
    virtual void on_failure_startup(mk::nettest::events::FailureStartupEvent arg0);
    virtual void on_log(mk::nettest::events::LogEvent arg0);
    virtual void on_measurement(mk::nettest::events::MeasurementEvent arg0);
    virtual void on_status_end(mk::nettest::events::StatusEndEvent arg0);
    virtual void on_status_geoip_lookup(mk::nettest::events::StatusGeoipLookupEvent arg0);
    virtual void on_status_progress(mk::nettest::events::StatusProgressEvent arg0);
    virtual void on_status_queued(mk::nettest::events::StatusQueuedEvent arg0);
    virtual void on_status_measurement_start(mk::nettest::events::StatusMeasurementStartEvent arg0);
    virtual void on_status_measurement_submission(mk::nettest::events::StatusMeasurementSubmissionEvent arg0);
    virtual void on_status_measurement_done(mk::nettest::events::StatusMeasurementDoneEvent arg0);
    virtual void on_status_report_close(mk::nettest::events::StatusReportCloseEvent arg0);
    virtual void on_status_report_create(mk::nettest::events::StatusReportCreateEvent arg0);
    virtual void on_status_resolver_lookup(mk::nettest::events::StatusResolverLookupEvent arg0);
    virtual void on_status_started(mk::nettest::events::StatusStartedEvent arg0);
    virtual void on_task_terminated(mk::nettest::events::TaskTerminatedEvent arg0);
    virtual bool dispatch_event(nlohmann::json doc);
    virtual bool dispatch_eventSwigPublic(nlohmann::json doc) {
      return mk::nettest::common::PerformanceNettest::dispatch_event(doc);
    }
    virtual void on_status_update_performance(mk::nettest::events::StatusUpdatePerformanceEvent arg0);
public:
    bool swig_overrides(int n) {
      return (n < 25 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<25> swig_override;
};

class SwigDirector_NettestBaseWebsites : public mk::nettest::common::WebsitesNettest, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_NettestBaseWebsites(JNIEnv *jenv);
    virtual ~SwigDirector_NettestBaseWebsites();
    virtual bool run();
    virtual void on_failure_asn_lookup(mk::nettest::events::FailureAsnLookupEvent arg0);
    virtual void on_failure_cc_lookup(mk::nettest::events::FailureCcLookupEvent arg0);
    virtual void on_failure_ip_lookup(mk::nettest::events::FailureIpLookupEvent arg0);
    virtual void on_failure_measurement(mk::nettest::events::FailureMeasurementEvent arg0);
    virtual void on_failure_measurement_submission(mk::nettest::events::FailureMeasurementSubmissionEvent arg0);
    virtual void on_failure_report_create(mk::nettest::events::FailureReportCreateEvent arg0);
    virtual void on_failure_report_close(mk::nettest::events::FailureReportCloseEvent arg0);
    virtual void on_failure_resolver_lookup(mk::nettest::events::FailureResolverLookupEvent arg0);
    virtual void on_failure_startup(mk::nettest::events::FailureStartupEvent arg0);
    virtual void on_log(mk::nettest::events::LogEvent arg0);
    virtual void on_measurement(mk::nettest::events::MeasurementEvent arg0);
    virtual void on_status_end(mk::nettest::events::StatusEndEvent arg0);
    virtual void on_status_geoip_lookup(mk::nettest::events::StatusGeoipLookupEvent arg0);
    virtual void on_status_progress(mk::nettest::events::StatusProgressEvent arg0);
    virtual void on_status_queued(mk::nettest::events::StatusQueuedEvent arg0);
    virtual void on_status_measurement_start(mk::nettest::events::StatusMeasurementStartEvent arg0);
    virtual void on_status_measurement_submission(mk::nettest::events::StatusMeasurementSubmissionEvent arg0);
    virtual void on_status_measurement_done(mk::nettest::events::StatusMeasurementDoneEvent arg0);
    virtual void on_status_report_close(mk::nettest::events::StatusReportCloseEvent arg0);
    virtual void on_status_report_create(mk::nettest::events::StatusReportCreateEvent arg0);
    virtual void on_status_resolver_lookup(mk::nettest::events::StatusResolverLookupEvent arg0);
    virtual void on_status_started(mk::nettest::events::StatusStartedEvent arg0);
    virtual void on_task_terminated(mk::nettest::events::TaskTerminatedEvent arg0);
    virtual bool dispatch_event(nlohmann::json doc);
    virtual bool dispatch_eventSwigPublic(nlohmann::json doc) {
      return mk::nettest::common::WebsitesNettest::dispatch_event(doc);
    }
    virtual void on_status_update_websites(mk::nettest::events::StatusUpdateWebsitesEvent arg0);
public:
    bool swig_overrides(int n) {
      return (n < 25 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<25> swig_override;
};

class SwigDirector_NettestCaptivePortal : public mk::nettest::CaptivePortalNettest, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_NettestCaptivePortal(JNIEnv *jenv, mk::nettest::CaptivePortalSettings arg0);
    virtual ~SwigDirector_NettestCaptivePortal();
    virtual bool run();
    virtual void on_failure_asn_lookup(mk::nettest::events::FailureAsnLookupEvent arg0);
    virtual void on_failure_cc_lookup(mk::nettest::events::FailureCcLookupEvent arg0);
    virtual void on_failure_ip_lookup(mk::nettest::events::FailureIpLookupEvent arg0);
    virtual void on_failure_measurement(mk::nettest::events::FailureMeasurementEvent arg0);
    virtual void on_failure_measurement_submission(mk::nettest::events::FailureMeasurementSubmissionEvent arg0);
    virtual void on_failure_report_create(mk::nettest::events::FailureReportCreateEvent arg0);
    virtual void on_failure_report_close(mk::nettest::events::FailureReportCloseEvent arg0);
    virtual void on_failure_resolver_lookup(mk::nettest::events::FailureResolverLookupEvent arg0);
    virtual void on_failure_startup(mk::nettest::events::FailureStartupEvent arg0);
    virtual void on_log(mk::nettest::events::LogEvent arg0);
    virtual void on_measurement(mk::nettest::events::MeasurementEvent arg0);
    virtual void on_status_end(mk::nettest::events::StatusEndEvent arg0);
    virtual void on_status_geoip_lookup(mk::nettest::events::StatusGeoipLookupEvent arg0);
    virtual void on_status_progress(mk::nettest::events::StatusProgressEvent arg0);
    virtual void on_status_queued(mk::nettest::events::StatusQueuedEvent arg0);
    virtual void on_status_measurement_start(mk::nettest::events::StatusMeasurementStartEvent arg0);
    virtual void on_status_measurement_submission(mk::nettest::events::StatusMeasurementSubmissionEvent arg0);
    virtual void on_status_measurement_done(mk::nettest::events::StatusMeasurementDoneEvent arg0);
    virtual void on_status_report_close(mk::nettest::events::StatusReportCloseEvent arg0);
    virtual void on_status_report_create(mk::nettest::events::StatusReportCreateEvent arg0);
    virtual void on_status_resolver_lookup(mk::nettest::events::StatusResolverLookupEvent arg0);
    virtual void on_status_started(mk::nettest::events::StatusStartedEvent arg0);
    virtual void on_task_terminated(mk::nettest::events::TaskTerminatedEvent arg0);
    virtual bool dispatch_event(nlohmann::json doc);
    virtual bool dispatch_eventSwigPublic(nlohmann::json doc) {
      return mk::nettest::common::Nettest::dispatch_event(doc);
    }
public:
    bool swig_overrides(int n) {
      return (n < 24 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<24> swig_override;
};

class SwigDirector_NettestDash : public mk::nettest::DashNettest, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_NettestDash(JNIEnv *jenv, mk::nettest::DashSettings arg0);
    virtual ~SwigDirector_NettestDash();
    virtual bool run();
    virtual void on_failure_asn_lookup(mk::nettest::events::FailureAsnLookupEvent arg0);
    virtual void on_failure_cc_lookup(mk::nettest::events::FailureCcLookupEvent arg0);
    virtual void on_failure_ip_lookup(mk::nettest::events::FailureIpLookupEvent arg0);
    virtual void on_failure_measurement(mk::nettest::events::FailureMeasurementEvent arg0);
    virtual void on_failure_measurement_submission(mk::nettest::events::FailureMeasurementSubmissionEvent arg0);
    virtual void on_failure_report_create(mk::nettest::events::FailureReportCreateEvent arg0);
    virtual void on_failure_report_close(mk::nettest::events::FailureReportCloseEvent arg0);
    virtual void on_failure_resolver_lookup(mk::nettest::events::FailureResolverLookupEvent arg0);
    virtual void on_failure_startup(mk::nettest::events::FailureStartupEvent arg0);
    virtual void on_log(mk::nettest::events::LogEvent arg0);
    virtual void on_measurement(mk::nettest::events::MeasurementEvent arg0);
    virtual void on_status_end(mk::nettest::events::StatusEndEvent arg0);
    virtual void on_status_geoip_lookup(mk::nettest::events::StatusGeoipLookupEvent arg0);
    virtual void on_status_progress(mk::nettest::events::StatusProgressEvent arg0);
    virtual void on_status_queued(mk::nettest::events::StatusQueuedEvent arg0);
    virtual void on_status_measurement_start(mk::nettest::events::StatusMeasurementStartEvent arg0);
    virtual void on_status_measurement_submission(mk::nettest::events::StatusMeasurementSubmissionEvent arg0);
    virtual void on_status_measurement_done(mk::nettest::events::StatusMeasurementDoneEvent arg0);
    virtual void on_status_report_close(mk::nettest::events::StatusReportCloseEvent arg0);
    virtual void on_status_report_create(mk::nettest::events::StatusReportCreateEvent arg0);
    virtual void on_status_resolver_lookup(mk::nettest::events::StatusResolverLookupEvent arg0);
    virtual void on_status_started(mk::nettest::events::StatusStartedEvent arg0);
    virtual void on_task_terminated(mk::nettest::events::TaskTerminatedEvent arg0);
    virtual bool dispatch_event(nlohmann::json doc);
    virtual bool dispatch_eventSwigPublic(nlohmann::json doc) {
      return mk::nettest::common::PerformanceNettest::dispatch_event(doc);
    }
    virtual void on_status_update_performance(mk::nettest::events::StatusUpdatePerformanceEvent arg0);
public:
    bool swig_overrides(int n) {
      return (n < 25 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<25> swig_override;
};

class SwigDirector_NettestDnsInjection : public mk::nettest::DnsInjectionNettest, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_NettestDnsInjection(JNIEnv *jenv, mk::nettest::DnsInjectionSettings arg0);
    virtual ~SwigDirector_NettestDnsInjection();
    virtual bool run();
    virtual void on_failure_asn_lookup(mk::nettest::events::FailureAsnLookupEvent arg0);
    virtual void on_failure_cc_lookup(mk::nettest::events::FailureCcLookupEvent arg0);
    virtual void on_failure_ip_lookup(mk::nettest::events::FailureIpLookupEvent arg0);
    virtual void on_failure_measurement(mk::nettest::events::FailureMeasurementEvent arg0);
    virtual void on_failure_measurement_submission(mk::nettest::events::FailureMeasurementSubmissionEvent arg0);
    virtual void on_failure_report_create(mk::nettest::events::FailureReportCreateEvent arg0);
    virtual void on_failure_report_close(mk::nettest::events::FailureReportCloseEvent arg0);
    virtual void on_failure_resolver_lookup(mk::nettest::events::FailureResolverLookupEvent arg0);
    virtual void on_failure_startup(mk::nettest::events::FailureStartupEvent arg0);
    virtual void on_log(mk::nettest::events::LogEvent arg0);
    virtual void on_measurement(mk::nettest::events::MeasurementEvent arg0);
    virtual void on_status_end(mk::nettest::events::StatusEndEvent arg0);
    virtual void on_status_geoip_lookup(mk::nettest::events::StatusGeoipLookupEvent arg0);
    virtual void on_status_progress(mk::nettest::events::StatusProgressEvent arg0);
    virtual void on_status_queued(mk::nettest::events::StatusQueuedEvent arg0);
    virtual void on_status_measurement_start(mk::nettest::events::StatusMeasurementStartEvent arg0);
    virtual void on_status_measurement_submission(mk::nettest::events::StatusMeasurementSubmissionEvent arg0);
    virtual void on_status_measurement_done(mk::nettest::events::StatusMeasurementDoneEvent arg0);
    virtual void on_status_report_close(mk::nettest::events::StatusReportCloseEvent arg0);
    virtual void on_status_report_create(mk::nettest::events::StatusReportCreateEvent arg0);
    virtual void on_status_resolver_lookup(mk::nettest::events::StatusResolverLookupEvent arg0);
    virtual void on_status_started(mk::nettest::events::StatusStartedEvent arg0);
    virtual void on_task_terminated(mk::nettest::events::TaskTerminatedEvent arg0);
    virtual bool dispatch_event(nlohmann::json doc);
    virtual bool dispatch_eventSwigPublic(nlohmann::json doc) {
      return mk::nettest::common::Nettest::dispatch_event(doc);
    }
public:
    bool swig_overrides(int n) {
      return (n < 24 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<24> swig_override;
};

class SwigDirector_NettestFacebookMessenger : public mk::nettest::FacebookMessengerNettest, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_NettestFacebookMessenger(JNIEnv *jenv, mk::nettest::FacebookMessengerSettings arg0);
    virtual ~SwigDirector_NettestFacebookMessenger();
    virtual bool run();
    virtual void on_failure_asn_lookup(mk::nettest::events::FailureAsnLookupEvent arg0);
    virtual void on_failure_cc_lookup(mk::nettest::events::FailureCcLookupEvent arg0);
    virtual void on_failure_ip_lookup(mk::nettest::events::FailureIpLookupEvent arg0);
    virtual void on_failure_measurement(mk::nettest::events::FailureMeasurementEvent arg0);
    virtual void on_failure_measurement_submission(mk::nettest::events::FailureMeasurementSubmissionEvent arg0);
    virtual void on_failure_report_create(mk::nettest::events::FailureReportCreateEvent arg0);
    virtual void on_failure_report_close(mk::nettest::events::FailureReportCloseEvent arg0);
    virtual void on_failure_resolver_lookup(mk::nettest::events::FailureResolverLookupEvent arg0);
    virtual void on_failure_startup(mk::nettest::events::FailureStartupEvent arg0);
    virtual void on_log(mk::nettest::events::LogEvent arg0);
    virtual void on_measurement(mk::nettest::events::MeasurementEvent arg0);
    virtual void on_status_end(mk::nettest::events::StatusEndEvent arg0);
    virtual void on_status_geoip_lookup(mk::nettest::events::StatusGeoipLookupEvent arg0);
    virtual void on_status_progress(mk::nettest::events::StatusProgressEvent arg0);
    virtual void on_status_queued(mk::nettest::events::StatusQueuedEvent arg0);
    virtual void on_status_measurement_start(mk::nettest::events::StatusMeasurementStartEvent arg0);
    virtual void on_status_measurement_submission(mk::nettest::events::StatusMeasurementSubmissionEvent arg0);
    virtual void on_status_measurement_done(mk::nettest::events::StatusMeasurementDoneEvent arg0);
    virtual void on_status_report_close(mk::nettest::events::StatusReportCloseEvent arg0);
    virtual void on_status_report_create(mk::nettest::events::StatusReportCreateEvent arg0);
    virtual void on_status_resolver_lookup(mk::nettest::events::StatusResolverLookupEvent arg0);
    virtual void on_status_started(mk::nettest::events::StatusStartedEvent arg0);
    virtual void on_task_terminated(mk::nettest::events::TaskTerminatedEvent arg0);
    virtual bool dispatch_event(nlohmann::json doc);
    virtual bool dispatch_eventSwigPublic(nlohmann::json doc) {
      return mk::nettest::common::Nettest::dispatch_event(doc);
    }
public:
    bool swig_overrides(int n) {
      return (n < 24 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<24> swig_override;
};

class SwigDirector_NettestHttpHeaderFieldManipulation : public mk::nettest::HttpHeaderFieldManipulationNettest, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_NettestHttpHeaderFieldManipulation(JNIEnv *jenv, mk::nettest::HttpHeaderFieldManipulationSettings arg0);
    virtual ~SwigDirector_NettestHttpHeaderFieldManipulation();
    virtual bool run();
    virtual void on_failure_asn_lookup(mk::nettest::events::FailureAsnLookupEvent arg0);
    virtual void on_failure_cc_lookup(mk::nettest::events::FailureCcLookupEvent arg0);
    virtual void on_failure_ip_lookup(mk::nettest::events::FailureIpLookupEvent arg0);
    virtual void on_failure_measurement(mk::nettest::events::FailureMeasurementEvent arg0);
    virtual void on_failure_measurement_submission(mk::nettest::events::FailureMeasurementSubmissionEvent arg0);
    virtual void on_failure_report_create(mk::nettest::events::FailureReportCreateEvent arg0);
    virtual void on_failure_report_close(mk::nettest::events::FailureReportCloseEvent arg0);
    virtual void on_failure_resolver_lookup(mk::nettest::events::FailureResolverLookupEvent arg0);
    virtual void on_failure_startup(mk::nettest::events::FailureStartupEvent arg0);
    virtual void on_log(mk::nettest::events::LogEvent arg0);
    virtual void on_measurement(mk::nettest::events::MeasurementEvent arg0);
    virtual void on_status_end(mk::nettest::events::StatusEndEvent arg0);
    virtual void on_status_geoip_lookup(mk::nettest::events::StatusGeoipLookupEvent arg0);
    virtual void on_status_progress(mk::nettest::events::StatusProgressEvent arg0);
    virtual void on_status_queued(mk::nettest::events::StatusQueuedEvent arg0);
    virtual void on_status_measurement_start(mk::nettest::events::StatusMeasurementStartEvent arg0);
    virtual void on_status_measurement_submission(mk::nettest::events::StatusMeasurementSubmissionEvent arg0);
    virtual void on_status_measurement_done(mk::nettest::events::StatusMeasurementDoneEvent arg0);
    virtual void on_status_report_close(mk::nettest::events::StatusReportCloseEvent arg0);
    virtual void on_status_report_create(mk::nettest::events::StatusReportCreateEvent arg0);
    virtual void on_status_resolver_lookup(mk::nettest::events::StatusResolverLookupEvent arg0);
    virtual void on_status_started(mk::nettest::events::StatusStartedEvent arg0);
    virtual void on_task_terminated(mk::nettest::events::TaskTerminatedEvent arg0);
    virtual bool dispatch_event(nlohmann::json doc);
    virtual bool dispatch_eventSwigPublic(nlohmann::json doc) {
      return mk::nettest::common::Nettest::dispatch_event(doc);
    }
public:
    bool swig_overrides(int n) {
      return (n < 24 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<24> swig_override;
};

class SwigDirector_NettestHttpInvalidRequestLine : public mk::nettest::HttpInvalidRequestLineNettest, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_NettestHttpInvalidRequestLine(JNIEnv *jenv, mk::nettest::HttpInvalidRequestLineSettings arg0);
    virtual ~SwigDirector_NettestHttpInvalidRequestLine();
    virtual bool run();
    virtual void on_failure_asn_lookup(mk::nettest::events::FailureAsnLookupEvent arg0);
    virtual void on_failure_cc_lookup(mk::nettest::events::FailureCcLookupEvent arg0);
    virtual void on_failure_ip_lookup(mk::nettest::events::FailureIpLookupEvent arg0);
    virtual void on_failure_measurement(mk::nettest::events::FailureMeasurementEvent arg0);
    virtual void on_failure_measurement_submission(mk::nettest::events::FailureMeasurementSubmissionEvent arg0);
    virtual void on_failure_report_create(mk::nettest::events::FailureReportCreateEvent arg0);
    virtual void on_failure_report_close(mk::nettest::events::FailureReportCloseEvent arg0);
    virtual void on_failure_resolver_lookup(mk::nettest::events::FailureResolverLookupEvent arg0);
    virtual void on_failure_startup(mk::nettest::events::FailureStartupEvent arg0);
    virtual void on_log(mk::nettest::events::LogEvent arg0);
    virtual void on_measurement(mk::nettest::events::MeasurementEvent arg0);
    virtual void on_status_end(mk::nettest::events::StatusEndEvent arg0);
    virtual void on_status_geoip_lookup(mk::nettest::events::StatusGeoipLookupEvent arg0);
    virtual void on_status_progress(mk::nettest::events::StatusProgressEvent arg0);
    virtual void on_status_queued(mk::nettest::events::StatusQueuedEvent arg0);
    virtual void on_status_measurement_start(mk::nettest::events::StatusMeasurementStartEvent arg0);
    virtual void on_status_measurement_submission(mk::nettest::events::StatusMeasurementSubmissionEvent arg0);
    virtual void on_status_measurement_done(mk::nettest::events::StatusMeasurementDoneEvent arg0);
    virtual void on_status_report_close(mk::nettest::events::StatusReportCloseEvent arg0);
    virtual void on_status_report_create(mk::nettest::events::StatusReportCreateEvent arg0);
    virtual void on_status_resolver_lookup(mk::nettest::events::StatusResolverLookupEvent arg0);
    virtual void on_status_started(mk::nettest::events::StatusStartedEvent arg0);
    virtual void on_task_terminated(mk::nettest::events::TaskTerminatedEvent arg0);
    virtual bool dispatch_event(nlohmann::json doc);
    virtual bool dispatch_eventSwigPublic(nlohmann::json doc) {
      return mk::nettest::common::Nettest::dispatch_event(doc);
    }
public:
    bool swig_overrides(int n) {
      return (n < 24 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<24> swig_override;
};

class SwigDirector_NettestMeekFrontedRequests : public mk::nettest::MeekFrontedRequestsNettest, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_NettestMeekFrontedRequests(JNIEnv *jenv, mk::nettest::MeekFrontedRequestsSettings arg0);
    virtual ~SwigDirector_NettestMeekFrontedRequests();
    virtual bool run();
    virtual void on_failure_asn_lookup(mk::nettest::events::FailureAsnLookupEvent arg0);
    virtual void on_failure_cc_lookup(mk::nettest::events::FailureCcLookupEvent arg0);
    virtual void on_failure_ip_lookup(mk::nettest::events::FailureIpLookupEvent arg0);
    virtual void on_failure_measurement(mk::nettest::events::FailureMeasurementEvent arg0);
    virtual void on_failure_measurement_submission(mk::nettest::events::FailureMeasurementSubmissionEvent arg0);
    virtual void on_failure_report_create(mk::nettest::events::FailureReportCreateEvent arg0);
    virtual void on_failure_report_close(mk::nettest::events::FailureReportCloseEvent arg0);
    virtual void on_failure_resolver_lookup(mk::nettest::events::FailureResolverLookupEvent arg0);
    virtual void on_failure_startup(mk::nettest::events::FailureStartupEvent arg0);
    virtual void on_log(mk::nettest::events::LogEvent arg0);
    virtual void on_measurement(mk::nettest::events::MeasurementEvent arg0);
    virtual void on_status_end(mk::nettest::events::StatusEndEvent arg0);
    virtual void on_status_geoip_lookup(mk::nettest::events::StatusGeoipLookupEvent arg0);
    virtual void on_status_progress(mk::nettest::events::StatusProgressEvent arg0);
    virtual void on_status_queued(mk::nettest::events::StatusQueuedEvent arg0);
    virtual void on_status_measurement_start(mk::nettest::events::StatusMeasurementStartEvent arg0);
    virtual void on_status_measurement_submission(mk::nettest::events::StatusMeasurementSubmissionEvent arg0);
    virtual void on_status_measurement_done(mk::nettest::events::StatusMeasurementDoneEvent arg0);
    virtual void on_status_report_close(mk::nettest::events::StatusReportCloseEvent arg0);
    virtual void on_status_report_create(mk::nettest::events::StatusReportCreateEvent arg0);
    virtual void on_status_resolver_lookup(mk::nettest::events::StatusResolverLookupEvent arg0);
    virtual void on_status_started(mk::nettest::events::StatusStartedEvent arg0);
    virtual void on_task_terminated(mk::nettest::events::TaskTerminatedEvent arg0);
    virtual bool dispatch_event(nlohmann::json doc);
    virtual bool dispatch_eventSwigPublic(nlohmann::json doc) {
      return mk::nettest::common::Nettest::dispatch_event(doc);
    }
public:
    bool swig_overrides(int n) {
      return (n < 24 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<24> swig_override;
};

class SwigDirector_NettestMultiNdt : public mk::nettest::MultiNdtNettest, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_NettestMultiNdt(JNIEnv *jenv, mk::nettest::MultiNdtSettings arg0);
    virtual ~SwigDirector_NettestMultiNdt();
    virtual bool run();
    virtual void on_failure_asn_lookup(mk::nettest::events::FailureAsnLookupEvent arg0);
    virtual void on_failure_cc_lookup(mk::nettest::events::FailureCcLookupEvent arg0);
    virtual void on_failure_ip_lookup(mk::nettest::events::FailureIpLookupEvent arg0);
    virtual void on_failure_measurement(mk::nettest::events::FailureMeasurementEvent arg0);
    virtual void on_failure_measurement_submission(mk::nettest::events::FailureMeasurementSubmissionEvent arg0);
    virtual void on_failure_report_create(mk::nettest::events::FailureReportCreateEvent arg0);
    virtual void on_failure_report_close(mk::nettest::events::FailureReportCloseEvent arg0);
    virtual void on_failure_resolver_lookup(mk::nettest::events::FailureResolverLookupEvent arg0);
    virtual void on_failure_startup(mk::nettest::events::FailureStartupEvent arg0);
    virtual void on_log(mk::nettest::events::LogEvent arg0);
    virtual void on_measurement(mk::nettest::events::MeasurementEvent arg0);
    virtual void on_status_end(mk::nettest::events::StatusEndEvent arg0);
    virtual void on_status_geoip_lookup(mk::nettest::events::StatusGeoipLookupEvent arg0);
    virtual void on_status_progress(mk::nettest::events::StatusProgressEvent arg0);
    virtual void on_status_queued(mk::nettest::events::StatusQueuedEvent arg0);
    virtual void on_status_measurement_start(mk::nettest::events::StatusMeasurementStartEvent arg0);
    virtual void on_status_measurement_submission(mk::nettest::events::StatusMeasurementSubmissionEvent arg0);
    virtual void on_status_measurement_done(mk::nettest::events::StatusMeasurementDoneEvent arg0);
    virtual void on_status_report_close(mk::nettest::events::StatusReportCloseEvent arg0);
    virtual void on_status_report_create(mk::nettest::events::StatusReportCreateEvent arg0);
    virtual void on_status_resolver_lookup(mk::nettest::events::StatusResolverLookupEvent arg0);
    virtual void on_status_started(mk::nettest::events::StatusStartedEvent arg0);
    virtual void on_task_terminated(mk::nettest::events::TaskTerminatedEvent arg0);
    virtual bool dispatch_event(nlohmann::json doc);
    virtual bool dispatch_eventSwigPublic(nlohmann::json doc) {
      return mk::nettest::common::PerformanceNettest::dispatch_event(doc);
    }
    virtual void on_status_update_performance(mk::nettest::events::StatusUpdatePerformanceEvent arg0);
public:
    bool swig_overrides(int n) {
      return (n < 25 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<25> swig_override;
};

class SwigDirector_NettestNdt : public mk::nettest::NdtNettest, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_NettestNdt(JNIEnv *jenv, mk::nettest::NdtSettings arg0);
    virtual ~SwigDirector_NettestNdt();
    virtual bool run();
    virtual void on_failure_asn_lookup(mk::nettest::events::FailureAsnLookupEvent arg0);
    virtual void on_failure_cc_lookup(mk::nettest::events::FailureCcLookupEvent arg0);
    virtual void on_failure_ip_lookup(mk::nettest::events::FailureIpLookupEvent arg0);
    virtual void on_failure_measurement(mk::nettest::events::FailureMeasurementEvent arg0);
    virtual void on_failure_measurement_submission(mk::nettest::events::FailureMeasurementSubmissionEvent arg0);
    virtual void on_failure_report_create(mk::nettest::events::FailureReportCreateEvent arg0);
    virtual void on_failure_report_close(mk::nettest::events::FailureReportCloseEvent arg0);
    virtual void on_failure_resolver_lookup(mk::nettest::events::FailureResolverLookupEvent arg0);
    virtual void on_failure_startup(mk::nettest::events::FailureStartupEvent arg0);
    virtual void on_log(mk::nettest::events::LogEvent arg0);
    virtual void on_measurement(mk::nettest::events::MeasurementEvent arg0);
    virtual void on_status_end(mk::nettest::events::StatusEndEvent arg0);
    virtual void on_status_geoip_lookup(mk::nettest::events::StatusGeoipLookupEvent arg0);
    virtual void on_status_progress(mk::nettest::events::StatusProgressEvent arg0);
    virtual void on_status_queued(mk::nettest::events::StatusQueuedEvent arg0);
    virtual void on_status_measurement_start(mk::nettest::events::StatusMeasurementStartEvent arg0);
    virtual void on_status_measurement_submission(mk::nettest::events::StatusMeasurementSubmissionEvent arg0);
    virtual void on_status_measurement_done(mk::nettest::events::StatusMeasurementDoneEvent arg0);
    virtual void on_status_report_close(mk::nettest::events::StatusReportCloseEvent arg0);
    virtual void on_status_report_create(mk::nettest::events::StatusReportCreateEvent arg0);
    virtual void on_status_resolver_lookup(mk::nettest::events::StatusResolverLookupEvent arg0);
    virtual void on_status_started(mk::nettest::events::StatusStartedEvent arg0);
    virtual void on_task_terminated(mk::nettest::events::TaskTerminatedEvent arg0);
    virtual bool dispatch_event(nlohmann::json doc);
    virtual bool dispatch_eventSwigPublic(nlohmann::json doc) {
      return mk::nettest::common::PerformanceNettest::dispatch_event(doc);
    }
    virtual void on_status_update_performance(mk::nettest::events::StatusUpdatePerformanceEvent arg0);
public:
    bool swig_overrides(int n) {
      return (n < 25 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<25> swig_override;
};

class SwigDirector_NettestTcpConnect : public mk::nettest::TcpConnectNettest, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_NettestTcpConnect(JNIEnv *jenv, mk::nettest::TcpConnectSettings arg0);
    virtual ~SwigDirector_NettestTcpConnect();
    virtual bool run();
    virtual void on_failure_asn_lookup(mk::nettest::events::FailureAsnLookupEvent arg0);
    virtual void on_failure_cc_lookup(mk::nettest::events::FailureCcLookupEvent arg0);
    virtual void on_failure_ip_lookup(mk::nettest::events::FailureIpLookupEvent arg0);
    virtual void on_failure_measurement(mk::nettest::events::FailureMeasurementEvent arg0);
    virtual void on_failure_measurement_submission(mk::nettest::events::FailureMeasurementSubmissionEvent arg0);
    virtual void on_failure_report_create(mk::nettest::events::FailureReportCreateEvent arg0);
    virtual void on_failure_report_close(mk::nettest::events::FailureReportCloseEvent arg0);
    virtual void on_failure_resolver_lookup(mk::nettest::events::FailureResolverLookupEvent arg0);
    virtual void on_failure_startup(mk::nettest::events::FailureStartupEvent arg0);
    virtual void on_log(mk::nettest::events::LogEvent arg0);
    virtual void on_measurement(mk::nettest::events::MeasurementEvent arg0);
    virtual void on_status_end(mk::nettest::events::StatusEndEvent arg0);
    virtual void on_status_geoip_lookup(mk::nettest::events::StatusGeoipLookupEvent arg0);
    virtual void on_status_progress(mk::nettest::events::StatusProgressEvent arg0);
    virtual void on_status_queued(mk::nettest::events::StatusQueuedEvent arg0);
    virtual void on_status_measurement_start(mk::nettest::events::StatusMeasurementStartEvent arg0);
    virtual void on_status_measurement_submission(mk::nettest::events::StatusMeasurementSubmissionEvent arg0);
    virtual void on_status_measurement_done(mk::nettest::events::StatusMeasurementDoneEvent arg0);
    virtual void on_status_report_close(mk::nettest::events::StatusReportCloseEvent arg0);
    virtual void on_status_report_create(mk::nettest::events::StatusReportCreateEvent arg0);
    virtual void on_status_resolver_lookup(mk::nettest::events::StatusResolverLookupEvent arg0);
    virtual void on_status_started(mk::nettest::events::StatusStartedEvent arg0);
    virtual void on_task_terminated(mk::nettest::events::TaskTerminatedEvent arg0);
    virtual bool dispatch_event(nlohmann::json doc);
    virtual bool dispatch_eventSwigPublic(nlohmann::json doc) {
      return mk::nettest::common::Nettest::dispatch_event(doc);
    }
public:
    bool swig_overrides(int n) {
      return (n < 24 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<24> swig_override;
};

class SwigDirector_NettestTelegram : public mk::nettest::TelegramNettest, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_NettestTelegram(JNIEnv *jenv, mk::nettest::TelegramSettings arg0);
    virtual ~SwigDirector_NettestTelegram();
    virtual bool run();
    virtual void on_failure_asn_lookup(mk::nettest::events::FailureAsnLookupEvent arg0);
    virtual void on_failure_cc_lookup(mk::nettest::events::FailureCcLookupEvent arg0);
    virtual void on_failure_ip_lookup(mk::nettest::events::FailureIpLookupEvent arg0);
    virtual void on_failure_measurement(mk::nettest::events::FailureMeasurementEvent arg0);
    virtual void on_failure_measurement_submission(mk::nettest::events::FailureMeasurementSubmissionEvent arg0);
    virtual void on_failure_report_create(mk::nettest::events::FailureReportCreateEvent arg0);
    virtual void on_failure_report_close(mk::nettest::events::FailureReportCloseEvent arg0);
    virtual void on_failure_resolver_lookup(mk::nettest::events::FailureResolverLookupEvent arg0);
    virtual void on_failure_startup(mk::nettest::events::FailureStartupEvent arg0);
    virtual void on_log(mk::nettest::events::LogEvent arg0);
    virtual void on_measurement(mk::nettest::events::MeasurementEvent arg0);
    virtual void on_status_end(mk::nettest::events::StatusEndEvent arg0);
    virtual void on_status_geoip_lookup(mk::nettest::events::StatusGeoipLookupEvent arg0);
    virtual void on_status_progress(mk::nettest::events::StatusProgressEvent arg0);
    virtual void on_status_queued(mk::nettest::events::StatusQueuedEvent arg0);
    virtual void on_status_measurement_start(mk::nettest::events::StatusMeasurementStartEvent arg0);
    virtual void on_status_measurement_submission(mk::nettest::events::StatusMeasurementSubmissionEvent arg0);
    virtual void on_status_measurement_done(mk::nettest::events::StatusMeasurementDoneEvent arg0);
    virtual void on_status_report_close(mk::nettest::events::StatusReportCloseEvent arg0);
    virtual void on_status_report_create(mk::nettest::events::StatusReportCreateEvent arg0);
    virtual void on_status_resolver_lookup(mk::nettest::events::StatusResolverLookupEvent arg0);
    virtual void on_status_started(mk::nettest::events::StatusStartedEvent arg0);
    virtual void on_task_terminated(mk::nettest::events::TaskTerminatedEvent arg0);
    virtual bool dispatch_event(nlohmann::json doc);
    virtual bool dispatch_eventSwigPublic(nlohmann::json doc) {
      return mk::nettest::common::Nettest::dispatch_event(doc);
    }
public:
    bool swig_overrides(int n) {
      return (n < 24 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<24> swig_override;
};

class SwigDirector_NettestWebConnectivity : public mk::nettest::WebConnectivityNettest, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_NettestWebConnectivity(JNIEnv *jenv, mk::nettest::WebConnectivitySettings arg0);
    virtual ~SwigDirector_NettestWebConnectivity();
    virtual bool run();
    virtual void on_failure_asn_lookup(mk::nettest::events::FailureAsnLookupEvent arg0);
    virtual void on_failure_cc_lookup(mk::nettest::events::FailureCcLookupEvent arg0);
    virtual void on_failure_ip_lookup(mk::nettest::events::FailureIpLookupEvent arg0);
    virtual void on_failure_measurement(mk::nettest::events::FailureMeasurementEvent arg0);
    virtual void on_failure_measurement_submission(mk::nettest::events::FailureMeasurementSubmissionEvent arg0);
    virtual void on_failure_report_create(mk::nettest::events::FailureReportCreateEvent arg0);
    virtual void on_failure_report_close(mk::nettest::events::FailureReportCloseEvent arg0);
    virtual void on_failure_resolver_lookup(mk::nettest::events::FailureResolverLookupEvent arg0);
    virtual void on_failure_startup(mk::nettest::events::FailureStartupEvent arg0);
    virtual void on_log(mk::nettest::events::LogEvent arg0);
    virtual void on_measurement(mk::nettest::events::MeasurementEvent arg0);
    virtual void on_status_end(mk::nettest::events::StatusEndEvent arg0);
    virtual void on_status_geoip_lookup(mk::nettest::events::StatusGeoipLookupEvent arg0);
    virtual void on_status_progress(mk::nettest::events::StatusProgressEvent arg0);
    virtual void on_status_queued(mk::nettest::events::StatusQueuedEvent arg0);
    virtual void on_status_measurement_start(mk::nettest::events::StatusMeasurementStartEvent arg0);
    virtual void on_status_measurement_submission(mk::nettest::events::StatusMeasurementSubmissionEvent arg0);
    virtual void on_status_measurement_done(mk::nettest::events::StatusMeasurementDoneEvent arg0);
    virtual void on_status_report_close(mk::nettest::events::StatusReportCloseEvent arg0);
    virtual void on_status_report_create(mk::nettest::events::StatusReportCreateEvent arg0);
    virtual void on_status_resolver_lookup(mk::nettest::events::StatusResolverLookupEvent arg0);
    virtual void on_status_started(mk::nettest::events::StatusStartedEvent arg0);
    virtual void on_task_terminated(mk::nettest::events::TaskTerminatedEvent arg0);
    virtual bool dispatch_event(nlohmann::json doc);
    virtual bool dispatch_eventSwigPublic(nlohmann::json doc) {
      return mk::nettest::common::WebsitesNettest::dispatch_event(doc);
    }
    virtual void on_status_update_websites(mk::nettest::events::StatusUpdateWebsitesEvent arg0);
public:
    bool swig_overrides(int n) {
      return (n < 25 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<25> swig_override;
};

class SwigDirector_NettestWhatsapp : public mk::nettest::WhatsappNettest, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_NettestWhatsapp(JNIEnv *jenv, mk::nettest::WhatsappSettings arg0);
    virtual ~SwigDirector_NettestWhatsapp();
    virtual bool run();
    virtual void on_failure_asn_lookup(mk::nettest::events::FailureAsnLookupEvent arg0);
    virtual void on_failure_cc_lookup(mk::nettest::events::FailureCcLookupEvent arg0);
    virtual void on_failure_ip_lookup(mk::nettest::events::FailureIpLookupEvent arg0);
    virtual void on_failure_measurement(mk::nettest::events::FailureMeasurementEvent arg0);
    virtual void on_failure_measurement_submission(mk::nettest::events::FailureMeasurementSubmissionEvent arg0);
    virtual void on_failure_report_create(mk::nettest::events::FailureReportCreateEvent arg0);
    virtual void on_failure_report_close(mk::nettest::events::FailureReportCloseEvent arg0);
    virtual void on_failure_resolver_lookup(mk::nettest::events::FailureResolverLookupEvent arg0);
    virtual void on_failure_startup(mk::nettest::events::FailureStartupEvent arg0);
    virtual void on_log(mk::nettest::events::LogEvent arg0);
    virtual void on_measurement(mk::nettest::events::MeasurementEvent arg0);
    virtual void on_status_end(mk::nettest::events::StatusEndEvent arg0);
    virtual void on_status_geoip_lookup(mk::nettest::events::StatusGeoipLookupEvent arg0);
    virtual void on_status_progress(mk::nettest::events::StatusProgressEvent arg0);
    virtual void on_status_queued(mk::nettest::events::StatusQueuedEvent arg0);
    virtual void on_status_measurement_start(mk::nettest::events::StatusMeasurementStartEvent arg0);
    virtual void on_status_measurement_submission(mk::nettest::events::StatusMeasurementSubmissionEvent arg0);
    virtual void on_status_measurement_done(mk::nettest::events::StatusMeasurementDoneEvent arg0);
    virtual void on_status_report_close(mk::nettest::events::StatusReportCloseEvent arg0);
    virtual void on_status_report_create(mk::nettest::events::StatusReportCreateEvent arg0);
    virtual void on_status_resolver_lookup(mk::nettest::events::StatusResolverLookupEvent arg0);
    virtual void on_status_started(mk::nettest::events::StatusStartedEvent arg0);
    virtual void on_task_terminated(mk::nettest::events::TaskTerminatedEvent arg0);
    virtual bool dispatch_event(nlohmann::json doc);
    virtual bool dispatch_eventSwigPublic(nlohmann::json doc) {
      return mk::nettest::common::Nettest::dispatch_event(doc);
    }
public:
    bool swig_overrides(int n) {
      return (n < 24 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<24> swig_override;
};


#endif
