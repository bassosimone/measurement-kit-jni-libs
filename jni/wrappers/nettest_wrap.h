/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_mk_swig_nettest_WRAP_H_
#define SWIG_mk_swig_nettest_WRAP_H_

class SwigDirector_Settings : public mk::nettest::Settings, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_Settings(JNIEnv *jenv);
    virtual ~SwigDirector_Settings();
public:
    bool swig_overrides(int n) {
      return false;
    }
};

class SwigDirector_Nettest : public mk::nettest::Nettest, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_Nettest(JNIEnv *jenv, mk::nettest::Settings const &arg0);
    virtual ~SwigDirector_Nettest();
    virtual void on_failure_asn_lookup(mk::nettest::FailureAsnLookupEvent arg0);
    virtual void on_failure_cc_lookup(mk::nettest::FailureCcLookupEvent arg0);
    virtual void on_failure_ip_lookup(mk::nettest::FailureIpLookupEvent arg0);
    virtual void on_failure_measurement(mk::nettest::FailureMeasurementEvent arg0);
    virtual void on_failure_measurement_submission(mk::nettest::FailureMeasurementSubmissionEvent arg0);
    virtual void on_failure_report_create(mk::nettest::FailureReportCreateEvent arg0);
    virtual void on_failure_report_close(mk::nettest::FailureReportCloseEvent arg0);
    virtual void on_failure_resolver_lookup(mk::nettest::FailureResolverLookupEvent arg0);
    virtual void on_failure_startup(mk::nettest::FailureStartupEvent arg0);
    virtual void on_log(mk::nettest::LogEvent arg0);
    virtual void on_measurement(mk::nettest::MeasurementEvent arg0);
    virtual void on_status_end(mk::nettest::StatusEndEvent arg0);
    virtual void on_status_geoip_lookup(mk::nettest::StatusGeoipLookupEvent arg0);
    virtual void on_status_progress(mk::nettest::StatusProgressEvent arg0);
    virtual void on_status_queued(mk::nettest::StatusQueuedEvent arg0);
    virtual void on_status_measurement_start(mk::nettest::StatusMeasurementStartEvent arg0);
    virtual void on_status_measurement_submission(mk::nettest::StatusMeasurementSubmissionEvent arg0);
    virtual void on_status_measurement_done(mk::nettest::StatusMeasurementDoneEvent arg0);
    virtual void on_status_report_close(mk::nettest::StatusReportCloseEvent arg0);
    virtual void on_status_report_create(mk::nettest::StatusReportCreateEvent arg0);
    virtual void on_status_resolver_lookup(mk::nettest::StatusResolverLookupEvent arg0);
    virtual void on_status_started(mk::nettest::StatusStartedEvent arg0);
    virtual void on_status_update_performance(mk::nettest::StatusUpdatePerformanceEvent arg0);
    virtual void on_status_update_websites(mk::nettest::StatusUpdateWebsitesEvent arg0);
    virtual void on_task_terminated(mk::nettest::TaskTerminatedEvent arg0);
public:
    bool swig_overrides(int n) {
      return (n < 25 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<25> swig_override;
};

class SwigDirector_CaptivePortalSettings : public mk::nettest::CaptivePortalSettings, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_CaptivePortalSettings(JNIEnv *jenv);
    virtual ~SwigDirector_CaptivePortalSettings();
public:
    bool swig_overrides(int n) {
      return false;
    }
};

class SwigDirector_DashSettings : public mk::nettest::DashSettings, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_DashSettings(JNIEnv *jenv);
    virtual ~SwigDirector_DashSettings();
public:
    bool swig_overrides(int n) {
      return false;
    }
};

class SwigDirector_DnsInjectionSettings : public mk::nettest::DnsInjectionSettings, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_DnsInjectionSettings(JNIEnv *jenv);
    virtual ~SwigDirector_DnsInjectionSettings();
public:
    bool swig_overrides(int n) {
      return false;
    }
};

class SwigDirector_FacebookMessengerSettings : public mk::nettest::FacebookMessengerSettings, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_FacebookMessengerSettings(JNIEnv *jenv);
    virtual ~SwigDirector_FacebookMessengerSettings();
public:
    bool swig_overrides(int n) {
      return false;
    }
};

class SwigDirector_HttpHeaderFieldManipulationSettings : public mk::nettest::HttpHeaderFieldManipulationSettings, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HttpHeaderFieldManipulationSettings(JNIEnv *jenv);
    virtual ~SwigDirector_HttpHeaderFieldManipulationSettings();
public:
    bool swig_overrides(int n) {
      return false;
    }
};

class SwigDirector_HttpInvalidRequestLineSettings : public mk::nettest::HttpInvalidRequestLineSettings, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_HttpInvalidRequestLineSettings(JNIEnv *jenv);
    virtual ~SwigDirector_HttpInvalidRequestLineSettings();
public:
    bool swig_overrides(int n) {
      return false;
    }
};

class SwigDirector_MeekFrontedRequestsSettings : public mk::nettest::MeekFrontedRequestsSettings, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_MeekFrontedRequestsSettings(JNIEnv *jenv);
    virtual ~SwigDirector_MeekFrontedRequestsSettings();
public:
    bool swig_overrides(int n) {
      return false;
    }
};

class SwigDirector_MultiNdtSettings : public mk::nettest::MultiNdtSettings, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_MultiNdtSettings(JNIEnv *jenv);
    virtual ~SwigDirector_MultiNdtSettings();
public:
    bool swig_overrides(int n) {
      return false;
    }
};

class SwigDirector_NdtSettings : public mk::nettest::NdtSettings, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_NdtSettings(JNIEnv *jenv);
    virtual ~SwigDirector_NdtSettings();
public:
    bool swig_overrides(int n) {
      return false;
    }
};

class SwigDirector_TcpConnectSettings : public mk::nettest::TcpConnectSettings, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_TcpConnectSettings(JNIEnv *jenv);
    virtual ~SwigDirector_TcpConnectSettings();
public:
    bool swig_overrides(int n) {
      return false;
    }
};

class SwigDirector_TelegramSettings : public mk::nettest::TelegramSettings, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_TelegramSettings(JNIEnv *jenv);
    virtual ~SwigDirector_TelegramSettings();
public:
    bool swig_overrides(int n) {
      return false;
    }
};

class SwigDirector_WebConnectivitySettings : public mk::nettest::WebConnectivitySettings, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_WebConnectivitySettings(JNIEnv *jenv);
    virtual ~SwigDirector_WebConnectivitySettings();
public:
    bool swig_overrides(int n) {
      return false;
    }
};

class SwigDirector_WhatsappSettings : public mk::nettest::WhatsappSettings, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_WhatsappSettings(JNIEnv *jenv);
    virtual ~SwigDirector_WhatsappSettings();
public:
    bool swig_overrides(int n) {
      return false;
    }
};


#endif
